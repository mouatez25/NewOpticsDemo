using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors;
using Microsoft.Reporting.WinForms;
using Microsoft.Win32;
using NewOptics.Administrateur;
using NewOptics.Caisse;
using NewOptics.Commande;
using NewOptics.Stock;
using Nut;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Transactions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace NewOptics.ClientA
{
    /// <summary>
    /// Interaction logic for DossierClient.xaml
    /// </summary>
    public partial class DossierClient : DXWindow
    {
        SVC.ServiceCliniqueClient proxy;
        ICallback callback;
        SVC.MembershipOptic memberuser;
        SVC.ClientV Clientvv;
        bool factureopern = false;
        SVC.F1 ancienneF1;
        SVC.F1 selectedF1;
        SVC.Param selectedparam;
        SVC.F1 nouveauF1;
        bool facturenew = false;
        bool facturemodif = false;
        private delegate void FaultedInvokerListePatient();
        List<SVC.Facture> factureselectedl;
        List<SVC.Facture> anciennefactureselectedl;
        List<SVC.Prodf> produitavendre = new List<SVC.Prodf>();
        DXDialog dialog1;
        int documenttype = 0;
        string serverfilepath, filepath;
        bool fermer = false;
        SVC.Monture MontureClass;
        SVC.LentilleClient LentilleClass;
        SVC.examenopto ExamenOptométriqueClass;
        SVC.ExamenBinoculaire ExamenBinoculaireClass;
        bool nouvellelentille = false;
        bool anciennelentille = false;
        bool nouvellemonture = false;
        bool anciennemonture = false;
        bool nouveauexamenoptometrique = false;
        bool ancienexamenoptometrique = false;
        bool nouveauExamenBinoculaire = false;
        bool ancieneExamenBinoculaire = false;
        bool montureversementzero = false;
        bool Lentilleversementzero = false;
        int interfacefacturation = 0;
        Microsoft.Win32.OpenFileDialog op = null;
        Microsoft.Win32.OpenFileDialog opLoadInc = null;
        SVC.AdaptationLentille AdaptationLentilleClass;
        bool existeAdaptationLentille = false;
        SVC.Anamnese AnamneseClass;
        bool existeAnamnese = false;
        SVC.Paint PaintClass;
        bool existePaint = false;
        bool creermodif = false;
        System.Windows.Controls.Image imagePaint;
        SVC.Prodf selectedtropuvé;
        List<SVC.MontureSupplement> listsupp1;
        List<SVC.MontureSupplement> listsupp2;
        List<SVC.MontureSupplement> listsupp3;
        List<SVC.MontureSupplement> listsupp4;
        List<SVC.MontureSupplement> anciennelistsupp1;
        List<SVC.MontureSupplement> anciennelistsupp2;
        List<SVC.MontureSupplement> anciennelistsupp3;
        List<SVC.MontureSupplement> anciennelistsupp4;
        int interfaceimpressionmonture = 0;
        int interfaceimpressionlentille = 0;
        bool visualiser = false; bool visualiserLentille = false;
        private IList<Stream> m_streams;
        private int m_currentPageIndex;
        bool visualiserFacture = false;
        int interfaceimpressionfacture = 0;
        bool tunisie = false;
        public DossierClient(SVC.ServiceCliniqueClient proxyrecu, ICallback callbackrecu, SVC.MembershipOptic memberrecu, SVC.ClientV clientrecu)
        {
            try
            {
                InitializeComponent();
                proxy = proxyrecu;
                callback = callbackrecu;
                memberuser = memberrecu;
                Clientvv = clientrecu;
                selectedparam = proxy.GetAllParamétre();
                if (selectedparam.Comon.Trim()=="TND")
                {
                    tunisie = true;
                }
                else
                {
                    tunisie = false;
                }
                    inkCanvas1.Cursor = Cursors.Cross;
                /********************************reglement**********************************/
                HistoriqueDesDataGrid.ItemsSource = proxy.GetAllF1All().Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R")).OrderBy(n => n.date);
                CompteComboBox.SelectedIndex = 0;

                this.Title = "Dossier Client : " + Clientvv.Raison;
                if (selectedparam.ModifTarif == true)
                {
                    CompteComboBox.IsEnabled = true;
                }
                else
                {
                    CompteComboBox.IsEnabled = false;
                }
                txtLabelTotalAregler.Content = Convert.ToString((proxy.GetAllF1All().Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.net));
                txtLabelTotalversement.Content = Convert.ToString((proxy.GetAllF1All().Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.versement));
                txtLabelTotalReste.Content = Convert.ToString((proxy.GetAllF1All().Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.reste));

                /****************************Historique************************************************/
                callbackrecu.InsertF1CallbackEvent += new ICallback.CallbackEventHandler6(callbackrecu_Refresh);

                callbackrecu.InsertFactureCallbackEvent += new ICallback.CallbackEventHandler8(callbackrecuFacture_Refresh);
                callbackrecu.InsertFactureVentefListCallbackevent += new ICallback.CallbackEventHandler11(callbackrecuFactureList_Refresh);
                callbackrecu.InsertF1ListCallbackEvent+= new ICallback.CallbackEventHandler27(callbackrecuF1List_Refresh);
                /**********************************************************************************/


                if (selectedparam.AffichPrixAchatVente == true)
                {
                    NomenclatureProduit.Columns[3].Visibility = Visibility.Visible;
                    dETAILDatagrid.Columns[5].Visibility = Visibility.Visible;
                }
                else
                {
                    NomenclatureProduit.Columns[3].Visibility = Visibility.Collapsed;
                    dETAILDatagrid.Columns[5].Visibility = Visibility.Collapsed;
                }
                if (selectedparam.ModiPrix == true)
                {
                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                }
                else
                {
                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                }
                if (selectedparam.modidate == true)
                {
                    txtDateOper.IsEnabled = true;
                }
                if (selectedparam.affiben == true)
                {
                    Bénéfice.Visibility = Visibility.Visible;
                    Bénéficemont.Visibility = Visibility.Visible;
                    //   Bénéficemont.Text = Convert.ToString(((comptoircalcu.listcomptoir).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((comptoircalcu.listcomptoir).AsEnumerable().Sum(o => o.previent * o.quantite)));

                }
                /****************************/
                if (selectedparam.AffichPrixAchatVente == true)
                {
                    ProduitHistoriquevente.Columns[3].Visibility = Visibility.Visible;
                }
                else
                {
                    ProduitHistoriquevente.Columns[3].Visibility = Visibility.Collapsed;
                }

                /*******************************galerie image************************************/
                DatagridImage1.ItemsSource = proxy.GetAllDicomFichier(Clientvv.Id);
                callbackrecu.InsertDicomCallbackevent += new ICallback.CallbackEventHandler51(callbackrecuDicomFichier_Refresh);

                /********************************Facturation*****************///////
                ListeDesDocuments.ItemsSource = proxy.GetAllF1Bycode(Clientvv.Id).Where(n => n.nfact.Substring(0, 2) != "Co").OrderBy(n => n.date);
                callbackrecu.InsertProdfListCallbackevent += new ICallback.CallbackEventHandler10(callbackrecuprodf_Refresh);
                callbackrecu.InsertProdfCallbackEvent += new ICallback.CallbackEventHandler21(callbackrecuprodf_Refresh);
                /******************************Monture***************************************/

                MontureDatagrid.ItemsSource = proxy.GetAllMonturebycode(Clientvv.Id).OrderBy(n => n.Date);
                callbackrecu.InsertMontureCallbackevent += new ICallback.CallbackEventHandler34(callbackrecumonture_Refresh);
                /********************************Lentille**************************************/
                LentilleDatagrid.ItemsSource = proxy.GetAllLentilleClientbycode(Clientvv.Id).OrderBy(n => n.Date);
                callbackrecu.InsertLentilleClientCallbackevent += new ICallback.CallbackEventHandler35(callbackreculentille_Refresh);
                /********************************examenopto**************************************/
                ExamenOptometrieDatagrid.ItemsSource = proxy.GetAllExamensOptométriquesbycode(Clientvv.Id).OrderBy(n => n.Date);
                callbackrecu.InsertExamenOptométriqueCallbackevent += new ICallback.CallbackEventHandler36(callbackrecuExamenOptométrique);
                /********************************examenbinoculaire**************************************/
                ExamenBinoculaireDatagrid.ItemsSource = proxy.GetAllExamenBinoculairebycode(Clientvv.Id).OrderBy(n => n.Date);
                callbackrecu.InsertExamenBinoculaireCallbackevent += new ICallback.CallbackEventHandler37(callbackrecuExamenBinoculaire);
                /**************************************************************************/
                existeAdaptationLentille = proxy.GetAllAdaptationLentillebycode(Clientvv.Id).Any();
                if (existeAdaptationLentille == true)
                {
                    AdaptationLentilleClass = proxy.GetAllAdaptationLentillebycode(Clientvv.Id).First();
                    AdaptationGrid.DataContext = AdaptationLentilleClass;
                }
                else
                {
                    AdaptationLentilleClass = new SVC.AdaptationLentille
                    {
                        AmplitudeDroiteComplet = false,
                        AmplitudeDroiteIncomplet = false,
                        AmplitudeGaucheComplet = false,
                        AmplitudeGaucheIncomplet = false,
                        Date = DateTime.Now,
                        FrequenceDroiteFrequent = false,
                        FrequenceDroiteLent = false,
                        FrequenceDroiteNormal = false,
                        TonusGaucheFort = false,
                        TonusDroiteFaible = false,
                        TonusDroiteNormal = false,
                        TonusDroiteFort = false,
                        TonusGaucheFaible = false,
                        TonusGaucheNormal = false,
                        ReactionGaucheRapide = false,
                        ReactionGaucheNormal = false,
                        ReactionGaucheLente = false,
                        ReactionDroiteRapide = false,
                        ReactionDroiteNormal = false,
                        ReactionDroiteLente = false,
                        FrequenceGaucheFrequent = false,
                        FrequenceGaucheLent = false,
                        FrequenceGaucheNormal = false,
                        UserName = memberuser.Username,
                        RaisonClient = Clientvv.Raison,
                        IdClient = Clientvv.Id,

                    };
                    AdaptationGrid.DataContext = AdaptationLentilleClass;
                }
                callbackrecu.InsertAdaptationLentilleCallbackevent += new ICallback.CallbackEventHandler38(callbackrecuAdaptationLentille);
                /**************************Paint********************************/
                PaintDatagrid.ItemsSource = proxy.GetAllPaintbycode(Clientvv.Id);
                callbackrecu.InsertPaintCallbackevent += new ICallback.CallbackEventHandler43(callbackrecuPaint);
                /**************************************************************************/
                existeAnamnese = proxy.GetAllAnamnesebycode(Clientvv.Id).Any();
                if (existeAnamnese == true)
                {
                    AnamneseClass = proxy.GetAllAnamnesebycode(Clientvv.Id).First();
                    AnamneseGrid.DataContext = AnamneseClass;
                }
                else
                {
                    AnamneseClass = new SVC.Anamnese
                    {

                        Date = DateTime.Now,
                        UserName = memberuser.Username,
                        RaisonClient = Clientvv.Raison,
                        IdClient = Clientvv.Id,
                        LentillePrNon = false,
                        LentillePrRigides = false,
                        LentillePrOui = false,
                        LentillePrSansSucces = false,
                        LentillePrSouples = false,
                        LentillePrSucces = false,

                    };
                    AnamneseGrid.DataContext = AnamneseClass;
                }

                callbackrecu.InsertAnamneseCallbackevent += new ICallback.CallbackEventHandler39(callbackrecuAnamnese);
                /**************************************************************************/

                /******************************************************************************/
                proxy.InnerDuplexChannel.Faulted += new EventHandler(InnerDuplexChannel_Faulted);

                proxy.InnerDuplexChannel.Closed += new EventHandler(InnerDuplexChannel_Closed);
            }
            catch (Exception ex)
            {
                HandleProxy();
            }
        }
        public static byte[] ToByteArray(System.Drawing.Image image, ImageFormat format)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                image.Save(ms, format);
                return ms.ToArray();
            }
        }
        void callbackrecuDicomFichier_Refresh(object source, CallbackEventInsertListImage e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshDicomFichier(e.clientleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }
        public void AddRefreshDicomFichier(List<SVC.DicomFichier> listmembership)
        {
            try
            {
                DatagridImage1.ItemsSource = listmembership;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }
        void callbackrecuPaint(object source, CallbackEventInsertPaint e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshPaint(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshPaint(SVC.Paint listmembership, int oper)
        {
            try
            {


                var LISTITEM1 = PaintDatagrid.ItemsSource as IEnumerable<SVC.Paint>;
                List<SVC.Paint> LISTITEM = LISTITEM1.ToList();

                if (oper == 1)
                {
                    LISTITEM.Add(listmembership);
                }
                else
                {
                    if (oper == 2)
                    {
                        //   var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //  objectmodifed = listmembership;

                        var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //objectmodifed = listmembership;
                        var index = LISTITEM.IndexOf(objectmodifed);
                        if (index != -1)
                            LISTITEM[index] = listmembership;
                    }
                    else
                    {
                        if (oper == 3)
                        {
                            //    MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show("Supp rendezvous :"+ listmembership.Id.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                            var deleterendez = LISTITEM.Where(n => n.Id == listmembership.Id).First();
                            LISTITEM.Remove(deleterendez);
                        }
                    }
                }

                PaintDatagrid.ItemsSource = LISTITEM;


            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }

        void callbackrecuAnamnese(object source, CallbackEventInsertAnamnese e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshAnamnese(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshAnamnese(SVC.Anamnese listmembership, int oper)
        {
            try
            {


                if (listmembership.IdClient == Clientvv.Id)
                {
                    if (oper == 1)
                    {
                        AnamneseClass = listmembership;
                        AnamneseGrid.DataContext = AnamneseClass;
                    }
                    else
                    {
                        if (oper == 2)
                        {
                            AnamneseClass = listmembership;
                            AnamneseGrid.DataContext = AnamneseClass;
                        }
                        else
                        {
                            if (oper == 3)
                            {

                            }
                        }
                    }

                }




            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        void callbackrecuAdaptationLentille(object source, CallbackEventInsertAdaptationLentille e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshAdaptationLentille(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshAdaptationLentille(SVC.AdaptationLentille listmembership, int oper)
        {
            try
            {


                if (listmembership.IdClient == Clientvv.Id)
                {
                    if (oper == 1)
                    {
                        AdaptationLentilleClass = listmembership;
                        AdaptationGrid.DataContext = AdaptationLentilleClass;
                    }
                    else
                    {
                        if (oper == 2)
                        {
                            AdaptationLentilleClass = listmembership;
                            AdaptationGrid.DataContext = AdaptationLentilleClass;
                        }
                        else
                        {
                            if (oper == 3)
                            {

                            }
                        }
                    }

                }




            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        void callbackrecuExamenBinoculaire(object source, CallbackEventInsertExamenBinoculaire e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshExamenBinoculaire(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshExamenBinoculaire(SVC.ExamenBinoculaire listmembership, int oper)
        {
            try
            {

                var LISTITEM1 = ExamenBinoculaireDatagrid.ItemsSource as IEnumerable<SVC.ExamenBinoculaire>;
                List<SVC.ExamenBinoculaire> LISTITEM = LISTITEM1.ToList();

                if (oper == 1)
                {
                    LISTITEM.Add(listmembership);
                }
                else
                {
                    if (oper == 2)
                    {
                        //   var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //  objectmodifed = listmembership;

                        var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //objectmodifed = listmembership;
                        var index = LISTITEM.IndexOf(objectmodifed);
                        if (index != -1)
                            LISTITEM[index] = listmembership;
                    }
                    else
                    {
                        if (oper == 3)
                        {
                            //    MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show("Supp rendezvous :"+ listmembership.Id.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                            var deleterendez = LISTITEM.Where(n => n.Id == listmembership.Id).First();
                            LISTITEM.Remove(deleterendez);
                        }
                    }
                }

                ExamenBinoculaireDatagrid.ItemsSource = LISTITEM;


            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        void callbackrecuExamenOptométrique(object source, CallbackEventInsertExamenOptométrique e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshExamenOptométrique(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshExamenOptométrique(SVC.examenopto listmembership, int oper)
        {
            try
            {

                var LISTITEM1 = ExamenOptometrieDatagrid.ItemsSource as IEnumerable<SVC.examenopto>;
                List<SVC.examenopto> LISTITEM = LISTITEM1.ToList();

                if (oper == 1)
                {
                    LISTITEM.Add(listmembership);
                }
                else
                {
                    if (oper == 2)
                    {
                        //   var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //  objectmodifed = listmembership;

                        var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //objectmodifed = listmembership;
                        var index = LISTITEM.IndexOf(objectmodifed);
                        if (index != -1)
                            LISTITEM[index] = listmembership;
                    }
                    else
                    {
                        if (oper == 3)
                        {
                            //    MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show("Supp rendezvous :"+ listmembership.Id.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                            var deleterendez = LISTITEM.Where(n => n.Id == listmembership.Id).First();
                            LISTITEM.Remove(deleterendez);
                        }
                    }
                }

                ExamenOptometrieDatagrid.ItemsSource = LISTITEM;


            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        void callbackreculentille_Refresh(object source, CallbackEventInsertLentilleClient e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshLentilleClient(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshLentilleClient(SVC.LentilleClient listmembership, int oper)
        {
            try
            {

                var LISTITEM1 = LentilleDatagrid.ItemsSource as IEnumerable<SVC.LentilleClient>;
                List<SVC.LentilleClient> LISTITEM = LISTITEM1.ToList();

                if (oper == 1)
                {
                    LISTITEM.Add(listmembership);
                }
                else
                {
                    if (oper == 2)
                    {
                        //   var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //  objectmodifed = listmembership;

                        var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //objectmodifed = listmembership;
                        var index = LISTITEM.IndexOf(objectmodifed);
                        if (index != -1)
                            LISTITEM[index] = listmembership;
                    }
                    else
                    {
                        if (oper == 3)
                        {
                            //    MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show("Supp rendezvous :"+ listmembership.Id.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                            var deleterendez = LISTITEM.Where(n => n.Id == listmembership.Id).First();
                            LISTITEM.Remove(deleterendez);
                        }
                    }
                }

                LentilleDatagrid.ItemsSource = LISTITEM;


            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        void callbackrecumonture_Refresh(object source, CallbackEventInsertMonture e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshMonture(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshMonture(SVC.Monture listmembership, int oper)
        {
            try
            {

                var LISTITEM1 = MontureDatagrid.ItemsSource as IEnumerable<SVC.Monture>;
                List<SVC.Monture> LISTITEM = LISTITEM1.ToList();

                if (oper == 1)
                {
                    LISTITEM.Add(listmembership);
                }
                else
                {
                    if (oper == 2)
                    {
                        //   var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //  objectmodifed = listmembership;

                        var objectmodifed = LISTITEM.Find(n => n.Id == listmembership.Id);
                        //objectmodifed = listmembership;
                        var index = LISTITEM.IndexOf(objectmodifed);
                        if (index != -1)
                            LISTITEM[index] = listmembership;
                    }
                    else
                    {
                        if (oper == 3)
                        {
                            //    MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show("Supp rendezvous :"+ listmembership.Id.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                            var deleterendez = LISTITEM.Where(n => n.Id == listmembership.Id).First();
                            LISTITEM.Remove(deleterendez);
                        }
                    }
                }

                MontureDatagrid.ItemsSource = LISTITEM;


            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }

        void callbackrecuprodf_Refresh(object source, CallbackEventInsertListProdf e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshProdfListe(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshProdfListe(List<SVC.Prodf> listMembershipOpticlist, int oper)
        {
            try
            {
                if (factureopern == true)
                {
                    var LISTITEM1 = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;


                    List<SVC.Prodf> LISTITEM = LISTITEM1.ToList();

                    foreach (var listMembershipOptic in listMembershipOpticlist)
                    {

                        if (oper == 1)
                        {
                            LISTITEM.Add(listMembershipOptic);
                        }
                        else
                        {
                            if (oper == 2 || oper == 4)
                            {



                                var objectmodifed = LISTITEM.Find(n => n.Id == listMembershipOptic.Id);
                                var index = LISTITEM.IndexOf(objectmodifed);
                                if (index != -1)
                                    LISTITEM[index] = listMembershipOptic;
                            }
                            else
                            {
                                if (oper == 3)
                                {
                                    var deleterendez = LISTITEM.Where(n => n.Id == listMembershipOptic.Id).First();
                                    LISTITEM.Remove(deleterendez);
                                }
                            }
                        }

                        NomenclatureProduit.ItemsSource = LISTITEM;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }


        void callbackrecuprodf_Refresh(object source, CallbackEventInsertProdf e)
        {
            try
            {
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
                {
                    AddRefreshProdf(e.clientleav, e.operleav);
                }));
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        public void AddRefreshProdf(SVC.Prodf listMembershipOptic, int oper)
        {
            try
            {
                if (factureopern == true)
                {
                    var LISTITEM1 = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;
                    List<SVC.Prodf> LISTITEM = LISTITEM1.ToList();

                    if (oper == 1)
                    {
                        LISTITEM.Add(listMembershipOptic);
                    }
                    else
                    {
                        if (oper == 2)
                        {

                            var objectmodifed = LISTITEM.Find(n => n.Id == listMembershipOptic.Id);
                            var index = LISTITEM.IndexOf(objectmodifed);
                            if (index != -1)
                                LISTITEM[index] = listMembershipOptic;
                        }
                        else
                        {
                            if (oper == 3)
                            {
                                var deleterendez = LISTITEM.Where(n => n.Id == listMembershipOptic.Id).First();
                                LISTITEM.Remove(deleterendez);
                            }
                        }
                    }

                    NomenclatureProduit.ItemsSource = LISTITEM;
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        void callbackrecuF1List_Refresh(object source, CallbackEventInsertF1List e)
        {
            Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
            {
                AddRefreshF1ListVente(e.clientleav);
            }));
        }
        public void AddRefreshF1ListVente(List<SVC.F1> memberfacture)
        {

            try
            {


                try
                {
                    foreach (SVC.F1 listmembership in memberfacture)
                    {
                      //  MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show("i'm here3", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                        /*******************************************************************************************/
                        if (listmembership.codeclient == Clientvv.Id)
                        {
                            if (listmembership.nfact.Substring(0, 1) != "P" && listmembership.nfact.Substring(0, 1) != "R")
                            {
                                var LISTITEM11 = HistoriqueDesDataGrid.ItemsSource as IEnumerable<SVC.F1>;
                                List<SVC.F1> LISTITEM0 = LISTITEM11.ToList();
                                if (listmembership.cle == Clientvv.cle || listmembership.codeclient == Clientvv.Id)
                                {



                                    var objectmodifed = LISTITEM0.Find(n => n.Id == listmembership.Id);
                                    //objectmodifed = listmembership;
                                    var index = LISTITEM0.IndexOf(objectmodifed);
                                    if (index != -1)
                                        LISTITEM0[index] = listmembership;


                                }
                                HistoriqueDesDataGrid.ItemsSource = LISTITEM0.OrderBy(r => r.date);
                                // txtLabelTotalAregler.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.net));
                                // txtLabelTotalversement.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.versement));
                                // txtLabelTotalReste.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.reste));
                                txtLabelTotalAregler.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.net));
                                txtLabelTotalversement.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.versement));
                                txtLabelTotalReste.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.reste));
                            }/*****************facturation grid************/
                            var LISTITEM22 = ListeDesDocuments.ItemsSource as IEnumerable<SVC.F1>;
                            List<SVC.F1> LISTITEM2 = LISTITEM22.ToList();
                            if (listmembership.cle == Clientvv.cle || listmembership.codeclient == Clientvv.Id)
                            {
                              




                                        var objectmodifed = LISTITEM2.Find(n => n.Id == listmembership.Id);
                                        //objectmodifed = listmembership;
                                        var index = LISTITEM2.IndexOf(objectmodifed);
                                        if (index != -1)
                                            LISTITEM2[index] = listmembership;

                                  
                            

                            }

                            ListeDesDocuments.ItemsSource = LISTITEM2.OrderBy(r => r.date);
                            

                        } }
                }
                catch (Exception ex)
                {
                    MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }



        }

        void callbackrecuFactureList_Refresh(object source, CallbackEventInsertListfacturevente e)
        {
            Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
            {
                AddRefreshFactureListVente(e.clientleav);
            }));
        }
        public void AddRefreshFactureListVente(List<SVC.Facture> memberfacture)
        {

            try
            {
                if (memberfacture.First().codeclient == Clientvv.Id && nouveauF1 != null)
                {
                    /*******************************************************************************************/
                    if (facturemodif == true && facturenew == false && nouveauF1.cle == memberfacture.First().cle)
                    {

                        ReceptDatagrid.ItemsSource = memberfacture;

                    }

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }



        }

        void callbackrecuFacture_Refresh(object source, CallbackEventInsertFacture e)
        {
            Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
            {
                AddRefreshFacture(e.clientleav, e.operleav);
            }));
        }
        public void AddRefreshFacture(SVC.Facture listmembership, int oper)
        {

            try
            {
                if (listmembership.codeclient == Clientvv.Id)
                {
                    /*******************************************************************************************/
                    if (ProduitHistoriquevente.ItemsSource != null)
                    {
                        var LISTITEM11 = ProduitHistoriquevente.ItemsSource as IEnumerable<SVC.Facture>;
                        List<SVC.Facture> LISTITEM0 = LISTITEM11.ToList();

                        if (oper == 1)
                        {
                            LISTITEM0.Add(listmembership);
                        }
                        else
                        {
                            if (oper == 2)
                            {




                                var objectmodifed = LISTITEM0.Find(n => n.Id == listmembership.Id);
                                //objectmodifed = listmembership;
                                var index = LISTITEM0.IndexOf(objectmodifed);
                                if (index != -1)
                                    LISTITEM0[index] = listmembership;
                            }
                            else
                            {
                                if (oper == 3)
                                {
                                    var deleterendez = LISTITEM0.Where(n => n.Id == listmembership.Id).First();
                                    LISTITEM0.Remove(deleterendez);
                                }
                            }


                        }
                        ProduitHistoriquevente.ItemsSource = LISTITEM0;

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }



        }
        void callbackrecu_Refresh(object source, CallbackEventInsertF1 e)
        {
            Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(delegate
            {
                AddRefresh(e.clientleav, e.operleav);
            }));
        }
        public void AddRefresh(SVC.F1 listmembership, int oper)
        {

            try
            {
             //   MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show("i'm here", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                /*******************************************************************************************/
                if (listmembership.codeclient == Clientvv.Id || listmembership.cle == Clientvv.cle)
                {
                    if (listmembership.nfact.Substring(0,1)!="P" && listmembership.nfact.Substring(0,1) != "R")
                    {
                        var LISTITEM11 = HistoriqueDesDataGrid.ItemsSource as IEnumerable<SVC.F1>;
                        List<SVC.F1> LISTITEM0 = LISTITEM11.ToList();
                        if (listmembership.cle == Clientvv.cle || listmembership.codeclient == Clientvv.Id)
                        {
                            if (oper == 1)
                            {
                                LISTITEM0.Add(listmembership);

                            }
                            else
                            {
                                if (oper == 2)
                                {




                                    var objectmodifed = LISTITEM0.Find(n => n.Id == listmembership.Id);
                                    //objectmodifed = listmembership;
                                    var index = LISTITEM0.IndexOf(objectmodifed);
                                    if (index != -1)
                                        LISTITEM0[index] = listmembership;
                                }
                                else
                                {
                                    if (oper == 3)
                                    {
                                        var deleterendez = LISTITEM0.Where(n => n.Id == listmembership.Id).First();
                                        LISTITEM0.Remove(deleterendez);
                                    }
                                }
                            }

                        }
                        HistoriqueDesDataGrid.ItemsSource = LISTITEM0.OrderBy(r => r.date);
                        // txtLabelTotalAregler.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.net));
                        // txtLabelTotalversement.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.versement));
                        // txtLabelTotalReste.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.reste));
                        txtLabelTotalAregler.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.net));
                        txtLabelTotalversement.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.versement));
                        txtLabelTotalReste.Content = Convert.ToString((LISTITEM0.Where(n => (n.codeclient == Clientvv.Id || n.cle == Clientvv.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R"))).AsEnumerable().Sum(o => o.reste));
                    } /*****************facturation grid************/
                    var LISTITEM22 = ListeDesDocuments.ItemsSource as IEnumerable<SVC.F1>;
                    List<SVC.F1> LISTITEM2 = LISTITEM22.ToList();
                    if (listmembership.cle == Clientvv.cle || listmembership.codeclient == Clientvv.Id)
                    {
                        if (oper == 1)
                        {
                            LISTITEM2.Add(listmembership);

                        }
                        else
                        {
                            if (oper == 2)
                            {




                                var objectmodifed = LISTITEM2.Find(n => n.Id == listmembership.Id);
                                //objectmodifed = listmembership;
                                var index = LISTITEM2.IndexOf(objectmodifed);
                                if (index != -1)
                                    LISTITEM2[index] = listmembership;

                            }
                            else
                            {
                                if (oper == 3)
                                {
                                    var deleterendez = LISTITEM2.Where(n => n.Id == listmembership.Id).First();
                                    LISTITEM2.Remove(deleterendez);
                                }
                            }
                        }

                    }

                    ListeDesDocuments.ItemsSource = LISTITEM2.OrderBy(r => r.date);
                    if (oper == 1)
                    {
                        ListeDesDocuments.SelectedItem = listmembership;
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult results = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }



        }

        void InnerDuplexChannel_Closed(object sender, EventArgs e)
        {
            if (!this.Dispatcher.CheckAccess())
            {
                this.Dispatcher.BeginInvoke(DispatcherPriority.Normal, new FaultedInvokerListePatient(HandleProxy));
                return;
            }
            HandleProxy();
        }
        private void HandleProxy()
        {
            if (proxy != null)
            {
                switch (this.proxy.State)
                {
                    case CommunicationState.Closed:
                        proxy = null;
                        this.Close();
                        break;
                    case CommunicationState.Closing:
                        break;
                    case CommunicationState.Created:
                        break;
                    case CommunicationState.Faulted:
                        proxy.Abort();
                        proxy = null;
                        this.Close();

                        break;
                    case CommunicationState.Opened:


                        break;
                    case CommunicationState.Opening:
                        break;
                    default:
                        break;
                }
            }

        }
        void InnerDuplexChannel_Faulted(object sender, EventArgs e)
        {
            if (!this.Dispatcher.CheckAccess())
            {
                this.Dispatcher.BeginInvoke(DispatcherPriority.Normal, new FaultedInvokerListePatient(HandleProxy));
                return;
            }
            HandleProxy();
        }

        public bool DetectPatientInLIST(List<SVC.F1> myList)
        {
            if (myList.Any())
            {
                var value = myList.First().codeclient;
                return myList.All(item => item.codeclient == value);
            }
            else
            {
                return true;
            }
        }
        private void btnNewRéglement_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationRecouv == true && HistoriqueDesDataGrid.SelectedItem != null && HistoriqueDesDataGrid.SelectedItems.Count == 1)
                {

                    SVC.F1 SelectMedecin = HistoriqueDesDataGrid.SelectedItem as SVC.F1;
                    if (SelectMedecin.reste != 0)
                    {
                        if (SelectMedecin.nfact.Substring(0, 1) != "P" && SelectMedecin.nfact.Substring(0, 1) != "R")
                        {
                            AjouterTransaction bn = new AjouterTransaction(proxy, memberuser, callback, null, 3, null, SelectMedecin, null, null);
                            bn.Show();
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.Opérationéchouée, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                        }
                    }
                    else
                    {
                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Facture déja soldé", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                    }

                }
                else
                {
                    if (memberuser.CreationRecouv == true && HistoriqueDesDataGrid.SelectedItem != null && HistoriqueDesDataGrid.SelectedItems.Count > 1)
                    {
                        List<SVC.F1> selectedreste = HistoriqueDesDataGrid.SelectedItems.OfType<SVC.F1>().ToList();
                        if (DetectPatientInLIST(selectedreste))
                        {
                            List<SVC.F1> Realselectedvisitewithreste = new List<SVC.F1>();
                            foreach (SVC.F1 item in selectedreste)
                            {
                                if (item.reste != 0)
                                {
                                    Realselectedvisitewithreste.Add(item);
                                }

                            }
                            if (Realselectedvisitewithreste.Count == 1)
                            {
                                AjouterTransaction bn = new AjouterTransaction(proxy, memberuser, callback, null, 3, null, Realselectedvisitewithreste.First(), null, null);
                                bn.Show();
                            }
                            else
                            {
                                if (Realselectedvisitewithreste.Count > 1)
                                {
                                    AjouterTransaction bn = new AjouterTransaction(proxy, memberuser, callback, null, 4, null, null, Realselectedvisitewithreste, null);
                                    bn.Show();
                                }
                                else
                                {
                                    MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                                }
                            }
                        }
                        else
                        {
                            MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez selectionnez les factures d'un même client", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                    else
                    {
                        MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void HistoriqueDesDataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (HistoriqueDesDataGrid.SelectedItem != null)
                {
                    SVC.F1 tasvisite = HistoriqueDesDataGrid.SelectedItem as SVC.F1;
                    var okmultiple = (proxy.GetAllDepeiementMultiple()).FindAll(n => n.cleVisite == tasvisite.cle);
                    SVC.Depeiment DepeimentMultiple;

                    List<SVC.Depeiment> depaiemlist;
                    depaiemlist = (proxy.GetAllDepeiment()).Where(n => n.cle == tasvisite.cle).ToList();
                    if (okmultiple.Count > 0)
                    {
                        foreach (SVC.DepeiementMultiple itemmultiple in okmultiple)
                        {
                            DepeimentMultiple = proxy.GetAllDepeiment().Find(n => n.CleMultiple == itemmultiple.cleMultiple);
                            if (!depaiemlist.Contains(DepeimentMultiple) && DepeimentMultiple.Multiple == true)
                            {
                                depaiemlist.Add(DepeimentMultiple);
                            }
                        }
                    }
                    VersementPatientDataGrid.ItemsSource = depaiemlist;

                    SVC.F1 selectedf1 = HistoriqueDesDataGrid.SelectedItem as SVC.F1;
                    dETAILDatagrid.ItemsSource = proxy.GetAllFactureBycompteur(selectedf1.nfact);








                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtRechercheVersement_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void txtRechercheVisite_TextChanged(object sender, TextChangedEventArgs e)
        {


        }

        private void btnSuppVersement_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.SuppressionRecouv == true && VersementPatientDataGrid.SelectedItem != null)
                {
                    bool SupDepaif = false;
                    bool SupDepanse = false;
                    bool UpdateRecouf = false;

                    SVC.Depeiment selectdepaief = VersementPatientDataGrid.SelectedItem as SVC.Depeiment;

                    if (selectdepaief.Multiple == false)
                    {

                        var depense = (proxy.GetAllDepense()).Find(n => n.cle == selectdepaief.cle && n.Crédit == true && n.MontantCrédit == selectdepaief.montant);
                        var Recouf = (proxy.GetAllF1ByCle(selectdepaief.cle)).Find(n => n.cle == selectdepaief.cle);
                        bool existelentille = proxy.GetAllLentilleClientbyDossier(Recouf.cleDossier).Any();
                        bool existemonture = proxy.GetAllMonturebyDossier(Recouf.cleDossier).Any();
                        if (existelentille == false && existemonture == false)
                        {
                            using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                            {


                                /*suprimez l'écriture de depaief*/
                                proxy.DeleteDepeiment(selectdepaief);
                                SupDepaif = true;
                                //   MessageBoxResult result11 = Xceed.Wpf.Toolkit.MessageBox.Show("paiement succées", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                /*  suprimez l'écriture de depanse*/
                                proxy.DeleteDepense(depense);
                                SupDepanse = true;
                                //  MessageBoxResult result1g1 = Xceed.Wpf.Toolkit.MessageBox.Show("Deletedepense succées", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                /*  update recouf c-a-d enlevez le montant */
                                Recouf.reste = Recouf.reste + selectdepaief.montant;
                                Recouf.versement = Recouf.versement - selectdepaief.montant;
                                Recouf.soldé = false;

                                proxy.UpdateF1(Recouf);
                                UpdateRecouf = true;
                                //   MessageBoxResult result1g1d = Xceed.Wpf.Toolkit.MessageBox.Show("Visite yes", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true)
                                {
                                    ts.Complete();
                                }


                            }
                            if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true)
                            {
                                proxy.AjouterTransactionPaiementRefresh();
                                proxy.AjouterDepenseRefresh();
                                proxy.AjouterSoldeF1Refresh();
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                            }
                        }
                        else
                        {
                            if (existelentille == true && existemonture == false)
                            {
                                bool updatelentille = false;
                                SVC.LentilleClient selectedlentille = proxy.GetAllLentilleClientbyDossier(Recouf.cleDossier).Last();
                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {


                                    /*suprimez l'écriture de depaief*/
                                    proxy.DeleteDepeiment(selectdepaief);
                                    SupDepaif = true;
                                    //   MessageBoxResult result11 = Xceed.Wpf.Toolkit.MessageBox.Show("paiement succées", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                    /*  suprimez l'écriture de depanse*/
                                    proxy.DeleteDepense(depense);
                                    SupDepanse = true;
                                    //  MessageBoxResult result1g1 = Xceed.Wpf.Toolkit.MessageBox.Show("Deletedepense succées", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                    /*  update recouf c-a-d enlevez le montant */
                                    Recouf.reste = Recouf.reste + selectdepaief.montant;
                                    Recouf.versement = Recouf.versement - selectdepaief.montant;
                                    Recouf.soldé = false;

                                    proxy.UpdateF1(Recouf);
                                    UpdateRecouf = true;
                                    //   MessageBoxResult result1g1d = Xceed.Wpf.Toolkit.MessageBox.Show("Visite yes", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                    selectedlentille.Encaissé = selectedlentille.Encaissé- selectdepaief.montant;
                                    selectedlentille.Reste = selectedlentille.Reste+ selectdepaief.montant;
                                    proxy.UpdateLentilleClient(selectedlentille);
                                    updatelentille = true;
                                    if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true && updatelentille == true)
                                    {
                                        ts.Complete();
                                    }


                                }
                                if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true)
                                {
                                    proxy.AjouterTransactionPaiementRefresh();
                                    proxy.AjouterDepenseRefresh();
                                    proxy.AjouterSoldeF1Refresh();
                                    proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                }
                            }
                            else

                            {
                                if (existelentille == false && existemonture == true)
                                {
                                    bool updatemonture = false;
                                    SVC.Monture selectedlentille = proxy.GetAllMonturebyDossier(Recouf.cleDossier).Last();
                                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                    {


                                        /*suprimez l'écriture de depaief*/
                                        proxy.DeleteDepeiment(selectdepaief);
                                        SupDepaif = true;
                                        //   MessageBoxResult result11 = Xceed.Wpf.Toolkit.MessageBox.Show("paiement succées", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                        /*  suprimez l'écriture de depanse*/
                                        proxy.DeleteDepense(depense);
                                        SupDepanse = true;
                                        //  MessageBoxResult result1g1 = Xceed.Wpf.Toolkit.MessageBox.Show("Deletedepense succées", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                        /*  update recouf c-a-d enlevez le montant */
                                        Recouf.reste = Recouf.reste + selectdepaief.montant;
                                        Recouf.versement = Recouf.versement - selectdepaief.montant;
                                        Recouf.soldé = false;

                                        proxy.UpdateF1(Recouf);
                                        UpdateRecouf = true;
                                        //   MessageBoxResult result1g1d = Xceed.Wpf.Toolkit.MessageBox.Show("Visite yes", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                        selectedlentille.Encaissé = selectedlentille.Encaissé- selectdepaief.montant;
                                        selectedlentille.Reste = selectedlentille.Reste+ selectdepaief.montant;
                                        proxy.UpdateMonture(selectedlentille);
                                        updatemonture = true;
                                        if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true && updatemonture == true)
                                        {
                                            ts.Complete();
                                        }


                                    }
                                    if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true)
                                    {
                                        proxy.AjouterTransactionPaiementRefresh();
                                        proxy.AjouterDepenseRefresh();
                                        proxy.AjouterSoldeF1Refresh();
                                        proxy.AjouterMontureRefresh(Clientvv.Id);
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (selectdepaief.Multiple == true)
                        {

                            bool SuppDepeiement = false;
                            bool SupDepense = false;
                            bool SupDepeiementMultiple = false;
                            bool UpdateVisite = false;
                            bool updatelentille = false;
                            bool updatemonture = false;
                            int interfacesupp = 0;
                            List<SVC.F1> listvisite = new List<SVC.F1>();
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Attention ! Vous allez supprimez un versement multiple qui va affecter d'autres enregistrements !veuillez confirmez votre choix", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.YesNo, MessageBoxImage.Question);
                            if (result == MessageBoxResult.Yes)
                            {
                                var depense = (proxy.GetAllDepense()).Find(n => n.cle == selectdepaief.cle && n.Crédit == true && n.MontantCrédit == selectdepaief.montant);
                                var depeiememultipl = (proxy.GetAllDepeiementMultiple()).Where(n => n.cleMultiple == selectdepaief.CleMultiple).ToList();
                              
                                foreach (SVC.DepeiementMultiple itemmultiple in depeiememultipl)
                                {
                                    SVC.F1 selectedvisite = proxy.GetAllF1Bycode(itemmultiple.CodeClient.Value).Find(n => n.cle == itemmultiple.cleVisite);

                                    if (!listvisite.Contains(selectedvisite))
                                    {
                                        listvisite.Add(selectedvisite);
                                    }
                                }
                                List<SVC.Monture> listmonture = new List<SVC.Monture>();
                                List<SVC.LentilleClient> listlentille = new List<SVC.LentilleClient>();

                                foreach (var item in listvisite)
                                {
                                    var existemonture = proxy.GetAllMonturebyDossier(item.cleDossier).Any();
                                    if (existemonture == true)
                                    {
                                        var monture = proxy.GetAllMonturebyDossier(item.cleDossier).First();
                                        listmonture.Add(monture);
                                    }
                                    var existelentille = proxy.GetAllLentilleClientbyDossier(item.cleDossier).Any();
                                    if (existelentille == true)
                                    {
                                        var lentille = proxy.GetAllLentilleClientbyDossier(item.cleDossier).First();
                                        listlentille.Add(lentille);
                                    }
                                }

                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {
                                   proxy.DeleteDepeiment(selectdepaief);
                                    SuppDepeiement = true;
                                    proxy.DeleteDepense(depense);
                                    SupDepense = true;
                                    for (int i = depeiememultipl.Count - 1; i >= 0; i--)/*deux critére 1er connécté plus le parcour de la liste*/
                                    {
                                        var itemvisite = depeiememultipl.ElementAt(i);
                                        SVC.F1 updatevisiteselected = listvisite.Find(n => n.cle == itemvisite.cleVisite);

                                      /*  UpdateVisite = false;
                                        updatevisiteselected.reste = updatevisiteselected.reste + itemvisite.montant;
                                        updatevisiteselected.versement = updatevisiteselected.versement - itemvisite.montant;
                                        if (updatevisiteselected.reste != 0)
                                        {
                                            updatevisiteselected.soldé = false;
                                        }
                                        proxy.UpdateF1(updatevisiteselected);
                                        UpdateVisite = true;
                                        SupDepeiementMultiple = false;
                                        proxy.DeleteDepeiementMultiple(itemvisite);
                                        SupDepeiementMultiple = true;*/
                                        bool existelentille = listlentille.Any(n=>n.Cle== updatevisiteselected.cleDossier);
                                        bool existemonture = listmonture.Any(n => n.Cle == updatevisiteselected.cleDossier);
                                        /****************************************/


                                        /*   proxy.DeleteDepeiment(selectdepaief);
                                              SuppDepeiement = true;
                                              proxy.DeleteDepense(depense);
                                              SupDepense = true;*/

                                        UpdateVisite = false;
                                    updatevisiteselected.reste = updatevisiteselected.reste + itemvisite.montant;
                                    updatevisiteselected.versement = updatevisiteselected.versement - itemvisite.montant;
                                    if (updatevisiteselected.reste != 0)
                                    {
                                        updatevisiteselected.soldé = false;
                                    }
                                    proxy.UpdateF1(updatevisiteselected);
                                    UpdateVisite = true;
                                    SupDepeiementMultiple = false;
                                    proxy.DeleteDepeiementMultiple(itemvisite);
                                    SupDepeiementMultiple = true;

                                        if (existelentille == true && existemonture == false)
                                        {

                                            updatelentille = false;
                                            SVC.LentilleClient selectedlentille = listlentille.Where(n => n.Cle == updatevisiteselected.cleDossier).Last();
                                            selectedlentille.Encaissé = selectedlentille.Encaissé - selectdepaief.montant;
                                            selectedlentille.Reste = selectedlentille.Reste + selectdepaief.montant;
                                            proxy.UpdateLentilleClient(selectedlentille);
                                            updatelentille = true;
                                            interfacesupp = 2;
                                        }
                                        else
                                        {
                                            if (existelentille == false && existemonture == true)
                                            {
                                                updatemonture = false;
                                                SVC.Monture selectedlentille = listmonture.Where(n => n.Cle == updatevisiteselected.cleDossier).Last();
                                                selectedlentille.Encaissé = selectedlentille.Encaissé - selectdepaief.montant;
                                                selectedlentille.Reste = selectedlentille.Reste + selectdepaief.montant;
                                                proxy.UpdateMonture(selectedlentille);
                                                updatemonture = true;
                                                interfacesupp = 1;
                                            }
                                        }
                                               

                                        
                                        /*    if (SupDepaif == true && SupDepanse == true && UpdateRecouf == true)
                                            {
                                                proxy.AjouterTransactionPaiementRefresh();
                                                proxy.AjouterDepenseRefresh();
                                                proxy.AjouterSoldeF1Refresh();
                                                proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                            }*/
                                     
                                        /*********************************/





                                        
                                    }
                                    if (SuppDepeiement == true && SupDepense == true && UpdateVisite == true && SupDepeiementMultiple == true && interfacesupp==0)
                                    {
                                        ts.Complete();

                                    }
                                    else
                                    {
                                        if (SuppDepeiement == true && SupDepense == true && UpdateVisite == true && SupDepeiementMultiple == true && interfacesupp == 1 && updatemonture==true) 
                                        {
                                            ts.Complete();
                                        }
                                        else
                                        {
                                            if (SuppDepeiement == true && SupDepense == true && UpdateVisite == true && SupDepeiementMultiple == true && interfacesupp == 2 && updatelentille == true)
                                            {
                                                ts.Complete();
                                            }
                                            else
                                            {
                                                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OpérationéchouéeTransaction, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                                            }
                                        }

                                    }

                                }
                                if (SuppDepeiement == true && SupDepense == true && UpdateVisite == true && SupDepeiementMultiple == true && interfacesupp==0)
                                {

                                    proxy.AjouterTransactionPaiementRefresh();
                                    proxy.AjouterDepenseRefresh();
                                    //proxy.AjouterSoldeF1Refresh();
                                    foreach (var item in listvisite)
                                    {
                                        proxy.AjouterSoldeF1MultipleRefresh(item.nfact,Convert.ToInt16(item.codeclient));
                                    }
                                    MessageBoxResult resultcdsf1 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                }
                                else
                                {
                                    if (SuppDepeiement == true && SupDepense == true && UpdateVisite == true && SupDepeiementMultiple == true && interfacesupp == 1 && updatemonture == true)
                                    {
                                        proxy.AjouterMontureRefreshClient(Clientvv.Id);
                                        proxy.AjouterTransactionPaiementRefresh();
                                        proxy.AjouterDepenseRefresh();
                                        //proxy.AjouterSoldeF1Refresh();
                                        foreach (var item in listvisite)
                                        {
                                            proxy.AjouterSoldeF1MultipleRefresh(item.nfact, Convert.ToInt16(item.codeclient));
                                        }
                                        MessageBoxResult resultcdsf1 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                    }
                                    else
                                    {
                                        if (SuppDepeiement == true && SupDepense == true && UpdateVisite == true && SupDepeiementMultiple == true && interfacesupp == 2 && updatelentille == true)
                                        {
                                         proxy.AjouterLentilleClientRefreshList(Clientvv.Id);
                                            proxy.AjouterTransactionPaiementRefresh();
                                            proxy.AjouterDepenseRefresh();
                                            // proxy.AjouterSoldeF1Refresh();
                                            foreach (var item in listvisite)
                                            {
                                                proxy.AjouterSoldeF1MultipleRefresh(item.nfact, Convert.ToInt16(item.codeclient));
                                            }
                                            MessageBoxResult resultcdsf1 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                        }

                                    }
                                }

                            }


                        }
                    }
                }



                else
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
            }
            catch (FaultException ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


            }
        }

        private void btnImprimerVersement_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.ImpressionRecouv == true && VersementPatientDataGrid.SelectedItem != null && HistoriqueDesDataGrid.SelectedItem != null)
                {
                    SVC.Depeiment selectdepeiemt = VersementPatientDataGrid.SelectedItem as SVC.Depeiment;
                    List<SVC.F1> vs = new List<SVC.F1>();
                    SVC.F1 VisiteAregler = HistoriqueDesDataGrid.SelectedItem as SVC.F1;
                    vs.Add(VisiteAregler);
                    List<SVC.Depeiment> dp = new List<SVC.Depeiment>();
                    dp.Add(selectdepeiemt);
                    ImpressionRecu cl = new ImpressionRecu(proxy, dp, vs);
                    cl.Show();
                }
                else
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez sélectionner un réglement", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
            }
            catch (Exception ex)
            {

                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void VersementPatientDataGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            try
            {
                SVC.Depeiment RowDataContaxt = e.Row.DataContext as SVC.Depeiment;
                if (RowDataContaxt != null)
                {
                    var converter = new System.Windows.Media.BrushConverter();

                    if (RowDataContaxt.Multiple == true)
                        e.Row.Background = (System.Windows.Media.Brush)converter.ConvertFromString("#FFFF008B");


                }
            }
            catch (Exception ex)
            {

                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txtRecherdfgcheVisite_TextChanged(object sender, TextChangedEventArgs e)
        {

        }



        private void txtRemise_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {
                case Key.NumPad0:
                case Key.NumPad1:
                case Key.NumPad2:
                case Key.NumPad3:
                case Key.NumPad4:
                case Key.NumPad5:
                case Key.NumPad6:
                case Key.NumPad7:
                case Key.NumPad8:
                case Key.NumPad9:
                case Key.D0:
                case Key.D1:
                case Key.D2:
                case Key.D3:
                case Key.D4:
                case Key.D5:
                case Key.D6:
                case Key.D7:
                case Key.D8:
                case Key.D9:
                case Key.Decimal:
                case Key.Tab:
                case Key.Subtract:
                    break;
                default:
                    e.Handled = true;
                    break;
            }
        }

        private void txteche_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {
                case Key.NumPad0:
                case Key.NumPad1:
                case Key.NumPad2:
                case Key.NumPad3:
                case Key.NumPad4:
                case Key.NumPad5:
                case Key.NumPad6:
                case Key.NumPad7:
                case Key.NumPad8:
                case Key.NumPad9:
                case Key.D0:
                case Key.D1:
                case Key.D2:
                case Key.D3:
                case Key.D4:
                case Key.D5:
                case Key.D6:
                case Key.D7:
                case Key.D8:
                case Key.D9:
                case Key.Tab:
                    break;
                default:
                    e.Handled = true;
                    break;
            }
        }

        private void txtDateOper_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void ReceptDatagrid_CurrentCellChanged(object sender, EventArgs e)
        {
            try
            {
                var test = ReceptDatagrid.ItemsSource as IEnumerable<SVC.Facture>;
                var testprodf = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;


                if (ReceptDatagrid.SelectedItem != null && testprodf.Count() > 0)
                {
                    SVC.Facture selectedrecept = ReceptDatagrid.SelectedItem as SVC.Facture;
                    //  SVC.Prodf objectmodifed = (testprodf.ToList()).Find(n => n.Id == selectedrecept.ficheproduit);

                    SVC.Prodf objectmodifed = selectedtropuvé;



                    NomenclatureProduit.SelectedItem = objectmodifed;

                }

                foreach (var item in test)
                {
                    item.Total = (item.privente * item.quantite) + (((item.privente * item.quantite) * item.tva) / 100);
                }
                if (documenttype == 2 || documenttype == 4)
                {
                    var ht = ((-test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = (-(test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = (-(test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            if (Convert.ToDecimal(txtRemise.Text) > 0)
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                            }
                            else
                            {
                                if (Convert.ToDecimal(txtRemise.Text) < 0)
                                {
                                    avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) + Convert.ToDecimal(txtRemise.Text);
                                    remise = -Convert.ToDecimal(txtRemise.Text);
                                    Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                            }
                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }
                    if (tunisie!=true)
                    {
                        if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                        {
                            var timbres = (avecremise * 1 / 100);
                            timbre = (avecremise * 1 / 100);
                            string strtimbre = string.Format("{0:0.00}", -timbres);
                            txtTimbre.Text = strtimbre;
                            /* timbre = (avecremise * 1 / 100);
                             txtTimbre.Text = Convert.ToString(-timbre);*/
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);

                        }
                    }
                    else
                    {
                        if (chFactureAvoir.IsChecked == true)
                        {
                            timbre = -Convert.ToDecimal(0.6);
                            txtTimbre.Text = Convert.ToString(-timbre);
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);
                        }
                    }
                    var Net = (-(avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;
                    Bénéficemont.Text = String.Format("{0:0.##}", (-Benf));
                }
                else
                {
                    var ht = ((test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = ((test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = ((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                            remise = Convert.ToDecimal(txtRemise.Text);
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }
                    if (tunisie != true)
                    {
                        if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && chFacture.IsChecked == true)
                        {
                            // timbre = (avecremise * 1 / 100);
                            //txtTimbre.Text = Convert.ToString(timbre);
                            var timbres = (avecremise * 1 / 100);
                            string strtimbre = string.Format("{0:0.00}", timbres);
                            txtTimbre.Text = strtimbre;
                            timbre = (avecremise * 1 / 100);
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);

                        }
                    }
                    else
                    {
                        if (chFacture.IsChecked == true)
                        {
                            timbre = Convert.ToDecimal(0.6);
                            txtTimbre.Text = Convert.ToString(timbre);
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);
                        }
                    }
                    var Net = ((avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;

                    Bénéficemont.Text = String.Format("{0:0.##}", Benf);
                }
                ReceptDatagrid.ItemsSource = test;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        void selectchanged()
        {
            try
            {
                var test = ReceptDatagrid.ItemsSource as IEnumerable<SVC.Facture>;
                var testprodf = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;

                if (ReceptDatagrid.SelectedItem != null && testprodf.Count() > 0)
                {
                    SVC.Facture selectedrecept = ReceptDatagrid.SelectedItem as SVC.Facture;
                    //   SVC.Prodf objectmodifed = (testprodf.ToList()).Find(n => n.Id == selectedrecept.ficheproduit);
                    SVC.Prodf objectmodifed = selectedtropuvé;

                    NomenclatureProduit.SelectedItem = objectmodifed;

                }

                foreach (var item in test)
                {
                    item.Total = (item.privente * item.quantite) + (((item.privente * item.quantite) * item.tva) / 100);
                }

                if (documenttype == 2 || documenttype == 4)
                {
                    var ht = ((-test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = (-(test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = (-(test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            if (Convert.ToDecimal(txtRemise.Text) > 0)
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                            }
                            else
                            {
                                if (Convert.ToDecimal(txtRemise.Text) < 0)
                                {
                                    avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) + Convert.ToDecimal(txtRemise.Text);
                                    remise = -Convert.ToDecimal(txtRemise.Text);
                                    Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                            }
                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }

                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                    {
                        var timbres = (avecremise * 1 / 100);
                        timbre = (avecremise * 1 / 100);
                        string strtimbre = string.Format("{0:0.00}", -timbres);
                        txtTimbre.Text = strtimbre;
                        /* timbre = (avecremise * 1 / 100);
                         txtTimbre.Text = Convert.ToString(-timbre);*/
                    }
                    else
                    {
                        timbre = 0;
                        txtTimbre.Text = Convert.ToString(timbre);

                    }
                    var Net = (-(avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;
                    Bénéficemont.Text = String.Format("{0:0.##}", (-Benf));
                }
                else
                {
                    var ht = ((test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = ((test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = ((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                            remise = Convert.ToDecimal(txtRemise.Text);
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }

                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && chFacture.IsChecked == true)
                    {
                        // timbre = (avecremise * 1 / 100);
                        //txtTimbre.Text = Convert.ToString(timbre);
                        var timbres = (avecremise * 1 / 100);
                        string strtimbre = string.Format("{0:0.00}", timbres);
                        txtTimbre.Text = strtimbre;
                        timbre = (avecremise * 1 / 100);
                    }
                    else
                    {
                        timbre = 0;
                        txtTimbre.Text = Convert.ToString(timbre);

                    }
                    var Net = ((avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;

                    Bénéficemont.Text = String.Format("{0:0.##}", Benf);
                }



                ReceptDatagrid.ItemsSource = test;

                //  }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ReceptDatagrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            try
            {
                var test = ReceptDatagrid.ItemsSource as IEnumerable<SVC.Facture>;
                var testprodf = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;

                if (ReceptDatagrid.SelectedItem != null && testprodf.Count() > 0)
                {
                    SVC.Facture selectedrecept = ReceptDatagrid.SelectedItem as SVC.Facture;
                    //   SVC.Prodf objectmodifed = (testprodf.ToList()).Find(n => n.Id == selectedrecept.ficheproduit);
                    SVC.Prodf objectmodifed = selectedtropuvé;

                    NomenclatureProduit.SelectedItem = objectmodifed;

                }

                foreach (var item in test)
                {
                    item.Total = (item.privente * item.quantite) + (((item.privente * item.quantite) * item.tva) / 100);
                }

                if (documenttype == 2 || documenttype == 4)
                {
                    var ht = ((-test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = (-(test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = (-(test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            if (Convert.ToDecimal(txtRemise.Text) > 0)
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                            }
                            else
                            {
                                if (Convert.ToDecimal(txtRemise.Text) < 0)
                                {
                                    avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) + Convert.ToDecimal(txtRemise.Text);
                                    remise = -Convert.ToDecimal(txtRemise.Text);
                                    Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                            }
                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }
                    if (tunisie!=true)
                    {
                        if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                        {
                            var timbres = (avecremise * 1 / 100);
                            timbre = (avecremise * 1 / 100);
                            string strtimbre = string.Format("{0:0.00}", -timbres);
                            txtTimbre.Text = strtimbre;
                            /* timbre = (avecremise * 1 / 100);
                             txtTimbre.Text = Convert.ToString(-timbre);*/
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);

                        }
                    }
                    else
                    {
                        if (chFactureAvoir.IsChecked == true)
                        {
                            timbre = -Convert.ToDecimal(0.6);
                            txtTimbre.Text = Convert.ToString(-timbre);
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);
                        }
                    }
                    var Net = (-(avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;
                    Bénéficemont.Text = String.Format("{0:0.##}", (-Benf));
                }
                else
                {
                    var ht = ((test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = ((test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = ((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                            remise = Convert.ToDecimal(txtRemise.Text);
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }
                    if (tunisie != true)
                    {
                        if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && chFacture.IsChecked == true)
                        {
                            // timbre = (avecremise * 1 / 100);
                            //txtTimbre.Text = Convert.ToString(timbre);
                            var timbres = (avecremise * 1 / 100);
                            string strtimbre = string.Format("{0:0.00}", timbres);
                            txtTimbre.Text = strtimbre;
                            timbre = (avecremise * 1 / 100);
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);

                        }
                    }
                    else
                    {
                        if (chFacture.IsChecked == true)
                        {
                            timbre = Convert.ToDecimal(0.6);
                            txtTimbre.Text = Convert.ToString(timbre);
                        }
                        else
                        {
                            timbre = 0;
                            txtTimbre.Text = Convert.ToString(timbre);
                        }
                    }
                    var Net = ((avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;

                    Bénéficemont.Text = String.Format("{0:0.##}", Benf);
                }



                ReceptDatagrid.ItemsSource = test;

                //  }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        void calculef1()
        {
            try
            {
                var test = ReceptDatagrid.ItemsSource as IEnumerable<SVC.Facture>;
                var testprodf = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;

                if (ReceptDatagrid.SelectedItem != null && testprodf.Count() > 0)
                {
                    SVC.Facture selectedrecept = ReceptDatagrid.SelectedItem as SVC.Facture;
                    //   SVC.Prodf objectmodifed = (testprodf.ToList()).Find(n => n.Id == selectedrecept.ficheproduit);
                    SVC.Prodf objectmodifed = selectedtropuvé;

                    NomenclatureProduit.SelectedItem = objectmodifed;

                }

                foreach (var item in test)
                {
                    item.Total = (item.privente * item.quantite) + (((item.privente * item.quantite) * item.tva) / 100);
                }

                if (documenttype == 2 || documenttype == 4)
                {
                    var ht = ((-test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = (-(test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = (-(test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            if (Convert.ToDecimal(txtRemise.Text) > 0)
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                            }
                            else
                            {
                                if (Convert.ToDecimal(txtRemise.Text) < 0)
                                {
                                    avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) + Convert.ToDecimal(txtRemise.Text);
                                    remise = -Convert.ToDecimal(txtRemise.Text);
                                    Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                            }
                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }

                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                    {
                        var timbres = (avecremise * 1 / 100);
                        timbre = (avecremise * 1 / 100);
                        string strtimbre = string.Format("{0:0.00}", -timbres);
                        txtTimbre.Text = strtimbre;
                        /* timbre = (avecremise * 1 / 100);
                         txtTimbre.Text = Convert.ToString(-timbre);*/
                    }
                    else
                    {
                        timbre = 0;
                        txtTimbre.Text = Convert.ToString(timbre);

                    }
                    var Net = (-(avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;
                    Bénéficemont.Text = String.Format("{0:0.##}", (-Benf));
                }
                else
                {
                    var ht = ((test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                    string strht = string.Format("{0:0.00}", ht);
                    txtht.Text = strht;
                    //////////////////////////////////
                    var tva = ((test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                    string strtva = string.Format("{0:0.00}", tva);
                    txttva.Text = strtva;
                    /////////////////////////////////
                    var ttc = ((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                    string strttc = string.Format("{0:0.00}", ttc);
                    txtTTC.Text = strttc;

                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                            remise = Convert.ToDecimal(txtRemise.Text);
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            remise = 0;
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                    }
                    else
                    {
                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }

                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && chFacture.IsChecked == true)
                    {
                        // timbre = (avecremise * 1 / 100);
                        //txtTimbre.Text = Convert.ToString(timbre);
                        var timbres = (avecremise * 1 / 100);
                        string strtimbre = string.Format("{0:0.00}", timbres);
                        txtTimbre.Text = strtimbre;
                        timbre = (avecremise * 1 / 100);
                    }
                    else
                    {
                        timbre = 0;
                        txtTimbre.Text = Convert.ToString(timbre);

                    }
                    var Net = ((avecremise + timbre));
                    string strNet = string.Format("{0:0.00}", Net);
                    txtNet.Text = strNet;

                    Bénéficemont.Text = String.Format("{0:0.##}", Benf);
                }



                ReceptDatagrid.ItemsSource = test;

                //  }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        private void ConfirmerDocument_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    if (fermer == true)
                    {
                        txtnVersement.IsEnabled = true;
                        FacturationDesign();
                        factureselectedl = new List<SVC.Facture>();
                        ReceptDatagrid.DataContext = factureselectedl;
                        ReceptDatagrid.ItemsSource = factureselectedl;
                        txtTTC.Text = "0";
                        txtnfact.IsEnabled = false;


                        if (documenttype == 3)
                        {
                            NomDocumentLabel.Content = "bon de livraison";
                            chBonLivraison.IsChecked = true;
                            txtnVersement.IsEnabled = true;
                            selectedparam = proxy.GetAllParamétre();

                            if (selectedparam.AffichPrixAchatVente == true)
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                            }
                            else
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                            }
                            if (selectedparam.ModiPrix == true)
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = false;
                            }
                            else
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = true;
                            }
                            if (selectedparam.modidate == true)
                            {
                                txtDateOper.IsEnabled = true;
                            }
                            if (selectedparam.affiben == true)
                            {
                                Bénéfice.Visibility = Visibility.Visible;
                                Bénéficemont.Visibility = Visibility.Visible;

                            }
                        }
                        else
                        {
                            if (documenttype == 4)
                            {
                                NomDocumentLabel.Content = "avoir bon de livraison";
                                chBonLivraisonAvoir.IsChecked = true;
                                txtnVersement.IsEnabled = true;
                                selectedparam = proxy.GetAllParamétre();

                                if (selectedparam.AffichPrixAchatVente == true)
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                }
                                if (selectedparam.ModiPrix == true)
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                }
                                else
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                }
                                if (selectedparam.modidate == true)
                                {
                                    txtDateOper.IsEnabled = true;
                                }
                                if (selectedparam.affiben == true)
                                {
                                    Bénéfice.Visibility = Visibility.Visible;
                                    Bénéficemont.Visibility = Visibility.Visible;

                                }
                            }
                            else
                            {
                                if (documenttype == 1)
                                {
                                    NomDocumentLabel.Content = "Nouvelle Facture";
                                    chFacture.IsChecked = true;
                                    txtnVersement.IsEnabled = true;
                                    selectedparam = proxy.GetAllParamétre();

                                    if (selectedparam.AffichPrixAchatVente == true)
                                    {
                                        NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                    }
                                    else
                                    {
                                        NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                    }
                                    if (selectedparam.ModiPrix == true)
                                    {
                                        ReceptDatagrid.Columns[2].IsReadOnly = false;
                                    }
                                    else
                                    {
                                        ReceptDatagrid.Columns[2].IsReadOnly = true;
                                    }
                                    if (selectedparam.modidate == true)
                                    {
                                        txtDateOper.IsEnabled = true;
                                    }
                                    if (selectedparam.affiben == true)
                                    {
                                        Bénéfice.Visibility = Visibility.Visible;
                                        Bénéficemont.Visibility = Visibility.Visible;
                                        //   Bénéficemont.Text = Convert.ToString(((comptoircalcu.listcomptoir).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((comptoircalcu.listcomptoir).AsEnumerable().Sum(o => o.previent * o.quantite)));

                                    }
                                }
                                else
                                {
                                    if (documenttype == 2)
                                    {
                                        NomDocumentLabel.Content = "Facture d'avoir";
                                        chFactureAvoir.IsChecked = true;
                                        txtnVersement.IsEnabled = true;
                                        selectedparam = proxy.GetAllParamétre();

                                        if (selectedparam.AffichPrixAchatVente == true)
                                        {
                                            NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                        }
                                        else
                                        {
                                            NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                        }
                                        if (selectedparam.ModiPrix == true)
                                        {
                                            ReceptDatagrid.Columns[2].IsReadOnly = false;
                                        }
                                        else
                                        {
                                            ReceptDatagrid.Columns[2].IsReadOnly = true;
                                        }
                                        if (selectedparam.modidate == true)
                                        {
                                            txtDateOper.IsEnabled = true;
                                        }
                                        if (selectedparam.affiben == true)
                                        {
                                            Bénéfice.Visibility = Visibility.Visible;
                                            Bénéficemont.Visibility = Visibility.Visible;

                                        }
                                    }
                                    else
                                    {
                                        if (documenttype == 6)
                                        {
                                            NomDocumentLabel.Content = "Facture provisoir";
                                            chFactureProvisoir.IsChecked = true;
                                            txtnVersement.IsEnabled = true;



                                            ReceptDatagrid.Columns[2].IsReadOnly = false;


                                            txtDateOper.IsEnabled = true;


                                        }
                                        else
                                        {
                                            if (documenttype == 5)
                                            {
                                                NomDocumentLabel.Content = "Nouvelle Proforma";
                                                chProforma.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                ReceptDatagrid.Columns[2].IsReadOnly = false;


                                                txtDateOper.IsEnabled = true;
                                            }
                                        }

                                    }
                                }
                            }
                        }



                        CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                        nouveauF1 = new SVC.F1
                        {
                            codeclient = Clientvv.Id,
                            date = DateTime.Now,
                            dates = DateTime.Now,
                            raison = Clientvv.Raison,
                            timbre = 0,
                            echeance = 0,
                            ht = 0,
                            net = 0,
                            oper = memberuser.Username,
                            tva = 0,
                            versement = 0,
                            reste = 0,
                            modep = "A TERME",
                            remise = 0,

                        };
                        WindowBorderFacture.DataContext = nouveauF1;
                        dialog1.Close();
                    }
                    else
                    {
                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez choisir un document de vente", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ListeDesDocuments_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (ListeDesDocuments.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {

                    selectedF1 = ListeDesDocuments.SelectedItem as SVC.F1;
                    if (selectedF1.nfact != "Ancien solde")
                    {
                        ancienneF1 = ListeDesDocuments.SelectedItem as SVC.F1;
                        factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                        anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                        FacturationDesign();
                        bool existemonture = proxy.GetAllMonturebyDossier(selectedF1.cleDossier).Any();
                        bool existelentille = proxy.GetAllLentilleClientbyDossier(selectedF1.cleDossier).Any();
                        if (existemonture == true && existelentille == false)
                        {
                            if(selectedF1.versement!=0)
                            {
                                ReceptDatagrid.IsEnabled = false;
                            }
                            else
                            {
                                ReceptDatagrid.IsEnabled = true;
                            }
                            
                        }
                        else
                        {
                            if (existemonture == false && existelentille == true)
                            {
                                if (selectedF1.versement != 0)
                                {
                                    ReceptDatagrid.IsEnabled = false;
                                }
                                else
                                {
                                    ReceptDatagrid.IsEnabled = true;
                                }
                            }
                            else
                            {
                                ReceptDatagrid.IsEnabled = true;
                            }
                        }
                        if (factureselectedl != null)
                        {
                            ReceptDatagrid.ItemsSource = factureselectedl;
                            ReceptDatagrid.DataContext = factureselectedl;
                            CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                            WindowBorderFacture.DataContext = selectedF1;
                            var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                            string strTTC = string.Format("{0:0.00}", TTC);
                            txtTTC.Text = strTTC;

                        }
                        facturenew = false;
                        facturemodif = true;
                        string nfact = selectedF1.nfact.Substring(0, 1);

                        switch (nfact)
                        {
                            case "F":
                                chFacture.IsChecked = true;
                                txtnVersement.IsEnabled = false;
                                NomDocumentLabel.Content = "modifier Facture";
                                ReceptDatagrid.CanUserDeleteRows = false;
                                selectedparam = proxy.GetAllParamétre();
                                documenttype = 1;
                                if (selectedparam.AffichPrixAchatVente == true)
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                }
                                if (selectedparam.ModiPrix == true)
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                }
                                else
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                }
                                if (selectedparam.modidate == true)
                                {
                                    txtDateOper.IsEnabled = true;
                                }
                                if (selectedparam.affiben == true)
                                {
                                    Bénéfice.Visibility = Visibility.Visible;
                                    Bénéficemont.Visibility = Visibility.Visible;

                                }
                                break;
                            case "A":
                                chFactureAvoir.IsChecked = true;
                                txtnVersement.IsEnabled = false;
                                NomDocumentLabel.Content = "Facture d'avoir";
                                ReceptDatagrid.CanUserDeleteRows = false;
                                selectedparam = proxy.GetAllParamétre();
                                documenttype = 2;
                                if (selectedparam.AffichPrixAchatVente == true)
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                }
                                if (selectedparam.ModiPrix == true)
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                }
                                else
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                }
                                if (selectedparam.modidate == true)
                                {
                                    txtDateOper.IsEnabled = true;
                                }
                                if (selectedparam.affiben == true)
                                {
                                    Bénéfice.Visibility = Visibility.Visible;
                                    Bénéficemont.Visibility = Visibility.Visible;

                                }
                                break;
                            case "B":
                                chBonLivraison.IsChecked = true;
                                txtnVersement.IsEnabled = false;
                                NomDocumentLabel.Content = "bon de livraison";
                                ReceptDatagrid.CanUserDeleteRows = false;
                                selectedparam = proxy.GetAllParamétre();
                                documenttype = 3;
                                if (selectedparam.AffichPrixAchatVente == true)
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                }
                                if (selectedparam.ModiPrix == true)
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                }
                                else
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                }
                                if (selectedparam.modidate == true)
                                {
                                    txtDateOper.IsEnabled = true;
                                }
                                if (selectedparam.affiben == true)
                                {
                                    Bénéfice.Visibility = Visibility.Visible;
                                    Bénéficemont.Visibility = Visibility.Visible;

                                }
                                break;
                            case "C":
                                chBonLivraisonAvoir.IsChecked = true;
                                txtnVersement.IsEnabled = false;
                                NomDocumentLabel.Content = "avoir bon de livraison";
                                ReceptDatagrid.CanUserDeleteRows = false;
                                selectedparam = proxy.GetAllParamétre();
                                documenttype = 4;
                                if (selectedparam.AffichPrixAchatVente == true)
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                }
                                if (selectedparam.ModiPrix == true)
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                }
                                else
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                }
                                if (selectedparam.modidate == true)
                                {
                                    txtDateOper.IsEnabled = true;
                                }
                                if (selectedparam.affiben == true)
                                {
                                    Bénéfice.Visibility = Visibility.Visible;
                                    Bénéficemont.Visibility = Visibility.Visible;

                                }

                                break;
                            case "P":
                                chProforma.IsChecked = true;
                                txtnVersement.IsEnabled = false;
                                NomDocumentLabel.Content = "modifier Proforma";
                                ReceptDatagrid.CanUserDeleteRows = true;
                                documenttype = 5;

                                ReceptDatagrid.Columns[2].IsReadOnly = false;

                                txtDateOper.IsEnabled = true;



                                break;
                            case "R":
                                chFactureProvisoir.IsChecked = true;
                                txtnVersement.IsEnabled = false;
                                NomDocumentLabel.Content = "Facture provisoir";
                                ReceptDatagrid.CanUserDeleteRows = true;

                                ReceptDatagrid.Columns[2].IsReadOnly = false;

                                txtDateOper.IsEnabled = true;
                                documenttype = 6;
                                break;
                        }
                    }
                }
                else
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        void FacturationDesign()
        {
            Grid.SetColumnSpan(RéglemdfentGfsdfsrid, 1);
            Grid.SetRowSpan(ListeDesDocuments, 3);
            WindowBorderFacture.Visibility = Visibility.Visible;
            gridspl.Visibility = Visibility.Visible;
            NomenclatureDatagrid.Visibility = Visibility.Visible;
            girdspi1.Visibility = Visibility.Visible;
            WindowBorderFacture.IsEnabled = true;
            NomenclatureProduit.ItemsSource = (proxy.GetAllProdf().OrderBy(n => n.design));
            factureopern = true;
            FamilleCombo.ItemsSource = proxy.GetAllFamilleProduit().OrderBy(x => x.FamilleProduit1);
        }
        void NonFacturationDesign()
        {
            Grid.SetColumnSpan(RéglemdfentGfsdfsrid, 2);
            Grid.SetRowSpan(ListeDesDocuments, 8);
            WindowBorderFacture.Visibility = Visibility.Collapsed;
            gridspl.Visibility = Visibility.Collapsed;
            NomenclatureDatagrid.Visibility = Visibility.Collapsed;
            girdspi1.Visibility = Visibility.Collapsed;
            factureselectedl = new List<SVC.Facture>();
            //  ReceptDatagrid.DataContext = factureselectedl;
            //  ReceptDatagrid.ItemsSource = factureselectedl;
            nouveauF1 = new SVC.F1();
            //RéglementGfsdfsrid.DataContext = nouveauF1;

            fermer = false;
            documenttype = 0;
        }

        private void btnNouvelleFacture_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                dialog1 = new DXDialog("Veuillez choisir un document", DialogButtons.YesNo, true);
                dialog1.Template = Resources["template3"] as ControlTemplate;

                // dialog1.Content = Resources["content"];
                dialog1.ResizeMode = ResizeMode.NoResize;
                dialog1.Width = 350;
                dialog1.Height = 250;
                dialog1.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                dialog1.ShowDialog();
                interfacefacturation = 0;
                facturenew = true;
                facturemodif = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }


        }

        private void btnModifierFacture_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ListeDesDocuments.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    selectedF1 = ListeDesDocuments.SelectedItem as SVC.F1;
                    if(selectedF1.nfact!= "Ancien solde")
                    { 
                    ancienneF1 = ListeDesDocuments.SelectedItem as SVC.F1;
                    factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                    anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                    FacturationDesign();
                    bool existemonture = proxy.GetAllMonturebyDossier(selectedF1.cleDossier).Any();
                    bool existelentille = proxy.GetAllLentilleClientbyDossier(selectedF1.cleDossier).Any();
                        if (existemonture == true && existelentille == false)
                        {
                            if (selectedF1.versement != 0)
                            {
                                ReceptDatagrid.IsEnabled = false;
                            }
                            else
                            {
                                ReceptDatagrid.IsEnabled = true;
                            }

                        }
                        else
                        {
                            if (existemonture == false && existelentille == true)
                            {
                                if (selectedF1.versement != 0)
                                {
                                    ReceptDatagrid.IsEnabled = false;
                                }
                                else
                                {
                                    ReceptDatagrid.IsEnabled = true;
                                }
                            }
                            else
                            {
                                ReceptDatagrid.IsEnabled = true;
                            }
                        }
                        if (factureselectedl != null)
                    {
                        ReceptDatagrid.ItemsSource = factureselectedl;
                        ReceptDatagrid.DataContext = factureselectedl;
                        CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                        WindowBorderFacture.DataContext = selectedF1;
                        var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                        string strTTC = string.Format("{0:0.00}", TTC);
                        txtTTC.Text = strTTC;

                    }
                    facturenew = false;
                    facturemodif = true;
                    string nfact = selectedF1.nfact.Substring(0, 1);

                    switch (nfact)
                    {
                        case "F":
                            chFacture.IsChecked = true;
                            txtnVersement.IsEnabled = false;
                            NomDocumentLabel.Content = "modifier Facture";
                            ReceptDatagrid.CanUserDeleteRows = false;
                            selectedparam = proxy.GetAllParamétre();
                            documenttype = 1;
                            if (selectedparam.AffichPrixAchatVente == true)
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                            }
                            else
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                            }
                            if (selectedparam.ModiPrix == true)
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = false;
                            }
                            else
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = true;
                            }
                            if (selectedparam.modidate == true)
                            {
                                txtDateOper.IsEnabled = true;
                            }
                            if (selectedparam.affiben == true)
                            {
                                Bénéfice.Visibility = Visibility.Visible;
                                Bénéficemont.Visibility = Visibility.Visible;

                            }
                            break;
                        case "A":
                            chFactureAvoir.IsChecked = true;
                            txtnVersement.IsEnabled = false;
                            NomDocumentLabel.Content = "Facture d'avoir";
                            ReceptDatagrid.CanUserDeleteRows = false;
                            selectedparam = proxy.GetAllParamétre();
                            documenttype = 2;
                            if (selectedparam.AffichPrixAchatVente == true)
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                            }
                            else
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                            }
                            if (selectedparam.ModiPrix == true)
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = false;
                            }
                            else
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = true;
                            }
                            if (selectedparam.modidate == true)
                            {
                                txtDateOper.IsEnabled = true;
                            }
                            if (selectedparam.affiben == true)
                            {
                                Bénéfice.Visibility = Visibility.Visible;
                                Bénéficemont.Visibility = Visibility.Visible;

                            }
                            break;
                        case "B":
                            chBonLivraison.IsChecked = true;
                            txtnVersement.IsEnabled = false;
                            NomDocumentLabel.Content = "bon de livraison";
                            ReceptDatagrid.CanUserDeleteRows = false;
                            selectedparam = proxy.GetAllParamétre();
                            documenttype = 3;
                            if (selectedparam.AffichPrixAchatVente == true)
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                            }
                            else
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                            }
                            if (selectedparam.ModiPrix == true)
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = false;
                            }
                            else
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = true;
                            }
                            if (selectedparam.modidate == true)
                            {
                                txtDateOper.IsEnabled = true;
                            }
                            if (selectedparam.affiben == true)
                            {
                                Bénéfice.Visibility = Visibility.Visible;
                                Bénéficemont.Visibility = Visibility.Visible;

                            }
                            break;
                        case "C":
                            chBonLivraisonAvoir.IsChecked = true;
                            txtnVersement.IsEnabled = false;
                            NomDocumentLabel.Content = "avoir bon de livraison";
                            ReceptDatagrid.CanUserDeleteRows = false;
                            selectedparam = proxy.GetAllParamétre();
                            documenttype = 4;
                            if (selectedparam.AffichPrixAchatVente == true)
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                            }
                            else
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                            }
                            if (selectedparam.ModiPrix == true)
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = false;
                            }
                            else
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = true;
                            }
                            if (selectedparam.modidate == true)
                            {
                                txtDateOper.IsEnabled = true;
                            }
                            if (selectedparam.affiben == true)
                            {
                                Bénéfice.Visibility = Visibility.Visible;
                                Bénéficemont.Visibility = Visibility.Visible;

                            }

                            break;
                        case "P":
                            chProforma.IsChecked = true;
                            txtnVersement.IsEnabled = false;
                            NomDocumentLabel.Content = "modifier Proforma";
                            ReceptDatagrid.CanUserDeleteRows = true;
                            documenttype = 5;

                            ReceptDatagrid.Columns[2].IsReadOnly = false;

                            txtDateOper.IsEnabled = true;



                            break;
                        case "R":
                            chFactureProvisoir.IsChecked = true;
                            txtnVersement.IsEnabled = false;
                            NomDocumentLabel.Content = "Facture provisoir";
                            ReceptDatagrid.CanUserDeleteRows = true;

                            ReceptDatagrid.Columns[2].IsReadOnly = false;

                            txtDateOper.IsEnabled = true;
                            documenttype = 6;
                            break;
                    }
                }
                }
                else
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnImprimmerFacture_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ListeDesDocuments.SelectedItem != null)
                {
                    dialog1 = new DXDialog("Impression", DialogButtons.YesNo, true);
                    dialog1.Template = Resources["template7"] as ControlTemplate;

                    // dialog1.Content = Resources["content"];
                    dialog1.ResizeMode = ResizeMode.NoResize;
                    dialog1.Width = 350;
                    dialog1.Height = 150;
                    dialog1.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    dialog1.ShowDialog();
                    interfaceimpressionfacture = 0;
                    visualiserFacture = false;
                }
               /* if (ListeDesDocuments.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                {
                    SVC.F1 SelectedClient = ListeDesDocuments.SelectedItem as SVC.F1;
                    List<SVC.F1> facturelist = new List<SVC.F1>();
                    facturelist.Add(SelectedClient);
                    ImpressionFacture cl = new ImpressionFacture(proxy, facturelist, Clientvv);
                    cl.Show();
                }
                else
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }*/
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        bool remplir()
        {
            if (txtDateOper.SelectedDate != null)
            {





                return true;
            }
            else
            {
                return false;
            }
        }
        private void NomenclatureProduit_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (chcout.IsChecked == false)
                {
                    if (NomenclatureProduit.SelectedItem != null && CompteComboBox.SelectedIndex >= 0 && remplir() && factureopern == true)
                    {
                        //    this.Title = title;
                        //  this.WindowTitleBrush = brushajouterfacture;

                        selectedtropuvé = NomenclatureProduit.SelectedItem as SVC.Prodf;
                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = selectedtropuvé.privente,
                                        quantite = 0,
                                        Total = selectedtropuvé.privente * 0,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,

                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {


                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est déja dans la facture", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);






                                    }
                                    ReceptDatagrid.ItemsSource = factureselectedl;
                                    CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();

                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = selectedtropuvé.privente,
                                    quantite = 0,
                                    Total = selectedtropuvé.privente * 0,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                    /*****************************************/

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est déja dans la facture", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                }
                                ReceptDatagrid.ItemsSource = factureselectedl;
                                CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();

                            }
                        }



                        else
                        {
                            if (selectedtropuvé.quantite == 0 && chBonLivraisonAvoir.IsChecked == true)
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = selectedtropuvé.privente,
                                    quantite = 0,
                                    Total = selectedtropuvé.privente * -1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {
                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est déja dans la facture", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                }
                                ReceptDatagrid.ItemsSource = factureselectedl;
                                CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();


                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                            }
                        }

                    }
                }
                else
                {
                    if (chcout.IsChecked == true)
                    {

                        if (NomenclatureProduit.SelectedItem != null && CompteComboBox.SelectedIndex >= 0)
                        {
                            var selectedtropuvé1 = NomenclatureProduit.SelectedItem as SVC.Prodf;
                            selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(selectedtropuvé1.cp)).Where(n => n.quantite != 0).First();
                            if (selectedtropuvé.quantite > 0)
                            {
                                if (selectedtropuvé.perempt != null)
                                {
                                    if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé1.previent,
                                            privente = selectedtropuvé1.privente,
                                            quantite = 0,
                                            Total = selectedtropuvé1.privente * 0,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {


                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {


                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est déja dans la facture", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);






                                        }
                                        ReceptDatagrid.ItemsSource = factureselectedl;
                                        CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();

                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                    }
                                }
                                else
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé1.previent,
                                        privente = selectedtropuvé1.privente,
                                        quantite = 0,
                                        Total = selectedtropuvé1.privente * 0,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,


                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {

                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {

                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est déja dans la facture", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                    }
                                    ReceptDatagrid.ItemsSource = factureselectedl;
                                    CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();

                                }
                            }
                            else
                            {
                                if (selectedtropuvé.quantite == 0 && chBonLivraisonAvoir.IsChecked == true)
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé1.previent,
                                        privente = selectedtropuvé1.privente,
                                        quantite = 0,
                                        Total = selectedtropuvé1.privente * -1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,

                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {
                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {

                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est déja dans la facture", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                    }
                                    ReceptDatagrid.ItemsSource = factureselectedl;
                                    CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                }
                            }

                        }
                    }
                    else
                    {
                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez choisir un tarif", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                    }
                }


            }
            catch (Exception EX)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(EX.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void FournisseurCombo_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ICollectionView cv00 = CollectionViewSource.GetDefaultView(NomenclatureProduit.ItemsSource);

                cv00.Filter = delegate (object item)
                {
                    SVC.Prodf temp = item as SVC.Prodf;
                    return temp.IdFamille != -1;


                };

                FamilleCombo.SelectedIndex = -1;

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void FamilleCombo_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (FamilleCombo.SelectedItem != null)
                {
                    SVC.FamilleProduit t = FamilleCombo.SelectedItem as SVC.FamilleProduit;

                    var filter = (t.Id).ToString();

                    ICollectionView cv = CollectionViewSource.GetDefaultView(NomenclatureProduit.ItemsSource);
                    if (filter == "")
                        cv.Filter = null;
                    else
                    {
                        cv.Filter = o =>
                        {
                            SVC.Prodf p = o as SVC.Prodf;
                            if (t.Id.ToString() == "txtId")
                                return ((p.IdFamille).ToString() == filter);
                            return (p.IdFamille.ToString().ToUpper().Contains(filter.ToUpper()));
                        };

                    }

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void txtRecherche_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox t = (TextBox)sender;
                string filter = t.Text;
                ICollectionView cv = CollectionViewSource.GetDefaultView(NomenclatureProduit.ItemsSource);
                if (filter == "")
                    cv.Filter = null;
                else
                {
                    cv.Filter = o =>
                    {
                        SVC.Prodf p = o as SVC.Prodf;
                        if (t.Name == "txtId")
                            return (p.Id == Convert.ToInt32(filter));
                        return (p.design.ToUpper().Contains(filter.ToUpper()));
                    };
                }
                /*  string filterValue = txtRecherche.Text;
                  if (!String.IsNullOrEmpty(filterValue))
                      NomenclatureProduit.Columns[1].AutoFilterValue = filterValue;
                  else NomenclatureProduit.FilterString = "([Id]  >= 0)";*/
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void CompteComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void CompteComboBox_DropDownClosed(object sender, EventArgs e)
        {
            try
            {

                string ValueCompte = "";
                if (CompteComboBox.SelectedIndex >= 0)
                {

                    var test = NomenclatureProduit.ItemsSource as IEnumerable;



                    ValueCompte = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                    switch (ValueCompte)
                    {
                        case "Prixa":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixa;
                            }

                            break;
                        case "Prixb":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixb;
                            }
                            break;

                        case "Prixc":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixc;
                            }
                            break;

                        default:


                            break;
                    }


                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chstockdisponible_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                ICollectionView cv00 = CollectionViewSource.GetDefaultView(NomenclatureProduit.ItemsSource);
                if (chstockdisponible.IsChecked == true && chcout.IsChecked == false)
                {
                    //  ICollectionView cv = CollectionViewSource.GetDefaultView(PatientDataGrid.ItemsSource);
                    cv00.Filter = delegate (object item)
                    {
                        SVC.Prodf temp = item as SVC.Prodf;
                        return temp.quantite > 0;


                    };
                    string ValueCompte = "";
                    if (CompteComboBox.SelectedIndex >= 0)
                    {

                        var test = NomenclatureProduit.ItemsSource as IEnumerable;



                        ValueCompte = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                        switch (ValueCompte)
                        {
                            case "Prixa":
                                foreach (SVC.Prodf item in test)
                                {
                                    item.privente = item.prixa;
                                }

                                break;
                            case "Prixb":
                                foreach (SVC.Prodf item in test)
                                {
                                    item.privente = item.prixb;
                                }
                                break;

                            case "Prixc":
                                foreach (SVC.Prodf item in test)
                                {
                                    item.privente = item.prixc;
                                }
                                break;

                            default:


                                break;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chstockdisponible_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {
                ICollectionView cv00 = CollectionViewSource.GetDefaultView(NomenclatureProduit.ItemsSource);
                if (chstockdisponible.IsChecked == false && chcout.IsChecked == false)
                {
                    cv00.Filter = delegate (object item)
                    {
                        SVC.Prodf temp = item as SVC.Prodf;
                        return temp.quantite >= 0 || temp.quantite <= 0;


                    };
                    string ValueCompte = "";
                    if (CompteComboBox.SelectedIndex >= 0)
                    {

                        var test = NomenclatureProduit.ItemsSource as IEnumerable;



                        ValueCompte = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                        switch (ValueCompte)
                        {
                            case "Prixa":
                                foreach (SVC.Prodf item in test)
                                {
                                    item.privente = item.prixa;
                                }

                                break;
                            case "Prixb":
                                foreach (SVC.Prodf item in test)
                                {
                                    item.privente = item.prixb;
                                }
                                break;

                            case "Prixc":
                                foreach (SVC.Prodf item in test)
                                {
                                    item.privente = item.prixc;
                                }
                                break;

                            default:


                                break;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }

        }

        private void CONFIRMERVENTE_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                /*************************************ajout d'un nouveau document de vente***************/
                if (facturenew == true && facturemodif == false && memberuser.CreationDossierClient == true)
                {
                    string document = "";
                    if (documenttype == 1)
                    {
                        document = "F";
                    }
                    else
                    {
                        if (documenttype == 2)
                        {
                            document = "A";
                        }
                        else
                        {
                            if (documenttype == 3)
                            {
                                document = "B";
                            }
                            else
                            {
                                if (documenttype == 4)
                                {
                                    document = "C";
                                }
                                else
                                {

                                    if (documenttype == 5)
                                    {
                                        document = "P";
                                    }
                                    else
                                    {
                                        if (documenttype == 6)
                                        {
                                            document = "R";

                                        }
                                    }

                                }
                            }
                        }
                    }

                    if (Clientvv.Id != 0)
                    {

                        if (txtRemise.Text != "")
                        {
                            if (Convert.ToDecimal(txtRemise.Text) != 0)
                            {
                                nouveauF1.remise = Convert.ToDecimal(txtRemise.Text);
                            }
                            else
                            {
                                nouveauF1.remise = 0;
                            }

                        }
                        else
                        {
                            nouveauF1.remise = 0;
                        }



                        /************************************************/

                        if (documenttype == 2 || documenttype == 4)
                        {
                            decimal timbre = 0;
                            decimal remise = 0;
                            decimal avecremise = 0;
                            if (txtRemise.Text != "")
                            {
                                if (Convert.ToDecimal(txtRemise.Text) != 0)
                                {
                                    avecremise = (-Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text));
                                    remise = Convert.ToDecimal(txtRemise.Text);
                                }
                                else
                                {
                                    avecremise = (-Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))));
                                    remise = 0;
                                }
                            }
                            else
                            {
                                avecremise = (-Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))));
                            }
                            if (tunisie != true)
                            {
                                if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                                {
                                    nouveauF1.timbre = (avecremise * 1 / 100);
                                    timbre = (avecremise * 1 / 100);
                                }
                                else
                                {
                                    nouveauF1.timbre = 0;
                                    timbre = 0;

                                }
                            }
                            else
                            {
                                if (chFactureAvoir.IsChecked == true)
                                {
                                    nouveauF1.timbre = -Convert.ToDecimal(0.6);
                                    timbre = -timbre;
                                }
                                else
                                {
                                    nouveauF1.timbre = 0;
                                    timbre = 0;
                                }
                            }
                            nouveauF1.net = (avecremise + timbre);
                            if (txtnVersement.Text != "")
                            {
                                if (Convert.ToDecimal(txtnVersement.Text) != 0)
                                {
                                    nouveauF1.versement = Convert.ToDecimal(txtnVersement.Text);
                                    nouveauF1.reste = nouveauF1.net - nouveauF1.versement;

                                }
                                else
                                {
                                    nouveauF1.versement = 0;
                                    nouveauF1.reste = nouveauF1.net - nouveauF1.versement;

                                }

                            }
                            else
                            {
                                nouveauF1.versement = 0;
                                nouveauF1.reste = nouveauF1.net - nouveauF1.versement;

                            }

                            nouveauF1.tva = -(factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite));
                            nouveauF1.ht = -(factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.quantite))));
                            if (nouveauF1.reste != 0)
                            {
                                nouveauF1.soldé = false;
                            }
                            else
                            {
                                nouveauF1.soldé = true;

                            }
                        }
                        else
                        {
                            decimal timbre = 0;
                            decimal remise = 0;
                            decimal avecremise = 0;
                            if (txtRemise.Text != "")
                            {
                                if (Convert.ToDecimal(txtRemise.Text) != 0)
                                {
                                    avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                    remise = Convert.ToDecimal(txtRemise.Text);
                                }
                                else
                                {
                                    avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                    remise = 0;
                                }
                            }
                            else
                            {
                                avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            }
                            if (tunisie != true)
                            {
                                if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true))
                                {
                                    nouveauF1.timbre = (avecremise * 1 / 100);
                                    timbre = (avecremise * 1 / 100);
                                }
                                else
                                {
                                    nouveauF1.timbre = 0;
                                    timbre = 0;

                                }
                            }
                            else
                            {
                                if (chFacture.IsChecked == true)
                                {
                                    nouveauF1.timbre = Convert.ToDecimal(0.6); ;
                                    timbre = Convert.ToDecimal(0.6);
                                }
                                else
                                {
                                    nouveauF1.timbre = 0;
                                    timbre = 0;
                                }
                            }
                            nouveauF1.net = avecremise + timbre;
                            if (txtnVersement.Text != "")
                            {
                                if (Convert.ToDecimal(txtnVersement.Text) != 0)
                                {
                                    nouveauF1.versement = Convert.ToDecimal(txtnVersement.Text);
                                    nouveauF1.reste = nouveauF1.net - nouveauF1.versement;

                                }
                                else
                                {
                                    nouveauF1.versement = 0;
                                    nouveauF1.reste = nouveauF1.net - nouveauF1.versement;

                                }

                            }
                            else
                            {
                                nouveauF1.versement = 0;
                                nouveauF1.reste = nouveauF1.net - nouveauF1.versement;

                            }

                            nouveauF1.tva = (factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite));
                            nouveauF1.ht = (factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.quantite))));
                            if (nouveauF1.reste != 0)
                            {
                                nouveauF1.soldé = false;
                            }
                            else
                            {
                                nouveauF1.soldé = true;

                            }
                        }
                        if (nouveauF1.echeance != 0)
                        {
                            nouveauF1.datecheance = nouveauF1.date.Value.AddDays(Convert.ToDouble(nouveauF1.echeance));
                        }
                        nouveauF1.cle = Clientvv.Id + Clientvv.Raison + nouveauF1.net + DateTime.Now.TimeOfDay;
                        nouveauF1.heure = DateTime.Now.TimeOfDay;
                        /*****************************************************/

                        var remisepourfacture = nouveauF1.remise;
                        bool Operfacture = false;

                        List<int> listrefresh = new List<int>();

                        foreach (SVC.Facture newfacture in factureselectedl)
                        {
                            newfacture.cle = nouveauF1.cle;
                            newfacture.codeclient = nouveauF1.codeclient;
                            if (remisepourfacture != 0)
                            {
                                if (remisepourfacture >= ((newfacture.privente) * (newfacture.quantite)) - ((newfacture.previent) * (newfacture.quantite)))
                                {
                                    newfacture.remise = ((newfacture.privente) * (newfacture.quantite)) - ((newfacture.previent) * (newfacture.quantite));
                                    remisepourfacture = remisepourfacture - ((newfacture.privente) * (newfacture.quantite)) - ((newfacture.previent) * (newfacture.quantite));
                                }
                                else
                                {
                                    newfacture.remise = remisepourfacture;
                                }

                            }
                            else
                            {
                                newfacture.remise = 0;
                            }
                            if (newfacture.codeprod != 0)
                            {
                                listrefresh.Add(Convert.ToInt16(newfacture.ficheproduit));
                            }
                        }
                        

                        if (nouveauF1.versement != 0)
                        {


                            SVC.Depeiment PAIEMENT = new SVC.Depeiment
                            {
                                date = nouveauF1.date,
                                montant = Convert.ToDecimal(nouveauF1.versement),
                                paiem = "ESPECES" + " Vente :" + nouveauF1.nfact + " " + " date :" + nouveauF1.date,
                                oper = memberuser.Username,
                                dates = nouveauF1.dates,
                                banque = "Caisse",
                                nfact = nouveauF1.nfact,
                                amontant = Convert.ToDecimal(nouveauF1.net),
                                cle = nouveauF1.cle,
                                cp = nouveauF1.Id,
                                Multiple = false,
                                CodeClient = nouveauF1.codeclient,
                                RaisonClient = nouveauF1.raison,

                            };
                            SVC.Depense CAISSE = new SVC.Depense
                            {
                                cle = nouveauF1.cle,
                                Auto = true,
                                Commentaires = "ESPECES" + " Vente :" + nouveauF1.nfact + " " + " date :" + nouveauF1.date,
                                CompteDébité = "Caisse",
                                Crédit = true,
                                DateDebit = nouveauF1.date,
                                DateSaisie = nouveauF1.dates,
                                Débit = false,
                                ModePaiement = "ESPECES",
                                Montant = 0,
                                MontantCrédit = nouveauF1.versement,
                                NumCheque = Convert.ToString(nouveauF1.Id),
                                Num_Facture = nouveauF1.nfact,
                                RubriqueComptable = "ESPECES document de vente: " + nouveauF1.raison + " " + nouveauF1.nfact,
                                Username = memberuser.Username,

                            };
                            bool ii = false;
                            bool depense = false;
                            bool depaiement = false;
                            List<SVC.Facture> listsanszero = new List<SVC.Facture>();
                            foreach (var item in factureselectedl)
                            {
                                if (item.quantite != 0)
                                {
                                    item.cle = nouveauF1.cle;
                                    listsanszero.Add(item);
                                }
                            }
                            if (interfacefacturation == 0)
                            {
                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {
                                    ii = proxy.InsertFacture(nouveauF1, listsanszero, document);
                                    Operfacture = true;
                                    if (documenttype != 6 && documenttype != 5)
                                    {
                                        proxy.InsertDepeiment(PAIEMENT);
                                        depaiement = true;
                                        proxy.InsertDepense(CAISSE);
                                        depense = true;
                                    }
                                    else
                                    {

                                        if (documenttype == 5 || documenttype == 6)
                                        {
                                            depense = true;
                                            depaiement = true;
                                        }

                                    }

                                    if (Operfacture == true && ii == true && depaiement == true && depense == true)
                                    {
                                        ts.Complete();
                                        facturemodif = true;
                                        facturenew = false;

                                    }
                                }
                                if (Operfacture == true && ii == true && depaiement == true && depense == true)
                                {

                                    proxy.AjouterProdflistRefresh(listrefresh);
                                    proxy.AjouterSoldeF1Refresh();
                                   // proxy.AjouterDepenseRefresh();
                                    NonFacturationDesign();
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                }
                            }
                            else
                            {
                                /**************monture *****************************/
                                if (interfacefacturation == 1)
                                {
                                    bool modifmonture = false;
                                    bool bonfacture = false;
                                    var existeversement = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).Any();
                                    SVC.Depeiment depaiementclass = new SVC.Depeiment(); ;
                                    SVC.Depense depenseclass= new SVC.Depense();

                                    if (existeversement==true)
                                    {
                                        depaiementclass = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).First();
                                        depenseclass = proxy.GetAllDepenseByF1(nouveauF1.cleDossier).First();
                                    }

                                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                    {
                                        ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                        Operfacture = true;
                                        if(existeversement==false)
                                        {
                                            if (documenttype == 1 || documenttype == 3)
                                            {
                                                depaiement =false;
                                            proxy.InsertDepeiment(PAIEMENT);
                                            depaiement = true;
                                            depense = false;
                                            proxy.InsertDepense(CAISSE);
                                            depense = true;
                                           
                                                modifmonture = false;
                                                MontureClass.Encaissé = nouveauF1.versement;
                                                MontureClass.Reste = MontureClass.MontantTotal - nouveauF1.versement;
                                                MontureClass.StatutVente = true;
                                                proxy.UpdateMonture(MontureClass);
                                                modifmonture = true;
                                                bonfacture = true;
                                            }
                                            else
                                            {
                                                depaiement = true;
                                                modifmonture = true;
                                                depense = true;
                                            }
                                        }
                                        else
                                        {
                                            if (nouveauF1.versement!=0)
                                            {
                                                if (documenttype == 1 || documenttype == 3)
                                                {
                                                    depaiement = false;
                                                    depaiementclass.montant = nouveauF1.versement;
                                                    depaiementclass.cle = nouveauF1.cle;
                                                    proxy.UpdateDepeiment(depaiementclass);
                                                    depaiement = true;
                                                    depense = false;
                                                    depenseclass.MontantCrédit = nouveauF1.versement;
                                                    depenseclass.cle = nouveauF1.cle;
                                                    proxy.UpdateDepense(depenseclass);
                                                    depense = true;
                                                    modifmonture = false;
                                                    MontureClass.Encaissé = nouveauF1.versement;
                                                    MontureClass.Reste = MontureClass.MontantTotal - nouveauF1.versement;
                                                    MontureClass.StatutVente = true;
                                                    proxy.UpdateMonture(MontureClass);
                                                    modifmonture = true;
                                                    bonfacture = true;
                                                }
                                                else
                                                {
                                                    modifmonture = true;
                                                    depaiement = true;
                                                    depense = true;
                                                }
                                            }
                                            else
                                            {
                                                if (documenttype == 1 || documenttype == 3)
                                                {
                                                    depaiement = false;
                                                    proxy.DeleteDepeiment(depaiementclass);

                                                    depaiement = true;
                                                    depense = false;
                                                    proxy.DeleteDepense(depenseclass);
                                                    depense = true;
                                                    modifmonture = false;
                                                    MontureClass.Encaissé = nouveauF1.versement;
                                                    MontureClass.Reste = MontureClass.MontantTotal - nouveauF1.versement;
                                                    MontureClass.StatutVente = true;
                                                    proxy.UpdateMonture(MontureClass);
                                                    modifmonture = true;
                                                    bonfacture = true;
                                                }
                                                else
                                                {
                                                    modifmonture = true;
                                                    depaiement = true;
                                                    depense = true;

                                                }
                                            }

                                        }
                                        

                                        if (Operfacture == true && ii == true && depaiement == true && depense == true && modifmonture == true)
                                        {
                                            ts.Complete();
                                            facturemodif = false;
                                            facturenew = false;

                                        }
                                    }
                                    if (Operfacture == true && ii == true && depaiement == true && depense == true && modifmonture == true)
                                    {

                                        proxy.AjouterProdflistRefresh(listrefresh);
                                        proxy.AjouterSoldeF1Refresh();
                                        if (bonfacture == true)
                                        {
                                            proxy.AjouterMontureRefresh(Clientvv.Id);
                                        }
                                      //  proxy.AjouterDepenseRefresh();
                                        GridMonture.IsEnabled = false;
                                        GridMonture.DataContext = null;
                                        montureversementzero = false;
                                        NonFacturationDesign();
                                        MessageBoxResult resd2ult = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                    }
                                }
                                else
                                {
                                    /****************lentille****************************/
                                    if (interfacefacturation == 2)
                                    {
                                        bool modiflentille = false;
                                        bool bonfacture = false;
                                        var existeversement = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).Any();
                                        SVC.Depeiment depaiementclass = new SVC.Depeiment(); ;
                                        SVC.Depense depenseclass = new SVC.Depense();

                                        if (existeversement == true)
                                        {
                                            depaiementclass = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).First();
                                            depenseclass = proxy.GetAllDepenseByF1(nouveauF1.cleDossier).First();
                                        }

                                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                        {
                                            ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                            Operfacture = true;
                                            if (existeversement == false)
                                            {
                                                if (documenttype == 1 || documenttype == 3)
                                                {
                                                    depaiement = false;
                                                proxy.InsertDepeiment(PAIEMENT);
                                                depaiement = true;
                                                depense = false;
                                                proxy.InsertDepense(CAISSE);
                                                depense = true;
                                              
                                                    modiflentille =false;
                                                    LentilleClass.Encaissé = nouveauF1.versement;
                                                    LentilleClass.Reste = LentilleClass.MontantTotal - nouveauF1.versement;
                                                    LentilleClass.StatutVente = true;

                                                    proxy.UpdateLentilleClient(LentilleClass);
                                                    modiflentille = true;
                                                    bonfacture = true;
                                                }
                                                else
                                                {
                                                    modiflentille = true;
                                                    depense = true;
                                                    depaiement = true;
                                                }
                                            }
                                            else
                                            {
                                               /* depaiement = true;
                                                depense = true;
                                                LentilleClass.StatutVente = true;
                                                proxy.UpdateLentilleClient(LentilleClass);
                                                modiflentille = true;*/
                                                
                                                if (nouveauF1.versement != 0)
                                                {
                                                    if (documenttype == 1 || documenttype == 3)
                                                    {
                                                        depaiement = false;
                                                        depaiementclass.montant = nouveauF1.versement;
                                                        depaiementclass.cle = nouveauF1.cle;
                                                        proxy.UpdateDepeiment(depaiementclass);
                                                        depaiement = true;
                                                        depense = false;
                                                        depenseclass.MontantCrédit = nouveauF1.versement;
                                                        depenseclass.cle = nouveauF1.cle;
                                                        proxy.UpdateDepense(depenseclass);
                                                        depense = true;
                                                        modiflentille = false;
                                                        LentilleClass.Encaissé = nouveauF1.versement;
                                                        LentilleClass.Reste = LentilleClass.MontantTotal - nouveauF1.versement;
                                                        LentilleClass.StatutVente = true;

                                                        proxy.UpdateLentilleClient(LentilleClass);
                                                        modiflentille = true;
                                                        bonfacture = true;
                                                    }
                                                    else
                                                    {
                                                        modiflentille = true; depense = true; depaiement = true;
                                                    }
                                                }
                                                else
                                                {
                                                    if (documenttype == 1 || documenttype == 3)
                                                    {
                                                        depaiement = false;
                                                        proxy.DeleteDepeiment(depaiementclass);

                                                        depaiement = true;
                                                        depense = false;
                                                        proxy.DeleteDepense(depenseclass);
                                                        depense = true;
                                                        modiflentille = false;
                                                        LentilleClass.Encaissé = nouveauF1.versement;
                                                        LentilleClass.Reste = LentilleClass.MontantTotal - nouveauF1.versement;
                                                        LentilleClass.StatutVente = true;

                                                        proxy.UpdateLentilleClient(LentilleClass);
                                                        modiflentille = true;
                                                        bonfacture = true;
                                                    }
                                                    else
                                                    {
                                                        modiflentille = true; depense = true; depaiement = true;

                                                    }
                                                }
                                            }
                                            if (Operfacture == true && ii == true && depaiement == true && depense == true && modiflentille == true)
                                            {
                                                ts.Complete();
                                                facturemodif = false;
                                                facturenew = false;

                                            }
                                        }
                                        if (Operfacture == true && ii == true && depaiement == true && depense == true && modiflentille == true)
                                        {

                                            proxy.AjouterProdflistRefresh(listrefresh);
                                            proxy.AjouterSoldeF1Refresh();
                                            if (bonfacture == true)
                                            {
                                                proxy.AjouterLentilleClientRefresh(Clientvv.Id);

                                            }
                                            // proxy.AjouterDepenseRefresh();
                                            GridLentille.IsEnabled = false;
                                            GridLentille.DataContext = null;
                                            LentilleClass = null;
                                            Lentilleversementzero = false;

                                            NonFacturationDesign();
                                            MessageBoxResult resFult = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                        }
                                    }
                                }
                            }
                        }
                        /********************versment ==0)********/
                        else
                        {

                            bool ii = false;
                            List<SVC.Facture> listsanszero = new List<SVC.Facture>();
                            foreach (var item in factureselectedl)
                            {
                                if (item.quantite != 0)
                                {
                                    item.cle = nouveauF1.cle;
                                    listsanszero.Add(item);
                                }
                            }
                            /***********Monture dossier*********************/
                            if (interfacefacturation == 1)
                            {
                                bool modifmonture = false;
                                bool depaiement = false;
                                bool depense = false;
                                bool facturebon = false;
                                var existeversement = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).Any();
                                SVC.Depeiment depaiementclass = new SVC.Depeiment(); ;
                                SVC.Depense depenseclass = new SVC.Depense();

                                if (existeversement == true)
                                {
                                    depaiementclass = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).First();
                                    depenseclass = proxy.GetAllDepenseByF1(nouveauF1.cleDossier).First();
                                }
                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {
                                  
                                    ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                    Operfacture = true;
                                    if (existeversement == true)
                                    {
                                        if (documenttype == 1 || documenttype == 3)
                                        {
                                            depaiement = false;
                                            proxy.DeleteDepeiment(depaiementclass);

                                            depaiement = true;
                                            depense = false;
                                            proxy.DeleteDepense(depenseclass);
                                            depense = true;
                                            modifmonture = false;
                                            MontureClass.Encaissé = nouveauF1.versement;
                                            MontureClass.Reste = MontureClass.MontantTotal - nouveauF1.versement;
                                            MontureClass.StatutVente = true;
                                            proxy.UpdateMonture(MontureClass);
                                            modifmonture = true;
                                            facturebon =true;
                                        }
                                        else
                                        {
                                            modifmonture = true; depense = true; depaiement = true;
                                        }
                                        if (Operfacture == true && ii == true && depaiement == true && depense == true && modifmonture == true)
                                        {
                                            ts.Complete();
                                            facturemodif = false;
                                            facturenew = false;

                                        }

                                    }
                                    else
                                    {
                                       // ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                        //Operfacture = true;
                                        if (documenttype == 1 || documenttype == 3)
                                        {
                                            MontureClass.Encaissé = nouveauF1.versement;
                                            MontureClass.Reste = MontureClass.MontantTotal - nouveauF1.versement;
                                            MontureClass.StatutVente = true;
                                            proxy.UpdateMonture(MontureClass);
                                            modifmonture = true;
                                            facturebon =true;
                                        }
                                        else
                                        {
                                            modifmonture = true;
                                        }

                                        if (Operfacture == true && ii == true && modifmonture == true)
                                        {
                                            ts.Complete();
                                            facturemodif = false;
                                            facturenew = false;

                                        }
                                    }


                                   
                                }
                                if (Operfacture == true && ii == true && depaiement == true && depense == true && modifmonture == true && existeversement == true)
                                {

                                    proxy.AjouterProdflistRefresh(listrefresh);
                                    proxy.AjouterSoldeF1Refresh();
                                    if (facturebon== true)
                                    {
                                        proxy.AjouterMontureRefresh(Clientvv.Id);
                                    }//    proxy.AjouterDepenseRefresh();
                                    GridMonture.IsEnabled = false;
                                    GridMonture.DataContext = null;
                                    montureversementzero = false;
                                    NonFacturationDesign();
                                    MessageBoxResult resd2ult = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);



                                }
                                else
                                {
                                    if (Operfacture == true && ii == true && modifmonture == true && existeversement ==false)
                                    {
                                        proxy.AjouterProdflistRefresh(listrefresh);
                                        proxy.AjouterSoldeF1Refresh();
                                        if (facturebon == true)
                                        {
                                            proxy.AjouterMontureRefresh(Clientvv.Id);
                                        }
                                        GridMonture.IsEnabled = false;
                                        GridMonture.DataContext = null;
                                        MontureClass = null;
                                        montureversementzero = false;

                                        NonFacturationDesign();
                                        MessageBoxResult resDFult = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                    }
                                }
                            }
                            else
                            {
                                if (interfacefacturation == 0)
                                {
                                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                    {
                                        ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                        Operfacture = true;


                                        if (Operfacture == true && ii == true)
                                        {
                                            ts.Complete();
                                            facturemodif = true;
                                            facturenew = false;

                                        }
                                    }
                                    if (Operfacture == true && ii == true)
                                    {

                                        proxy.AjouterProdflistRefresh(listrefresh);
                                        proxy.AjouterSoldeF1Refresh();

                                        NonFacturationDesign();
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);


                                    }
                                }
                                else
                                {
                                    if (interfacefacturation == 2)
                                    {
                                        bool modiflentille = false;
                                        bool depaiement = false;
                                        bool depense = false;
                                        bool facturebon = true;
                                        var existeversement = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).Any();
                                        SVC.Depeiment depaiementclass = new SVC.Depeiment(); ;
                                        SVC.Depense depenseclass = new SVC.Depense();
                                      //  MessageBoxResult resFult = Xceed.Wpf.Toolkit.MessageBox.Show(existeversement.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                        if (existeversement == true)
                                        {

                                            depaiementclass = proxy.GetAllDepeimentByF1(nouveauF1.cleDossier).First();
                                            depenseclass = proxy.GetAllDepenseByF1(nouveauF1.cleDossier).First();
                                        }


                                        if (existeversement == true)
                                        {
                                            using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                            {
                                                ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                                Operfacture = true;
                                                if (documenttype == 1 || documenttype == 3)
                                                {
                                                    depaiement = false;
                                                    proxy.DeleteDepeiment(depaiementclass);

                                                    depaiement = true;
                                                    depense = false;
                                                    proxy.DeleteDepense(depenseclass);
                                                    depense = true;
                                                    modiflentille = false;
                                                    LentilleClass.Encaissé = nouveauF1.versement;
                                                    LentilleClass.Reste = LentilleClass.MontantTotal - nouveauF1.versement;
                                                    LentilleClass.StatutVente = true;

                                                    proxy.UpdateLentilleClient(LentilleClass);
                                                    modiflentille = true;
                                                    facturebon = true;
                                                }
                                                else
                                                {
                                                    modiflentille = true; depense = true; depaiement = true;
                                                }
                                                if (Operfacture == true && ii == true && depaiement == true && depense == true && modiflentille == true)
                                                {
                                                    ts.Complete();
                                                    facturemodif = false;
                                                    facturenew = false;

                                                }
                                                
                                            }
                                            if (Operfacture == true && ii == true && depaiement == true && depense == true && modiflentille == true)
                                                {

                                                    proxy.AjouterProdflistRefresh(listrefresh);
                                                    proxy.AjouterSoldeF1Refresh();
                                                if (facturebon==true)
                                                {
                                                    proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                                }
                                                //  proxy.AjouterDepenseRefresh();
                                                GridLentille.IsEnabled = false;
                                                    GridLentille.DataContext = null;
                                                    LentilleClass = null;
                                                    Lentilleversementzero = false;

                                                    NonFacturationDesign();
                                                    MessageBoxResult sresFult = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                                }
                                          
                                        }
                                        else
                                        {
                                     
                                            using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                            {
                                                ii = proxy.InsertFacture(nouveauF1, listsanszero, document);

                                                Operfacture = true;
                                                if (documenttype == 1 || documenttype == 3)
                                                {
                                                    LentilleClass.Encaissé = nouveauF1.versement;
                                                    LentilleClass.Reste = LentilleClass.MontantTotal - nouveauF1.versement;
                                                    LentilleClass.StatutVente = true;
                                                    proxy.UpdateLentilleClient(LentilleClass);
                                                    modiflentille = true;
                                                    facturebon = true;
                                                }
                                                else
                                                {
                                                    modiflentille = true;
                                                }

                                                if (Operfacture == true && ii == true && modiflentille == true)
                                                {
                                                    ts.Complete();
                                                    facturemodif = false;
                                                    facturenew = false;

                                                }
                                            }
                                            if (Operfacture == true && ii == true && modiflentille == true)
                                            {

                                                proxy.AjouterProdflistRefresh(listrefresh);
                                                proxy.AjouterSoldeF1Refresh();
                                                if (facturebon==true)
                                                {
                                                    proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                                }
                                                GridLentille.IsEnabled = false;
                                                GridLentille.DataContext = null;
                                                LentilleClass = null;
                                                Lentilleversementzero = false;

                                                NonFacturationDesign();
                                                MessageBoxResult resDFult = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);


                                            }
                                        }
                                            
                                        }
                                       
                                    }
                                   
                            }
                        }






                    }
                    else
                    {
                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez choisir un autre client", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                    }
                }
                else
                {
                    /******************************************** modification facture*********************************/
                    if (facturenew == false && facturemodif == true && memberuser.ModificationDossierClient == true)
                    {

                        /************************La partie F1***********************/
                        String document = "";
                        if (documenttype == 1)
                        {
                            document = "F";
                        }
                        else
                        {
                            if (documenttype == 2)
                            {
                                document = "A";
                            }
                            else
                            {
                                if (documenttype == 3)
                                {
                                    document = "B";
                                }
                                else
                                {
                                    if (documenttype == 4)
                                    {
                                        document = "C";
                                    }
                                    else
                                    {
                                        if (documenttype == 5)
                                        {
                                            document = "P";
                                        }
                                        else
                                        {
                                            if (documenttype == 6)
                                            {
                                                document = "R";

                                            }
                                        }

                                    }
                                }
                            }
                        }

                        if (Clientvv.Id != 0)
                        {



                            if (txtRemise.Text != "")
                            {
                                if (Convert.ToDecimal(txtRemise.Text) != 0)
                                {
                                    if (ancienneF1.remise != Convert.ToDecimal(txtRemise.Text))
                                    {
                                        selectedF1.remise = Convert.ToDecimal(txtRemise.Text);
                                    }
                                }
                                else
                                {
                                    selectedF1.remise = 0;
                                }

                            }
                            else
                            {
                                selectedF1.remise = 0;
                            }



                            /************************************************/

                            if (documenttype == 2 || documenttype == 4)
                            {
                                decimal timbre = 0;
                                decimal remise = 0;
                                decimal avecremise = 0;
                                if (txtRemise.Text != "")
                                {
                                    if (Convert.ToDecimal(txtRemise.Text) != 0)
                                    {
                                        avecremise = (-Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text));
                                        remise = Convert.ToDecimal(txtRemise.Text);
                                    }
                                    else
                                    {
                                        avecremise = (-Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))));
                                        remise = 0;
                                    }
                                }
                                else
                                {
                                    avecremise = (-Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))));
                                }
                                if (tunisie != true)
                                {
                                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                                    {
                                        selectedF1.timbre = (avecremise * 1 / 100);
                                        timbre = (avecremise * 1 / 100);
                                    }
                                    else
                                    {
                                        selectedF1.timbre = 0;
                                        timbre = 0;

                                    }
                                }
                                else
                                {
                                    if (chFactureAvoir.IsChecked == true)
                                    {
                                        selectedF1.timbre = -Convert.ToDecimal(0.6); ;
                                        timbre = -timbre;
                                    }
                                    else
                                    {
                                        selectedF1.timbre = 0;
                                        timbre = 0;
                                    }
                                }
                                selectedF1.net = (avecremise + timbre);
                                selectedF1.reste = selectedF1.net - selectedF1.versement;



                                selectedF1.tva = -(factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite));
                                selectedF1.ht = -(factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.quantite))));
                                if (selectedF1.reste != 0)
                                {
                                    selectedF1.soldé = false;
                                }
                                else
                                {
                                    selectedF1.soldé = true;

                                }
                            }
                            else
                            {
                                decimal timbre = 0;
                                decimal remise = 0;
                                decimal avecremise = 0;
                                if (txtRemise.Text != "")
                                {
                                    if (Convert.ToDecimal(txtRemise.Text) != 0)
                                    {
                                        avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                        remise = Convert.ToDecimal(txtRemise.Text);
                                    }
                                    else
                                    {
                                        avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                        remise = 0;
                                    }
                                }
                                else
                                {
                                    avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                }

                                if (tunisie != true)
                                {
                                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true))
                                    {
                                        selectedF1.timbre = (avecremise * 1 / 100);
                                        timbre = (avecremise * 1 / 100);
                                    }
                                    else
                                    {
                                        selectedF1.timbre = 0;
                                        timbre = 0;

                                    }
                                }
                                else
                                {
                                    if (chFacture.IsChecked == true)
                                    {
                                        selectedF1.timbre = Convert.ToDecimal(0.6); 
                                        timbre = Convert.ToDecimal(0.6);
                                    }
                                    else
                                    {
                                        selectedF1.timbre = 0;
                                        timbre = 0;
                                    }
                                }
                                selectedF1.net = avecremise + timbre;
                                selectedF1.reste = selectedF1.net - selectedF1.versement;



                                selectedF1.tva = (factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite));
                                selectedF1.ht = (factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.quantite))));
                                if (selectedF1.reste != 0)
                                {
                                    selectedF1.soldé = false;
                                }
                                else
                                {
                                    selectedF1.soldé = true;

                                }
                            }
                            if (selectedF1.echeance != 0)
                            {
                                if (selectedF1.echeance != ancienneF1.echeance)
                                {
                                    selectedF1.datecheance = selectedF1.date.Value.AddDays(Convert.ToDouble(selectedF1.echeance));
                                }
                            }

                            /***************************************************/

                            List<int> listrefresh = new List<int>();
                            List<SVC.Facture> NouvelleFacture = new List<SVC.Facture>();
                            List<SVC.Facture> AncienneFacture = new List<SVC.Facture>();
                            var remisepourfacture = selectedF1.remise;

                            bool Operfacture = false;


                            foreach (SVC.Facture newfacture in factureselectedl)
                            {

                                var found = (anciennefactureselectedl).Any(itemf => itemf.ficheproduit == newfacture.ficheproduit);
                                if (found == false)
                                {
                                    if (newfacture.quantite != 0)
                                    {
                                        newfacture.cle = selectedF1.cle;
                                        newfacture.nfact = selectedF1.nfact;


                                        NouvelleFacture.Add(newfacture);
                                    }
                                    if(newfacture.codeprod!=0)
                                    {
                                        listrefresh.Add(Convert.ToInt16(newfacture.ficheproduit));
                                    }
                                   
                                }
                                else
                                {
                                    if (remisepourfacture != 0)
                                    {
                                        if (remisepourfacture >= ((newfacture.privente) * (newfacture.quantite)) - ((newfacture.previent) * (newfacture.quantite)))
                                        {
                                            newfacture.remise = ((newfacture.privente) * (newfacture.quantite)) - ((newfacture.previent) * (newfacture.quantite));
                                            remisepourfacture = remisepourfacture - ((newfacture.privente) * (newfacture.quantite)) - ((newfacture.previent) * (newfacture.quantite));
                                        }
                                        else
                                        {
                                            newfacture.remise = remisepourfacture;
                                        }

                                    }
                                    else
                                    {
                                        newfacture.remise = 0;
                                    }
                                    AncienneFacture.Add(newfacture);
                                    if (newfacture.codeprod!=0)
                                    {
                                        listrefresh.Add(Convert.ToInt16(newfacture.ficheproduit));
                                    }
                                }
                            }
                            bool ExisteMonture = false;
                            ExisteMonture = proxy.GetAllMonturebyDossier(Convert.ToString(selectedF1.cleDossier)).Any();
                            bool existelentille = false;
                            existelentille = proxy.GetAllLentilleClientbyDossier(Convert.ToString(selectedF1.cleDossier)).Any();

                            if (!(selectedF1.ht == 0 && selectedF1.versement != 0) && ExisteMonture == false && existelentille == false)
                            {


                                bool ii = false;
                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {
                                    ii = proxy.UpdateFacture(selectedF1, NouvelleFacture, AncienneFacture, document);

                                    Operfacture = true;



                                    if (Operfacture == true && ii == true)
                                    {
                                        ts.Complete();
                                        facturemodif = true;
                                        facturenew = false;

                                    }
                                }
                                if (Operfacture == true && ii == true)
                                {

                                    proxy.AjouterProdflistRefresh(listrefresh);
                                    proxy.AjouterFactureVenteRefresh(selectedF1.cle);
                                    proxy.AjouterSoldeF1Refresh();

                                    NonFacturationDesign();
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                    /*******************************************************/
                                    //  selectedF1 = ListeDesDocuments.SelectedItem as SVC.F1;
                                    /*     ancienneF1 = proxy.GetAllF1ByVisiteOper(selectedF1.nfact).First();
                                         factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                         anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact); 
                                         /************************************************************************/
                                    /*    ReceptDatagrid.ItemsSource = factureselectedl;
                                      ReceptDatagrid.DataContext = factureselectedl;
                                      CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                                      RéglementGfsdfsrid.DataContext = selectedF1;
                                      var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                                      string strTTC = string.Format("{0:0.00}", TTC);
                                      txtTTC.Text = strTTC;*/
                                }
                                else
                                {

                                    if (anciennefactureselectedl != null)
                                    {

                                        /***************************************************/
                                        ancienneF1 = proxy.GetAllF1ByVisiteOper(selectedF1.nfact).First();
                                        factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                        anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                        /************************************************************************/
                                        ReceptDatagrid.ItemsSource = factureselectedl;
                                        ReceptDatagrid.DataContext = factureselectedl;
                                        CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                                        WindowBorderFacture.DataContext = selectedF1;
                                        var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                                        string strTTC = string.Format("{0:0.00}", TTC);
                                        txtTTC.Text = strTTC;
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.Opérationéchouée, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }
                                }
                            }
                            else
                            {
                                if ((selectedF1.ht == 0 && selectedF1.versement == 0) && ExisteMonture == true && existelentille == false)
                                {
                                    bool ii = false;
                                    bool updatemonture = false;
                                    SVC.Monture monture1 = proxy.GetAllMonturebyDossier(Convert.ToString(selectedF1.cleDossier)).Last();

                                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                    {
                                        ii = proxy.UpdateFacture(selectedF1, NouvelleFacture, AncienneFacture, document);

                                        Operfacture = true;

                                        monture1.StatutDevis = true;
                                        monture1.StatutVente = false;
                                        proxy.UpdateMonture(monture1);
                                        updatemonture = true;

                                        if (Operfacture == true && ii == true && updatemonture == true)
                                        {
                                            ts.Complete();
                                            facturemodif = true;
                                            facturenew = false;

                                        }
                                    }
                                    if (Operfacture == true && ii == true && updatemonture == true)
                                    {

                                        proxy.AjouterProdflistRefresh(listrefresh);
                                        proxy.AjouterFactureVenteRefresh(selectedF1.cle);
                                        proxy.AjouterSoldeF1Refresh();
                                        NonFacturationDesign();
                                        proxy.AjouterTransactionPaiementRefresh();
                                        proxy.AjouterDepenseRefresh();
                                        proxy.AjouterMontureRefresh(Clientvv.Id);
                                        GridMonture.IsEnabled = false;
                                        GridMonture.DataContext = null;
                                        montureversementzero = false;
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                    }
                                    else
                                    {

                                        if (anciennefactureselectedl != null)
                                        {

                                            /***************************************************/
                                            ancienneF1 = proxy.GetAllF1ByVisiteOper(selectedF1.nfact).First();
                                            factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                            anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                            /************************************************************************/
                                            ReceptDatagrid.ItemsSource = factureselectedl;
                                            ReceptDatagrid.DataContext = factureselectedl;
                                            CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                                            WindowBorderFacture.DataContext = selectedF1;
                                            var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                                            string strTTC = string.Format("{0:0.00}", TTC);
                                            txtTTC.Text = strTTC;
                                            NonFacturationDesign();
                                            proxy.AjouterTransactionPaiementRefresh();
                                            proxy.AjouterDepenseRefresh();
                                            proxy.AjouterMontureRefresh(Clientvv.Id);
                                            GridMonture.IsEnabled = false;
                                            GridMonture.DataContext = null;
                                            montureversementzero = false;
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.Opérationéchouée, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                }
                                else
                                {
                                    if ((selectedF1.ht == 0 && selectedF1.versement == 0) && ExisteMonture == false && existelentille == true)
                                    {
                                        bool ii = false;
                                        bool updatemonture = false;
                                        SVC.LentilleClient monture1 = proxy.GetAllLentilleClientbyDossier(Convert.ToString(selectedF1.cleDossier)).Last();

                                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                        {
                                            ii = proxy.UpdateFacture(selectedF1, NouvelleFacture, AncienneFacture, document);

                                            Operfacture = true;

                                            monture1.StatutDevis = true;
                                            monture1.StatutVente = false;
                                            proxy.UpdateLentilleClient(monture1);
                                            updatemonture = true;

                                            if (Operfacture == true && ii == true && updatemonture == true)
                                            {
                                                ts.Complete();
                                                facturemodif = true;
                                                facturenew = false;

                                            }
                                        }
                                        if (Operfacture == true && ii == true && updatemonture == true)
                                        {


                                            proxy.AjouterProdflistRefresh(listrefresh);
                                            proxy.AjouterFactureVenteRefresh(selectedF1.cle);
                                            proxy.AjouterSoldeF1Refresh();
                                            NonFacturationDesign();
                                            proxy.AjouterTransactionPaiementRefresh();
                                            proxy.AjouterDepenseRefresh();
                                            proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                            GridLentille.IsEnabled = false;
                                            GridLentille.DataContext = null;
                                            LentilleClass = null;
                                            Lentilleversementzero = false;
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                        }
                                        else
                                        {

                                            if (anciennefactureselectedl != null)
                                            {

                                                /***************************************************/
                                                ancienneF1 = proxy.GetAllF1ByVisiteOper(selectedF1.nfact).First();
                                                factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                                anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                                /************************************************************************/
                                                ReceptDatagrid.ItemsSource = factureselectedl;
                                                ReceptDatagrid.DataContext = factureselectedl;
                                                CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                                                WindowBorderFacture.DataContext = selectedF1;
                                                var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                                                string strTTC = string.Format("{0:0.00}", TTC);
                                                txtTTC.Text = strTTC;
                                                NonFacturationDesign();
                                                proxy.AjouterTransactionPaiementRefresh();
                                                proxy.AjouterDepenseRefresh();
                                                proxy.AjouterMontureRefresh(Clientvv.Id);
                                                GridMonture.IsEnabled = false;
                                                GridMonture.DataContext = null;
                                                montureversementzero = false;
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.Opérationéchouée, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.Opérationéchouée, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                    }
                                }

                            }
                        }
                    }



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void annulerVENTE_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                NonFacturationDesign();
                ListeDesDocuments.ItemsSource = proxy.GetAllF1Bycode(Clientvv.Id).Where(n => n.nfact.Substring(0, 2) != "Co").OrderBy(n => n.date);
                interfacefacturation = 0;
                facturenew = false;
                facturemodif = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void txtRemise_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {


                if (documenttype == 2 || documenttype == 4)
                {
                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {

                        if (txtRemise.Text.Count() > 1)
                        {
                            if (Convert.ToDecimal(txtRemise.Text) != 0)
                            {
                                // var net = Convert.ToDecimal((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite));
                                // if (((selectedparam.maxremisevente * net) / 100 >= Convert.ToDecimal(txtRemise.Text)))
                                //{
                                if (Convert.ToDecimal(txtRemise.Text) < 0)
                                {
                                    avecremise = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                    remise = Convert.ToDecimal(txtRemise.Text);
                                    Benf = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                                else
                                {
                                    avecremise = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                    remise = Convert.ToDecimal(txtRemise.Text);
                                    Benf = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                                // }
                                /*  else
                                  {
                                      txtRemise.Text = "";
                                      avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                      remise = 0;
                                      Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));
                                  }*/


                            }
                            else
                            {
                                avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                            }

                        }
                        else
                        {
                            if (txtRemise.Text.Count() == 1)
                            {
                                var letter = txtRemise.Text.Substring(0, 1);

                                if (letter == "-")
                                {

                                    avecremise = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                    remise = 0;
                                    Benf = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));
                                }
                                else
                                {
                                    if (Convert.ToDecimal(txtRemise.Text) > 0)
                                    {
                                        avecremise = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                        remise = Convert.ToDecimal(txtRemise.Text);
                                        Benf = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                    }

                                }

                            }
                        }
                    }
                    else
                    {
                        txtRemise.Text = "";
                        avecremise = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        remise = 0;
                        Benf = -Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }
                    //      Bénéficemont.Text = Benf.ToString();

                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                    {
                        timbre = (avecremise * 1 / 100);
                        txtTimbre.Text = Convert.ToString(timbre);
                    }
                    else
                    {
                        timbre = 0;
                        txtTimbre.Text = Convert.ToString(timbre);

                    }
                    txtNet.Text = Convert.ToString((avecremise + timbre));
                    Bénéficemont.Text = String.Format("{0:0.##}", (Benf));
                }
                else
                {
                    decimal timbre = 0;
                    decimal remise = 0;
                    decimal avecremise = 0;
                    decimal Benf = 0;
                    if (txtRemise.Text != "")
                    {
                        if (Convert.ToDecimal(txtRemise.Text) != 0)
                        {
                            var net = Convert.ToDecimal((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite));
                            if (((selectedparam.maxremisevente * net) / 100 >= Convert.ToDecimal(txtRemise.Text)))
                            {
                                avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                            }
                            else
                            {
                                txtRemise.Text = "";
                                avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                remise = 0;
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));
                            }


                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                            remise = Convert.ToDecimal(txtRemise.Text);
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                        }
                    }
                    else
                    {
                        txtRemise.Text = "";
                        avecremise = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                        remise = 0;
                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                    }
                    Bénéficemont.Text = String.Format("{0:0.##}", Benf);
                    if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && chFacture.IsChecked == true)
                    {
                        timbre = (avecremise * 1 / 100);
                        txtTimbre.Text = Convert.ToString(timbre);
                    }
                    else
                    {
                        timbre = 0;
                        txtTimbre.Text = Convert.ToString(timbre);

                    }
                    txtNet.Text = Convert.ToString(avecremise + timbre);
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtnVersement_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {
                case Key.NumPad0:
                case Key.NumPad1:
                case Key.NumPad2:
                case Key.NumPad3:
                case Key.NumPad4:
                case Key.NumPad5:
                case Key.NumPad6:
                case Key.NumPad7:
                case Key.NumPad8:
                case Key.NumPad9:
                case Key.D0:
                case Key.D1:
                case Key.D2:
                case Key.D3:
                case Key.D4:
                case Key.D5:
                case Key.D6:
                case Key.D7:
                case Key.D8:
                case Key.D9:
                case Key.Tab:
                case Key.Subtract:
                case Key.Decimal:
                    break;
                default:
                    e.Handled = true;
                    break;
            }
        }


        private void chFactureNew_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                documenttype = 1;
                fermer = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void chFactureAvoirNew_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                documenttype = 2;
                fermer = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void chBonLivraisonNew_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                documenttype = 3;
                fermer = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void chBonLivraisonAvoirNew_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                documenttype = 4;
                fermer = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void chProformaNew_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                documenttype = 5;
                fermer = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void chFactureProvisoirNew_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                documenttype = 6;
                fermer = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }
        private string getCurrentCellValue(TextBox txtCurCell)
        {
            return txtCurCell.Text;
        }
        private void ReceptDatagrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            try
            {
                int col1 = e.Column.DisplayIndex;
                //int row1 = Convert.ToInt32(e.Row.Header);
                if (getCurrentCellValue((TextBox)e.EditingElement) == "" && (col1 == 2 || col1 == 3 || col1 == 4))
                {
                    var el = e.EditingElement as TextBox;
                    el.Text = "0.00";
                    e.Cancel = true;
                    //   CONFIRMERVENTE.IsEnabled = false;
                    // MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous ne pouvez pas laisser les champs vide,", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
                else
                {
                    CONFIRMERVENTE.IsEnabled = true;
                }

                var test = ReceptDatagrid.ItemsSource as IEnumerable<SVC.Facture>;
                var testprodf = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;
                //var testprodf = selectedtropuvé;
                if (ReceptDatagrid.SelectedItem != null && testprodf.Count() > 0)
                {
                    SVC.Facture selectedrecept = ReceptDatagrid.SelectedItem as SVC.Facture;
                    //  SVC.Prodf objectmodifed = (testprodf.ToList()).Find(n => n.Id == selectedrecept.ficheproduit);
                    SVC.Prodf objectmodifed = selectedtropuvé;



                    NomenclatureProduit.SelectedItem = objectmodifed;
                    if (getCurrentCellValue((TextBox)e.EditingElement) != "" && (col1 == 3) && facturenew == true && facturemodif == false)
                    {
                        if (documenttype == 1 || documenttype == 3)
                        {
                            var el = e.EditingElement as TextBox;
                            if (Convert.ToDecimal(el.Text) > objectmodifed.quantite)
                            {
                                el.Text = "0.00";
                                // e.Cancel = true;
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantite insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            }
                        }
                    }
                    else
                    {
                        if (getCurrentCellValue((TextBox)e.EditingElement) != "" && (col1 == 3) && facturenew == false && facturemodif == true)
                        {
                            if (documenttype == 1 || documenttype == 3)
                            {
                                var el = e.EditingElement as TextBox;

                                bool found = (anciennefactureselectedl.ToList()).Any(n => n.Id == selectedrecept.Id);

                                if (found == true)
                                {
                                    SVC.Facture ancienfacturemodifed = (anciennefactureselectedl.ToList()).Find(n => n.Id == selectedrecept.Id);

                                    if (objectmodifed.quantite < Convert.ToDecimal(el.Text) - ancienfacturemodifed.quantite)
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantite insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        el.Text = Convert.ToString(ancienfacturemodifed.quantite);
                                    }
                                }
                                else
                                {
                                    if (Convert.ToDecimal(el.Text) > objectmodifed.quantite)
                                    {
                                        el.Text = "0.00";
                                        // e.Cancel = true;
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantite insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                    }
                                }
                            }
                            else
                            {
                                if (documenttype == 2 || documenttype == 4)
                                {
                                    var el = e.EditingElement as TextBox;
                                    bool found = (anciennefactureselectedl.ToList()).Any(n => n.Id == selectedrecept.Id);
                                    if (found)
                                    {
                                        SVC.Facture ancienfacturemodifed = (anciennefactureselectedl.ToList()).Find(n => n.Id == selectedrecept.Id);
                                        if (objectmodifed.quantite < ancienfacturemodifed.quantite - Convert.ToDecimal(el.Text))
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantite insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            el.Text = Convert.ToString(ancienfacturemodifed.quantite);
                                        }
                                    }

                                }
                            }

                        }
                    }
                }

                try
                {



                    foreach (var item in test)
                    {
                        item.Total = (item.privente * item.quantite) + (((item.privente * item.quantite) * item.tva) / 100);
                    }






                    if (documenttype == 2 || documenttype == 4)
                    {
                        var ht = ((-test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                        string strht = string.Format("{0:0.00}", ht);
                        txtht.Text = strht;
                        //////////////////////////////////
                        var tva = (-(test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                        string strtva = string.Format("{0:0.00}", tva);
                        txttva.Text = strtva;
                        /////////////////////////////////
                        var ttc = (-(test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                        string strttc = string.Format("{0:0.00}", ttc);
                        txtTTC.Text = strttc;

                        decimal timbre = 0;
                        decimal remise = 0;
                        decimal avecremise = 0;
                        decimal Benf = 0;
                        if (txtRemise.Text != "")
                        {
                            if (Convert.ToDecimal(txtRemise.Text) != 0)
                            {
                                if (Convert.ToDecimal(txtRemise.Text) > 0)
                                {
                                    avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                    remise = Convert.ToDecimal(txtRemise.Text);
                                    Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                }
                                else
                                {
                                    if (Convert.ToDecimal(txtRemise.Text) < 0)
                                    {
                                        avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) + Convert.ToDecimal(txtRemise.Text);
                                        remise = -Convert.ToDecimal(txtRemise.Text);
                                        Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));
                                    }
                                }
                            }
                            else
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                remise = 0;
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                            }
                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }

                        if (tunisie!=true)
                        {
                            if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && (chFacture.IsChecked == true || chFactureAvoir.IsChecked == true))
                            {
                                var timbres = (avecremise * 1 / 100);
                                timbre = (avecremise * 1 / 100);
                                string strtimbre = string.Format("{0:0.00}", -timbres);
                                txtTimbre.Text = strtimbre;

                            }
                            else
                            {
                                timbre = 0;
                                txtTimbre.Text = Convert.ToString(timbre);

                            }
                        }
                        else
                        {
                            if (chFactureAvoir.IsChecked == true)
                            {
                                timbre = -Convert.ToDecimal(0.6);
                                txtTimbre.Text = Convert.ToString(-timbre);
                            }
                            else
                            {
                                timbre = 0;
                                txtTimbre.Text = Convert.ToString(timbre);
                            }
                        }
                        var Net = (-(avecremise + timbre));
                        string strNet = string.Format("{0:0.00}", Net);
                        txtNet.Text = strNet;
                        Bénéficemont.Text = String.Format("{0:0.##}", (-Benf));
                    }
                    else
                    {
                        var ht = ((test.AsEnumerable().Sum(o => o.privente * o.quantite)));
                        string strht = string.Format("{0:0.00}", ht);
                        txtht.Text = strht;
                        //////////////////////////////////
                        var tva = ((test).AsEnumerable().Sum(o => ((o.privente * o.tva) / 100) * o.quantite));
                        string strtva = string.Format("{0:0.00}", tva);
                        txttva.Text = strtva;
                        /////////////////////////////////
                        var ttc = ((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                        string strttc = string.Format("{0:0.00}", ttc);
                        txtTTC.Text = strttc;

                        decimal timbre = 0;
                        decimal remise = 0;
                        decimal avecremise = 0;
                        decimal Benf = 0;
                        if (txtRemise.Text != "")
                        {
                            if (Convert.ToDecimal(txtRemise.Text) != 0)
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)))) - Convert.ToDecimal(txtRemise.Text);
                                remise = Convert.ToDecimal(txtRemise.Text);
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)) - Convert.ToDecimal(txtRemise.Text));

                            }
                            else
                            {
                                avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                                remise = 0;
                                Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                            }
                        }
                        else
                        {
                            avecremise = Convert.ToDecimal(((test).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite))));
                            Benf = Convert.ToDecimal(((factureselectedl).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((factureselectedl).AsEnumerable().Sum(o => o.previent * o.quantite)));

                        }
                        if (tunisie != true)
                        {
                            if (((ComboBoxItem)Modep.SelectedItem).Content.ToString() == "ESPECES" && chFacture.IsChecked == true)
                            {

                                var timbres = (avecremise * 1 / 100);
                                string strtimbre = string.Format("{0:0.00}", timbres);
                                txtTimbre.Text = strtimbre;
                                timbre = (avecremise * 1 / 100);
                            }
                            else
                            {
                                timbre = 0;
                                txtTimbre.Text = Convert.ToString(timbre);

                            }
                        }
                        else
                        {
                            if (chFacture.IsChecked == true)
                            {
                                timbre = Convert.ToDecimal(0.6);
                                txtTimbre.Text = Convert.ToString(timbre);
                            }
                            else
                            {
                                timbre = 0;
                                txtTimbre.Text = Convert.ToString(timbre);
                            }
                        }
                        var Net = ((avecremise + timbre));
                        string strNet = string.Format("{0:0.00}", Net);
                        txtNet.Text = strNet;

                        Bénéficemont.Text = String.Format("{0:0.##}", Benf);
                    }





                    ReceptDatagrid.ItemsSource = test;


                }
                catch (Exception ex)
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void bntchargementhistoriqueproduit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ProduitHistoriquevente.ItemsSource = proxy.GetAllFactureByCode(Clientvv.Id).Where(n => n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R").OrderBy(n => n.date);
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }



        private void btnImprimmerFacture1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (HistoriqueDesDataGrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                {
                    SVC.F1 SelectedClient = HistoriqueDesDataGrid.SelectedItem as SVC.F1;
                    List<SVC.F1> facturelist = new List<SVC.F1>();
                    facturelist.Add(SelectedClient);
                    ImpressionFacture cl = new ImpressionFacture(proxy, facturelist, Clientvv,1);
                    cl.Show();
                }
                else
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnNew_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    MontureClass = new SVC.Monture
                    {
                        Date = DateTime.Now,
                        UserName = memberuser.Username,
                        Délivre = false,
                        Monte = false,
                        RaisonClient = Clientvv.Raison,
                        StatutDevis = true,
                        StatutVente = false,
                        IdClient = Clientvv.Id,
                        EnMontage = false,
                        DroiteCylindrePlus = true,
                        DroiteCylindreMoin = false,
                        GaucheCylindreMoin = false,
                        GaucheCylindrePlus = true,
                        AccessoiresQuantite1 = 0,
                        AccessoiresQuantite2 = 0,
                        AccessoiresPrix1 = 0,
                        AccessoiresPrix2 = 0,
                        GaucheFleshBas = false,
                        GaucheFleshHaut = true,
                        GaucheFleshDroite = true,
                        GaucheFleshGauche = false,
                        DroiteFleshBas = false,
                        DroiteFleshHaut = true,
                        DroiteFleshDroite = true,
                        DroiteFleshGauche = false,
                        DroitPrixVerreLoin = 0,
                        Encaissé = 0,
                        Reste = 0,
                        Interm = true,
                        Loin = true,
                        Pres = true,
                        Dates = DateTime.Now,
                        DroitPrixVerrePres = 0,

                        GauchePrixVerreLoin = 0,
                        GauchePrixVerrePres = 0,
                        PrixMontureLoin = 0,
                        PrixMonturePres = 0,
                        Remise=0,
                    };
                    GridMonture.DataContext = MontureClass;
                    GridMonture.IsEnabled = true;
                    TxtStatutGlobal.Content = "Devis";
                    TxtStatutGlobal.Background = System.Windows.Media.Brushes.PaleVioletRed;

                    nouvellemonture = true;
                    anciennemonture = false;
                    txtDroiteFleshHaut.Visibility = Visibility.Visible;
                    DroiteFleshBas.Visibility = Visibility.Collapsed;
                    txtDroiteFleshDroite.Visibility = Visibility.Visible;
                    txtDroiteFleshGauche.Visibility = Visibility.Collapsed;

                    txtGaucheFleshHaut.Visibility = Visibility.Visible;
                    txtGaucheFleshBas.Visibility = Visibility.Collapsed;
                    txtGaucheFleshDroite.Visibility = Visibility.Visible;
                    txtGaucheFleshGauche.Visibility = Visibility.Collapsed;

                    listsupp1 = new List<SVC.MontureSupplement>();
                    listsupp2 = new List<SVC.MontureSupplement>();
                    listsupp3 = new List<SVC.MontureSupplement>();
                    listsupp4 = new List<SVC.MontureSupplement>();
                    txtMontantTotalENC.IsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }


        }

        private void btnSupp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.SupressionDossierClient == true && MontureDatagrid.SelectedItem != null)
                {
                    var selectedmonture = MontureDatagrid.SelectedItem as SVC.Monture;
                    if (selectedmonture.StatutVente == false)
                    {
                        bool sucees = false;
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {

                            proxy.DeleteMonture(selectedmonture);
                            ts.Complete();
                            sucees = true;
                        }
                        if (sucees == true)
                        {
                            proxy.AjouterMontureRefresh(Clientvv.Id);
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                        }

                    }
                    else
                    {
                        if (selectedmonture.StatutVente == true)
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez tout d'abord supprimer le document de vente associé", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            tsdffgent.IsSelected = true;
                            bool existe = proxy.GetAllF1ByCleDossier(Convert.ToString(selectedmonture.Cle)).Any();
                            if (existe == true)
                            {
                                if (memberuser.ModificationDossierClient == true)
                                {

                                    if (ListeDesDocuments.SelectedItem != null && memberuser.ModificationDossierClient == true)
                                    {
                                        selectedF1 = proxy.GetAllF1ByCleDossier(Convert.ToString(selectedmonture.Cle)).First();
                                        ancienneF1 = proxy.GetAllF1ByCleDossier(Convert.ToString(selectedmonture.Cle)).First();
                                        factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                        anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                        FacturationDesign();
                                        ReceptDatagrid.IsEnabled = false;
                                        if (factureselectedl != null)
                                        {
                                            foreach (var item in factureselectedl)
                                            {
                                                item.quantite = 0;
                                            }
                                            ReceptDatagrid.ItemsSource = factureselectedl;
                                            ReceptDatagrid.DataContext = factureselectedl;

                                            CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                                            WindowBorderFacture.DataContext = selectedF1;
                                            var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                                            string strTTC = string.Format("{0:0.00}", TTC);
                                            txtTTC.Text = strTTC;

                                        }
                                        facturenew = false;
                                        facturemodif = true;
                                        string nfact = selectedF1.nfact.Substring(0, 1);

                                        switch (nfact)
                                        {
                                            case "F":
                                                chFacture.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "modifier Facture";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 1;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }
                                                break;
                                            case "A":
                                                chFactureAvoir.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "Facture d'avoir";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 2;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }
                                                break;
                                            case "B":
                                                chBonLivraison.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "bon de livraison";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 3;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }
                                                break;
                                            case "C":
                                                chBonLivraisonAvoir.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "avoir bon de livraison";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 4;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }

                                                break;
                                            case "P":
                                                chProforma.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "modifier Proforma";
                                                ReceptDatagrid.CanUserDeleteRows = true;
                                                documenttype = 5;

                                                ReceptDatagrid.Columns[2].IsReadOnly = false;

                                                txtDateOper.IsEnabled = true;



                                                break;
                                            case "R":
                                                chFactureProvisoir.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "Facture provisoir";
                                                ReceptDatagrid.CanUserDeleteRows = true;

                                                ReceptDatagrid.Columns[2].IsReadOnly = false;

                                                txtDateOper.IsEnabled = true;
                                                documenttype = 6;
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult resultgfh = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }

                                }


                            }
                        }
                    }
                }

            }


            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (MontureDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    MontureClass = MontureDatagrid.SelectedItem as SVC.Monture;
                    GridMonture.DataContext = MontureClass;
                    GridMonture.IsEnabled = true;
                    nouvellemonture = false;
                    anciennemonture = true;
                    if (MontureClass.StatutVente == false)
                    {
                        btnvente.IsEnabled = true;
                        txtMontantTotalENC.IsEnabled = true;
                    }
                    else
                    {
                        btnvente.IsEnabled = false;
                        txtMontantTotalENC.IsEnabled = false;
                    }

                    if (MontureClass.StatutDevis == true && MontureClass.StatutVente == false)
                    {
                        TxtStatutGlobal.Content = "Devis";

                        TxtStatutGlobal.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    }
                    else
                    {
                        if (MontureClass.StatutDevis == true && MontureClass.StatutVente == true)
                        {
                            TxtStatutGlobal.Content = "Vente validée";
                            TxtStatutGlobal.Background = System.Windows.Media.Brushes.LightGreen;
                        }
                    }


                    if (MontureClass.DroiteFleshHaut == true)
                    {
                        txtDroiteFleshHaut.Visibility = Visibility.Visible;
                        DroiteFleshBas.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtDroiteFleshHaut.Visibility = Visibility.Collapsed;
                        DroiteFleshBas.Visibility = Visibility.Visible;
                    }

                    if (MontureClass.DroiteFleshDroite == true)
                    {
                        txtDroiteFleshDroite.Visibility = Visibility.Visible;
                        txtDroiteFleshGauche.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtDroiteFleshDroite.Visibility = Visibility.Collapsed;
                        txtDroiteFleshGauche.Visibility = Visibility.Visible;
                    }

                    if (MontureClass.GaucheFleshHaut == true)
                    {
                        txtGaucheFleshHaut.Visibility = Visibility.Visible;
                        txtGaucheFleshBas.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtGaucheFleshHaut.Visibility = Visibility.Collapsed;
                        txtGaucheFleshBas.Visibility = Visibility.Visible;
                    }

                    if (MontureClass.GaucheFleshDroite == true)
                    {
                        txtGaucheFleshDroite.Visibility = Visibility.Visible;
                        txtGaucheFleshGauche.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtGaucheFleshDroite.Visibility = Visibility.Collapsed;
                        txtGaucheFleshGauche.Visibility = Visibility.Visible;
                    }
                    /**************************************************************/
                    if (MontureClass.Loin == true && MontureClass.Pres == true)
                    {
                        ODLOIN.Text = "Loin";
                        ODITERM.Text = "Interm.";
                        ODPRES.Text = "Près";
                        OGLOIN.Text = "Loin";
                        OGINTERM.Text = "Interm.";
                        OGPRES.Text = "Près";
                        MonturePresLabel.Text = "PRES";
                        MontureLoinLabel.Text = "LOIN";
                    }
                    else
                    {
                        if (MontureClass.Loin == true && MontureClass.Pres == false)
                        {
                            ODLOIN.Text = "Loin";
                            ODITERM.Text = "Loin";
                            ODPRES.Text = "Près";
                            OGLOIN.Text = "Loin";
                            OGINTERM.Text = "Loin";
                            OGPRES.Text = "Près";
                            MonturePresLabel.Text = "LOIN";
                            MontureLoinLabel.Text = "LOIN";
                        }
                        else
                        {
                            if (MontureClass.Loin == false && MontureClass.Pres == true)
                            {
                                ODLOIN.Text = "Loin";
                                ODITERM.Text = "Près";
                                ODPRES.Text = "Près";
                                OGLOIN.Text = "Loin";
                                OGINTERM.Text = "Près";
                                OGPRES.Text = "Près";
                                MonturePresLabel.Text = "PRES";
                                MontureLoinLabel.Text = "PRES";
                            }
                        }
                    }
                    if (MontureClass.Encaissé != 0)
                    {
                        montureversementzero = true;
                    }
                    else
                    {
                        montureversementzero = false;
                    }
                    if (MontureClass.StatutDevis == true && MontureClass.StatutVente == false)
                    {
                        TxtStatutGlobal.Content = "Devis";
                        TxtStatutGlobal.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    }
                    else
                    {
                        if (MontureClass.StatutDevis == true && MontureClass.StatutVente == true)
                        {
                            TxtStatutGlobal.Content = "Vente validée";
                            TxtStatutGlobal.Background = System.Windows.Media.Brushes.LightGreen;
                        }
                    }
                    listsupp1 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 1).ToList();
                    listsupp2 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 2).ToList();
                    listsupp3 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 3).ToList();
                    listsupp4 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 4).ToList();
                    anciennelistsupp1 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 1).ToList();
                    anciennelistsupp2 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 2).ToList();
                    anciennelistsupp3 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 3).ToList();
                    anciennelistsupp4 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 4).ToList();
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnImprimer_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                try
                {
                    if (MontureDatagrid.SelectedItem!=null)
                    {
                        dialog1 = new DXDialog("Impression", DialogButtons.YesNo, true);
                        dialog1.Template = Resources["template5"] as ControlTemplate;

                        // dialog1.Content = Resources["content"];
                        dialog1.ResizeMode = ResizeMode.NoResize;
                        dialog1.Width = 350;
                        dialog1.Height = 200;
                        dialog1.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                        dialog1.ShowDialog();
                        interfaceimpressionmonture = 0;
                    }
                }
                catch (Exception ex)
                {
                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtDroiteFleshHaut_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtDroiteFleshHaut.Visibility = Visibility.Collapsed;
                DroiteFleshBas.Visibility = Visibility.Visible;
                MontureClass.DroiteFleshBas = true;
                MontureClass.DroiteFleshHaut = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DroiteFleshBas_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtDroiteFleshHaut.Visibility = Visibility.Visible;
                DroiteFleshBas.Visibility = Visibility.Collapsed;
                MontureClass.DroiteFleshBas = false;
                MontureClass.DroiteFleshHaut = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txtDroiteFleshDroite_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtDroiteFleshGauche.Visibility = Visibility.Visible;
                txtDroiteFleshDroite.Visibility = Visibility.Collapsed;
                MontureClass.DroiteFleshDroite = false;
                MontureClass.DroiteFleshGauche = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void txtDroiteFleshGauche_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtDroiteFleshGauche.Visibility = Visibility.Collapsed;
                txtDroiteFleshDroite.Visibility = Visibility.Visible;
                MontureClass.DroiteFleshDroite = true;
                MontureClass.DroiteFleshGauche = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btnformule_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                /********************GroiteLoin*************************************/
                if (txtLoinSphereDroite.Text != "" && txtLoinCylindreDroite.Text != "" && txtLoinAxeDroite.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtLoinSphereDroite.Text != "")
                    {
                        if (decimal.TryParse(txtLoinSphereDroite.Text, out sphere))
                            sphere = Convert.ToDecimal(txtLoinSphereDroite.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtLoinSphereDroite.Text = "";
                        sphere = 0;
                    }
                    if (txtLoinCylindreDroite.Text != "")
                    {
                        if (decimal.TryParse(txtLoinCylindreDroite.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtLoinCylindreDroite.Text);
                            if(cylindre>0)
                            {
                                MontureClass.DroiteCylindrePlus = true;
                                MontureClass.DroiteCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre <0 )
                                {
                                    MontureClass.DroiteCylindrePlus = false;
                                    MontureClass.DroiteCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtLoinCylindreDroite.Text = "";
                        cylindre = 0;
                    }

                    if (txtLoinAxeDroite.Text != "")
                    {
                        if (int.TryParse(txtLoinAxeDroite.Text, out axe))
                            axe = Convert.ToInt16(txtLoinAxeDroite.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtLoinAxeDroite.Text = "";
                        axe = 0;
                    }
                    txtLoinCylindreDroite.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtLoinSphereDroite.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (MontureClass.DroiteCylindrePlus == true && MontureClass.DroiteCylindreMoin == false)
                    {
                        txtLoinAxeDroite.Text = (axe + 90).ToString();
                        MontureClass.DroiteCylindrePlus = false;
                        MontureClass.DroiteCylindreMoin = true;

                    }
                    else
                    {
                        if (MontureClass.DroiteCylindrePlus == false && MontureClass.DroiteCylindreMoin == true)
                        {
                            txtLoinAxeDroite.Text = (axe - 90).ToString();
                            MontureClass.DroiteCylindrePlus = true;
                            MontureClass.DroiteCylindreMoin = false;
                        }
                    }
                }
                /********************GroiteIntermediaire*************************************/
                if (txtIntermSphereDroite.Text != "" && txtIntermCylindreDroite.Text != "" && txtIntermAxeDroite.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtIntermSphereDroite.Text != "")
                    {
                        if (decimal.TryParse(txtIntermSphereDroite.Text, out sphere))
                            sphere = Convert.ToDecimal(txtIntermSphereDroite.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtIntermSphereDroite.Text = "";
                        sphere = 0;
                    }
                    if (txtIntermCylindreDroite.Text != "")
                    {
                        if (decimal.TryParse(txtIntermCylindreDroite.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtIntermCylindreDroite.Text);

                            if (cylindre > 0)
                            {
                                MontureClass.DroiteCylindrePlus = true;
                                MontureClass.DroiteCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    MontureClass.DroiteCylindrePlus = false;
                                    MontureClass.DroiteCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtIntermCylindreDroite.Text = "";
                        cylindre = 0;
                    }

                    if (txtIntermAxeDroite.Text != "")
                    {
                        if (int.TryParse(txtIntermAxeDroite.Text, out axe))
                            axe = Convert.ToInt16(txtIntermAxeDroite.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtIntermAxeDroite.Text = "";
                        axe = 0;
                    }
                    txtIntermCylindreDroite.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtIntermSphereDroite.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (MontureClass.DroiteCylindrePlus == true && MontureClass.DroiteCylindreMoin == false)
                    {
                        txtIntermAxeDroite.Text = (axe + 90).ToString();
                        MontureClass.DroiteCylindrePlus = false;
                        MontureClass.DroiteCylindreMoin = true;

                    }
                    else
                    {
                        if (MontureClass.DroiteCylindrePlus == false && MontureClass.DroiteCylindreMoin == true)
                        {
                            txtIntermAxeDroite.Text = (axe - 90).ToString();
                            MontureClass.DroiteCylindrePlus = true;
                            MontureClass.DroiteCylindreMoin = false;
                        }
                    }
                }

                /********************GroitePres*************************************/
                if (txtPresSphereDroite.Text != "" && txtPresCylindreDroite.Text != "" && txtPresAxeDroite.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtPresSphereDroite.Text != "")
                    {
                        if (decimal.TryParse(txtPresSphereDroite.Text, out sphere))
                            sphere = Convert.ToDecimal(txtPresSphereDroite.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtPresSphereDroite.Text = "";
                        sphere = 0;
                    }
                    if (txtPresCylindreDroite.Text != "")
                    {
                        if (decimal.TryParse(txtPresCylindreDroite.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtPresCylindreDroite.Text);
                            if (cylindre > 0)
                            {
                                MontureClass.DroiteCylindrePlus  = true;
                                MontureClass.DroiteCylindreMoin  = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    MontureClass.DroiteCylindrePlus = false;
                                    MontureClass.DroiteCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtPresCylindreDroite.Text = "";
                        cylindre = 0;
                    }

                    if (txtPresAxeDroite.Text != "")
                    {
                        if (int.TryParse(txtPresAxeDroite.Text, out axe))
                            axe = Convert.ToInt16(txtPresAxeDroite.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtPresAxeDroite.Text = "";
                        axe = 0;
                    }
                    txtPresCylindreDroite.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtPresSphereDroite.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (MontureClass.DroiteCylindrePlus == true && MontureClass.DroiteCylindreMoin == false)
                    {
                        txtPresAxeDroite.Text = (axe + 90).ToString();
                        MontureClass.DroiteCylindrePlus = false;
                        MontureClass.DroiteCylindreMoin = true;

                    }
                    else
                    {
                        if (MontureClass.DroiteCylindrePlus == false && MontureClass.DroiteCylindreMoin == true)
                        {
                            txtPresAxeDroite.Text = (axe - 90).ToString();
                            MontureClass.DroiteCylindrePlus = true;
                            MontureClass.DroiteCylindreMoin = false;
                        }
                    }
                }
                /*****************************GAUUUUUUUUUCHHHHHHHHHHHHHHEEEEE*****************************/
                /********************GaucheLoin*************************************/
                if (txtLoinSphereGauche.Text != "" && txtLoinCylindreGauche.Text != "" && txtLoinAxeGauche.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtLoinSphereGauche.Text != "")
                    {
                        if (decimal.TryParse(txtLoinSphereGauche.Text, out sphere))
                            sphere = Convert.ToDecimal(txtLoinSphereGauche.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtLoinSphereGauche.Text = "";
                        sphere = 0;
                    }
                    if (txtLoinCylindreGauche.Text != "")
                    {
                        if (decimal.TryParse(txtLoinCylindreGauche.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtLoinCylindreGauche.Text);
                            if (cylindre > 0)
                            {
                                MontureClass.GaucheCylindrePlus = true;
                                MontureClass.GaucheCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    MontureClass.GaucheCylindrePlus = false;
                                    MontureClass.GaucheCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtLoinCylindreGauche.Text = "";
                        cylindre = 0;
                    }

                    if (txtLoinAxeGauche.Text != "")
                    {
                        if (int.TryParse(txtLoinAxeGauche.Text, out axe))
                            axe = Convert.ToInt16(txtLoinAxeGauche.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtLoinAxeGauche.Text = "";
                        axe = 0;
                    }
                    txtLoinCylindreGauche.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtLoinSphereGauche.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (MontureClass.GaucheCylindrePlus == true && MontureClass.GaucheCylindreMoin == false)
                    {
                        txtLoinAxeGauche.Text = (axe + 90).ToString();
                        MontureClass.GaucheCylindrePlus = false;
                        MontureClass.GaucheCylindreMoin = true;

                    }
                    else
                    {
                        if (MontureClass.GaucheCylindrePlus == false && MontureClass.GaucheCylindreMoin == true)
                        {
                            txtLoinAxeGauche.Text = (axe - 90).ToString();
                            MontureClass.GaucheCylindrePlus = true;
                            MontureClass.GaucheCylindreMoin = false;
                        }
                    }
                }
                /********************GaucheIntermediarire*************************************/
                if (txtIntermSphereGauche.Text != "" && txtIntermCylindreGauche.Text != "" && txtIntermAxeGauche.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtIntermSphereGauche.Text != "")
                    {
                        if (decimal.TryParse(txtIntermSphereGauche.Text, out sphere))
                            sphere = Convert.ToDecimal(txtIntermSphereGauche.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtIntermSphereGauche.Text = "";
                        sphere = 0;
                    }
                    if (txtIntermCylindreGauche.Text != "")
                    {
                        if (decimal.TryParse(txtIntermCylindreGauche.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtIntermCylindreGauche.Text);
                            if (cylindre > 0)
                            {
                                MontureClass.GaucheCylindrePlus = true;
                                MontureClass.GaucheCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    MontureClass.GaucheCylindrePlus = false;
                                    MontureClass.GaucheCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtIntermCylindreGauche.Text = "";
                        cylindre = 0;
                    }

                    if (txtIntermAxeGauche.Text != "")
                    {
                        if (int.TryParse(txtIntermAxeGauche.Text, out axe))
                            axe = Convert.ToInt16(txtIntermAxeGauche.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtIntermAxeGauche.Text = "";
                        axe = 0;
                    }
                    txtIntermCylindreGauche.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtIntermSphereGauche.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (MontureClass.GaucheCylindrePlus == true && MontureClass.GaucheCylindreMoin == false)
                    {
                        txtIntermAxeGauche.Text = (axe + 90).ToString();
                        MontureClass.GaucheCylindrePlus = false;
                        MontureClass.GaucheCylindreMoin = true;

                    }
                    else
                    {
                        if (MontureClass.GaucheCylindrePlus == false && MontureClass.GaucheCylindreMoin == true)
                        {
                            txtIntermAxeGauche.Text = (axe - 90).ToString();
                            MontureClass.GaucheCylindrePlus = true;
                            MontureClass.GaucheCylindreMoin = false;
                        }
                    }
                }
                /********************GauchePres*************************************/
                if (txtPresSphereGauche.Text != "" && txtPresCylindreGauche.Text != "" && txtPresAxeGauche.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtPresSphereGauche.Text != "")
                    {
                        if (decimal.TryParse(txtPresSphereGauche.Text, out sphere))
                            sphere = Convert.ToDecimal(txtPresSphereGauche.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtPresSphereGauche.Text = "";
                        sphere = 0;
                    }
                    if (txtPresCylindreGauche.Text != "")
                    {
                        if (decimal.TryParse(txtPresCylindreGauche.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtPresCylindreGauche.Text);
                            if (cylindre > 0)
                            {
                                MontureClass.GaucheCylindrePlus = true;
                                MontureClass.GaucheCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    MontureClass.GaucheCylindrePlus = false;
                                    MontureClass.GaucheCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtPresCylindreGauche.Text = "";
                        cylindre = 0;
                    }

                    if (txtPresAxeGauche.Text != "")
                    {
                        if (int.TryParse(txtPresAxeGauche.Text, out axe))
                            axe = Convert.ToInt16(txtPresAxeGauche.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtPresAxeGauche.Text = "";
                        axe = 0;
                    }
                    txtPresCylindreGauche.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtPresSphereGauche.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (MontureClass.GaucheCylindrePlus == true && MontureClass.GaucheCylindreMoin == false)
                    {
                        txtPresAxeGauche.Text = (axe + 90).ToString();
                        MontureClass.GaucheCylindrePlus = false;
                        MontureClass.GaucheCylindreMoin = true;

                    }
                    else
                    {
                        if (MontureClass.GaucheCylindrePlus == false && MontureClass.GaucheCylindreMoin == true)
                        {
                            txtPresAxeGauche.Text = (axe - 90).ToString();
                            MontureClass.GaucheCylindrePlus = true;
                            MontureClass.GaucheCylindreMoin = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txtGaucheFleshHaut_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtGaucheFleshHaut.Visibility = Visibility.Collapsed;
                txtGaucheFleshBas.Visibility = Visibility.Visible;
                MontureClass.GaucheFleshHaut = false;
                MontureClass.GaucheFleshBas = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void GaucheFleshBas_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtGaucheFleshHaut.Visibility = Visibility.Visible;
                txtGaucheFleshBas.Visibility = Visibility.Collapsed;
                MontureClass.GaucheFleshHaut = true;
                MontureClass.GaucheFleshBas = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txtGaucheFleshDroite_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtGaucheFleshDroite.Visibility = Visibility.Collapsed;
                txtGaucheFleshGauche.Visibility = Visibility.Visible;
                MontureClass.GaucheFleshDroite = false;
                MontureClass.GaucheFleshGauche = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txtGaucheFleshGauche_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                txtGaucheFleshDroite.Visibility = Visibility.Visible;
                txtGaucheFleshGauche.Visibility = Visibility.Collapsed;
                MontureClass.GaucheFleshDroite = true;
                MontureClass.GaucheFleshGauche = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txtDroiteVerreLoinDesignation_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {
                case Key.NumPad0:
                case Key.NumPad1:
                case Key.NumPad2:
                case Key.NumPad3:
                case Key.NumPad4:
                case Key.NumPad5:
                case Key.NumPad6:
                case Key.NumPad7:
                case Key.NumPad8:
                case Key.NumPad9:
                case Key.D0:
                case Key.D1:
                case Key.D2:
                case Key.D3:
                case Key.D4:
                case Key.D5:
                case Key.D6:
                case Key.D7:
                case Key.D8:
                case Key.D9:
                case Key.Tab:
                case Key.Decimal:


                    break;
                default:
                    e.Handled = true;
                    break;
            }
        }


        private void btnVision_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (MontureClass.Loin == true && MontureClass.Pres == true)
                {
                    MontureClass.Loin = true;
                    MontureClass.Pres = false;
                    ODLOIN.Text = "Loin";
                    ODITERM.Text = "Loin";
                    ODPRES.Text = "Près";
                    OGLOIN.Text = "Loin";
                    OGINTERM.Text = "Loin";
                    OGPRES.Text = "Près";
                    MonturePresLabel.Text = "LOIN";
                    MontureLoinLabel.Text = "LOIN";
                    txtIntermSphereDroite.Text = txtLoinSphereDroite.Text;
                    txtIntermCylindreDroite.Text = txtLoinCylindreDroite.Text;
                    txtIntermAxeDroite.Text = txtLoinAxeDroite.Text;
                    txtIntermAddDroite.Text = txtLoinAddDroite.Text;
                    txtIntermPrismeDroite.Text = txtLoinPrismeDroite.Text;
                    txtIntermBaseDroite.Text = txtLoinBaseDroite.Text;
                    /*************************************************/
                    txtIntermSphereGauche.Text = txtLoinSphereGauche.Text;
                    txtIntermCylindreGauche.Text = txtLoinCylindreGauche.Text;
                    txtIntermAxeGauche.Text = txtLoinAxeGauche.Text;
                    txtIntermAddGauche.Text = txtLoinAddGauche.Text;
                    txtIntermPrismeGauche.Text = txtLoinPrismeGauche.Text;
                    txtIntermBaseGauche.Text = txtLoinBaseGauche.Text;
                }
                else
                {
                    if (MontureClass.Loin == true && MontureClass.Pres == false)
                    {
                        MontureClass.Loin = false;
                        MontureClass.Pres = true;
                        ODLOIN.Text = "Loin";
                        ODITERM.Text = "Près";
                        ODPRES.Text = "Près";
                        OGLOIN.Text = "Loin";
                        OGINTERM.Text = "Près";
                        OGPRES.Text = "Près";
                        MonturePresLabel.Text = "PRES";
                        MontureLoinLabel.Text = "PRES";
                        txtIntermSphereDroite.Text = txtPresSphereDroite.Text;
                        txtIntermCylindreDroite.Text = txtPresCylindreDroite.Text;
                          txtIntermAxeDroite.Text = txtPresAxeDroite.Text;
                          txtIntermAddDroite.Text = "";
                        txtIntermPrismeDroite.Text = txtPresPrismeDroite.Text;
                        txtIntermBaseDroite.Text = txtPresBaseDroite.Text;
                        /****************************************/
                        txtIntermSphereGauche.Text = txtPresSphereGauche.Text;
                        txtIntermCylindreGauche.Text = txtPresCylindreGauche.Text;
                        txtIntermAxeGauche.Text = txtPresAxeGauche.Text;
                        txtIntermAddGauche.Text = "";
                        txtIntermPrismeGauche.Text = txtPresPrismeGauche.Text;
                        txtIntermBaseGauche.Text = txtPresBaseGauche.Text;
                    }
                    else
                    {
                        if (MontureClass.Loin == false && MontureClass.Pres == true)
                        {
                            MontureClass.Loin = true;
                            MontureClass.Pres = true;
                            ODLOIN.Text = "Loin";
                            ODITERM.Text = "Interm.";
                            ODPRES.Text = "Près";
                            OGLOIN.Text = "Loin";
                            OGINTERM.Text = "Interm.";
                            OGPRES.Text = "Près";
                            MonturePresLabel.Text = "PRES";
                            MontureLoinLabel.Text = "LOIN";
                            txtIntermSphereDroite.Text = "";
                            txtIntermCylindreDroite.Text = "";
                            txtIntermAxeDroite.Text = "";
                            txtIntermAddDroite.Text = "";
                            txtIntermPrismeDroite.Text = "";
                            txtIntermBaseDroite.Text = "";
                            /********************************/
                            txtIntermSphereGauche.Text = "";
                            txtIntermCylindreGauche.Text = "";
                            txtIntermAxeGauche.Text = "";
                            txtIntermAddGauche.Text = "";
                            txtIntermPrismeGauche.Text = "";
                            txtIntermBaseGauche.Text = "";
                        }
                    }
                  
                }

                   
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroiteVerreLoinDesignation_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    //  listsupp1 = new List<SVC.MontureSupplement>();
                    SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 1, MontureClass, 0, listsupp1, Clientvv);
                    cl.Show();
                }
                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                        //    listsupp1 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 1).ToList();
                        SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 1, MontureClass, 1, listsupp1, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGaucheVerreLoinDesignation_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    // listsupp2 = new List<SVC.MontureSupplement>();
                    SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 2, MontureClass, 0, listsupp2, Clientvv);
                    cl.Show();
                }

                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                        //  listsupp2 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 2).ToList(); ;

                        SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 2, MontureClass, 1, listsupp2, Clientvv);
                        cl.Show();
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroiteVerrePresDesignation_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {

                    // listsupp3 = new List<SVC.MontureSupplement>();
                    SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 3, MontureClass, 0, listsupp3, Clientvv);
                    cl.Show();
                }
                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {

                        //     listsupp3 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 3).ToList(); ;
                        SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 3, MontureClass, 1, listsupp3, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGaucheVerrePresDesignation_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    // listsupp4 = new List<SVC.MontureSupplement>();
                    SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 4, MontureClass, 0, listsupp4, Clientvv);
                    cl.Show();
                }
                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                        //  listsupp4 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 4).ToList();

                        SelectionVerre cl = new SelectionVerre(proxy, memberuser, callback, 4, MontureClass, 1, listsupp4, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtMontureDesignationLoin_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    //  SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 5, MontureClass, 0);
                    selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 5, MontureClass, 0,Clientvv);
                    cl.Show();
                }

                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                        //   SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 5, MontureClass, 0);
                        selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 5, MontureClass, 0, Clientvv);
                        cl.Show();
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtMontureDesignationPres_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    // SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 6, MontureClass, 0);
                    selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 6, MontureClass, 0, Clientvv);

                    cl.Show();
                }
                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                       // SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 6, MontureClass, 0);
                        selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 6, MontureClass, 0, Clientvv);

                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroitPrixVerreLoin_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal DroitPrixLoin, GauchePrixLoin = 0;
                if (txtDroitPrixVerreLoin.Text != "")
                {
                    DroitPrixLoin = Convert.ToDecimal(txtDroitPrixVerreLoin.Text);
                }
                else
                {
                    DroitPrixLoin = 0;
                }
                if (txtGauchePrixVerreLoin.Text != "")
                {
                    GauchePrixLoin = Convert.ToDecimal(txtGauchePrixVerreLoin.Text);
                }
                else
                {
                    GauchePrixLoin = 0;
                }


                txtPrixTotalLoin.Text = (DroitPrixLoin + GauchePrixLoin).ToString();



            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGauchePrixVerreLoin_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal DroitPrixLoin, GauchePrixLoin = 0;
                if (txtDroitPrixVerreLoin.Text != "")
                {
                    DroitPrixLoin = Convert.ToDecimal(txtDroitPrixVerreLoin.Text);
                }
                else
                {
                    DroitPrixLoin = 0;
                }
                if (txtGauchePrixVerreLoin.Text != "")
                {
                    GauchePrixLoin = Convert.ToDecimal(txtGauchePrixVerreLoin.Text);
                }
                else
                {
                    GauchePrixLoin = 0;
                }


                txtPrixTotalLoin.Text = (DroitPrixLoin + GauchePrixLoin).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroitPrixVerrePres_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal DroitPrixPres, GauchePrixPres = 0;
                if (txtDroitPrixVerrePres.Text != "")
                {
                    DroitPrixPres = Convert.ToDecimal(txtDroitPrixVerrePres.Text);
                }
                else
                {
                    DroitPrixPres = 0;
                }
                if (txtGauchePrixVerrePres.Text != "")
                {
                    GauchePrixPres = Convert.ToDecimal(txtGauchePrixVerrePres.Text);
                }
                else
                {
                    GauchePrixPres = 0;
                }


                txtPrixTotalPres.Text = (DroitPrixPres + GauchePrixPres).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGauchePrixVerrePres_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal DroitPrixPres, GauchePrixPres = 0;
                if (txtDroitPrixVerrePres.Text != "")
                {
                    DroitPrixPres = Convert.ToDecimal(txtDroitPrixVerrePres.Text);
                }
                else
                {
                    DroitPrixPres = 0;
                }
                if (txtGauchePrixVerrePres.Text != "")
                {
                    GauchePrixPres = Convert.ToDecimal(txtGauchePrixVerrePres.Text);
                }
                else
                {
                    GauchePrixPres = 0;
                }


                txtPrixTotalPres.Text = (DroitPrixPres + GauchePrixPres).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }



        private void txtAccessoiresPrix1_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite1.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite1.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix1.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix1.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc1.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresQuantite1_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite1.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite1.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix1.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix1.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc1.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresPrix2_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite2.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite2.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix2.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix2.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc2.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresQuantite2_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite2.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite2.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix2.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix2.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc2.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalLoin_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                           txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixMontureLoin_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                            txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalPres_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                            txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixMonturePres_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                            txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalAcc1_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                            txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalAcc2_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                            txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }

        private void txtAccessoires1_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    // SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 7, MontureClass, 0);
                    selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 7, MontureClass, 0, Clientvv);

                    cl.Show();
                }
                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                        //  SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 7, MontureClass, 0);
                        selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback,7, MontureClass, 0, Clientvv);

                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoires2_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellemonture == true && anciennemonture == false)
                {
                    //   SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 8, MontureClass, 0);
                    selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 8, MontureClass, 0, Clientvv);

                    cl.Show();
                }
                else
                {
                    if (nouvellemonture == false && anciennemonture == true && MontureClass.StatutVente == false)
                    {
                        //   SelectionProduit cl = new SelectionProduit(proxy, memberuser, callback, 8, MontureClass, 0);
                        selectProduitCat cl = new selectProduitCat(proxy, memberuser, callback, 8, MontureClass, 0, Clientvv);

                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }



        System.Int64 DoWork(string _numbers)
        {
            Random random = new Random();
            StringBuilder builder = new StringBuilder(13);
            string numberAsString = "";
            System.Int64 numberAsNumber = 0;

            for (var i = 0; i < 13; i++)
            {
                builder.Append(_numbers[random.Next(0, _numbers.Length)]);
            }

            numberAsString = builder.ToString();
            numberAsNumber = System.Int64.Parse(numberAsString);
            return numberAsNumber;
        }
        /*******************************/
     /*   public string AddOn(string chaine)
        {
            //  'V 1.0
            //  'Paramètres : une chaine de 2 ou 5 chiffres
            //  'Parameters : A 2 or 5 digits length string
            //  'Retour : * une chaine qui, affichée avec la police EAN13.TTF, donne le code barre supplementaire
            //  '         * une chaine vide si paramètre fourni incorrect
            //  'Return : * a string which give the add-on bar code when it is dispayed with EAN13.TTF font
            //  '         * an empty string if the supplied parameter is no good

            //  Dim i%, checksum%, first%, CodeBarre$, tableA As Boolean
            int i;
            //int first; - not used
            int checksum = 0;
            //string CodeBarre=""; - not used
            bool tableA;
            string AddOn = "";

            //  'Vérifier qu'il y a 2 ou 5 caractères
            //  'Check for 2 or 5 characters
            //  'Et que ce sont bien des chiffres
            //  'And it is digits
            if (Regex.IsMatch(chaine, "^\\d{2}$") || Regex.IsMatch(chaine, "^\\d{5}$"))
            {
                // Checksum calculation
                if (chaine.Length == 2)
                    checksum = 10 + Convert.ToInt32(chaine) % 4;
                else
                {
                    for (i = 0; i < 5; i += 2)
                    {
                        checksum += Convert.ToInt32(chaine.Substring(i, 1));
                    }
                    checksum = (checksum * 3 + Convert.ToInt32(chaine.Substring(1, 1)) * 9 + Convert.ToInt32(chaine.Substring(3, 1)) * 9) % 10;
                }
                AddOn = "[";

                for (i = 0; i < chaine.Length; i++)
                {
                    tableA = false;
                    switch (i)
                    {
                        case 0:
                            if ((checksum >= 4 && checksum <= 9) || checksum == 10 || checksum == 11) tableA = true;
                            break;
                        case 1:
                            if (checksum == 1 || checksum == 2 || checksum == 3 || checksum == 5 || checksum == 6
                                || checksum == 9 || checksum == 10 || checksum == 12) tableA = true;
                            break;
                        case 2:
                            if (checksum == 0 || checksum == 2 || checksum == 3 || checksum == 6
                                || checksum == 7 || checksum == 8) tableA = true;
                            break;
                        case 3:
                            if (checksum == 0 || checksum == 1 || checksum == 3 || checksum == 4
                                || checksum == 8 || checksum == 9) tableA = true;
                            break;
                        case 4:
                            if (checksum == 0 || checksum == 1 || checksum == 2 || checksum == 4
                                || checksum == 5 || checksum == 7) tableA = true;
                            break;
                    }
                    if (tableA)
                        AddOn += (char)(65 + Convert.ToInt32(chaine.Substring(i, 1)));
                    else
                        AddOn += (char)(75 + Convert.ToInt32(chaine.Substring(i, 1)));

                    if ((chaine.Length == 2 && i == 0) || (chaine.Length == 5 && i < 4)) AddOn += (char)(92); //Ajout du séparateur de caractère / Add character separator
                }
            }
            return AddOn;
        }

      */

       /*     public string EAN13(string chaine)
        {
            //V 1.0
            //Paramètres : une chaine de 12 chiffres
            //Parameters : a 12 digits length string
            //Retour : * une chaine qui, affichée avec la police EAN13.TTF, donne le code barre
            //         * une chaine vide si paramètre fourni incorrect
            //Return : * a string which give the bar code when it is dispayed with EAN13.TTF font
            //         * an empty string if the supplied parameter is no good
            int i;
            int first;
            int checksum = 0;
            string CodeBarre = "";
            bool tableA;

            //Vérifier qu'il y a 12 caractères
            //Check for 12 characters
            //Et que ce sont bien des chiffres
            //And they are really digits
            if (Regex.IsMatch(chaine, "^\\d{12}$"))
            {
                // Calcul de la clé de contrôle
                // Calculation of the checksum
                for (i = 1; i < 12; i += 2)
                {
                    System.Diagnostics.Debug.WriteLine(chaine.Substring(i, 1));
                    checksum += Convert.ToInt32(chaine.Substring(i, 1));
                }
                checksum *= 3;
                for (i = 0; i < 12; i += 2)
                {
                    checksum += Convert.ToInt32(chaine.Substring(i, 1));
                }

                chaine += (10 - checksum % 10) % 10;
                //Le premier chiffre est pris tel quel, le deuxième vient de la table A
                //The first digit is taken just as it is, the second one come from table A
                CodeBarre = chaine.Substring(0, 1) + (char)(65 + Convert.ToInt32(chaine.Substring(1, 1)));
                first = Convert.ToInt32(chaine.Substring(0, 1));
                for (i = 2; i <= 6; i++)
                {
                    tableA = false;
                    switch (i)
                    {
                        case 2:
                            if (first >= 0 && first <= 3) tableA = true;
                            break;
                        case 3:
                            if (first == 0 || first == 4 || first == 7 || first == 8) tableA = true;
                            break;
                        case 4:
                            if (first == 0 || first == 1 || first == 4 || first == 5 || first == 9) tableA = true;
                            break;
                        case 5:
                            if (first == 0 || first == 2 || first == 5 || first == 6 || first == 7) tableA = true;
                            break;
                        case 6:
                            if (first == 0 || first == 3 || first == 6 || first == 8 || first == 9) tableA = true;
                            break;
                    }

                    if (tableA)
                        CodeBarre += (char)(65 + Convert.ToInt32(chaine.Substring(i, 1)));
                    else
                        CodeBarre += (char)(75 + Convert.ToInt32(chaine.Substring(i, 1)));
                }
                CodeBarre += "*"; //Ajout séparateur central / Add middle separator

                for (i = 7; i <= 12; i++)
                {
                    CodeBarre += (char)(97 + Convert.ToInt32(chaine.Substring(i, 1)));
                }
                CodeBarre += "+"; //Ajout de la marque de fin / Add end mark
            }
            return CodeBarre;
        }
        */

        /******************************/
      /* private void ValiderMonture_Click(object sender, RoutedEventArgs e)
        {
            string _numbers = Convert.ToString(Clientvv.Id) + Convert.ToString(DateTime.Now.Year) + Convert.ToString(DateTime.Now.Month) + Convert.ToString(DateTime.Now.Day) + Convert.ToString(DateTime.Now.Hour) + Convert.ToString(DateTime.Now.Minute) + Convert.ToString(DateTime.Now.Second) + Convert.ToString(DateTime.Now.Millisecond);

            MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show((EAN13(DoWork(_numbers).ToString())), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

        }*/
      private void ValiderMonture_Click(object sender, RoutedEventArgs e)
          {
              try
              {
                  if (nouvellemonture == true && anciennemonture == false && memberuser.CreationDossierClient == true)
                  {

                      int interfacecreationmonture = 0;
                      bool creationmonture, creationcaisse, creationdepaiement = false;
                      bool creationsuppmonture1 = false;
                      bool creationsuppmonture2 = false;
                      bool creationsuppmonture3 = false;
                      bool creationsuppmonture4 = false;
                      MontureClass.StatutDevis = true;
                      MontureClass.StatutVente = false;
                      string _numbers = Convert.ToString(MontureClass.IdClient) +Convert.ToString(MontureClass.MontantTotal) + Convert.ToString(DateTime.Now.Year) + Convert.ToString(DateTime.Now.Month) + Convert.ToString(DateTime.Now.Day) + Convert.ToString(DateTime.Now.Hour) + Convert.ToString(DateTime.Now.Minute) + Convert.ToString(DateTime.Now.Second) + Convert.ToString(DateTime.Now.Millisecond);

                      //    MessageBoxResult resul0333 = Xceed.Wpf.Toolkit.MessageBox.Show(Convert.ToString(DoWork(_numbers)), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                      MontureClass.NCommande = Convert.ToString(DoWork(_numbers).ToString());

                      SVC.Depense CAISSEMONTURE;
                      SVC.Depeiment PAIEMENTMONTURE;
                      if (txtMontantTotalENC.Text != "")
                      {
                          if (Convert.ToDecimal(txtMontantTotalENC.Text) != 0)
                          {
                              MontureClass.Encaissé = Convert.ToDecimal(txtMontantTotalENC.Text);
                              MontureClass.Reste = MontureClass.MontantTotal - MontureClass.Encaissé;
                          }
                          else
                          {
                              MontureClass.Encaissé = 0;
                              MontureClass.Reste = MontureClass.MontantTotal - MontureClass.Encaissé;
                          }
                      }
                      else
                      {
                          MontureClass.Encaissé = 0;
                          MontureClass.Reste = MontureClass.MontantTotal - MontureClass.Encaissé;
                      }
                      MontureClass.Cle = Clientvv.Id + Clientvv.Raison + MontureClass.MontantTotal + DateTime.Now.TimeOfDay;
                      if (txtAccessoiresQuantite1.Text != "")
                      {
                          if (Convert.ToDecimal(txtAccessoiresQuantite1.Text) == 0)
                          {
                              MontureClass.Accessoires1 = "";
                              MontureClass.AccessoiresPrix1 = null;
                              txtAccessoires1.Text = "";
                              txtAccessoiresPrix1.Text = "0";
                          }
                      }
                      if (txtAccessoiresQuantite2.Text != "")
                      {
                          if (Convert.ToDecimal(txtAccessoiresQuantite2.Text) == 0)
                          {
                              MontureClass.Accessoires2 = "";
                              MontureClass.AccessoiresPrix2 = null;
                              txtAccessoires2.Text = "";
                              txtAccessoiresPrix2.Text = "0";
                          }
                      }
                      if (MontureClass.Encaissé != 0)
                      {

                          PAIEMENTMONTURE = new SVC.Depeiment
                          {
                              date = MontureClass.Date,
                              montant = Convert.ToDecimal(MontureClass.Encaissé),
                              paiem = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + MontureClass.RaisonClient + " date :" + MontureClass.Date,
                              oper = memberuser.Username,
                              dates = MontureClass.Dates,
                              banque = "Caisse",
                              nfact = MontureClass.Date + " " + MontureClass.RaisonClient,
                              amontant = Convert.ToDecimal(MontureClass.MontantTotal),
                              cle = MontureClass.Cle,
                              cp = MontureClass.Id,
                              Multiple = false,
                              CodeClient = MontureClass.IdClient,
                              RaisonClient = MontureClass.RaisonClient,

                          };
                          CAISSEMONTURE = new SVC.Depense
                          {
                              cle = MontureClass.Cle,
                              Auto = true,
                              Commentaires = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + MontureClass.RaisonClient + " " + " date :" + MontureClass.Date,
                              CompteDébité = "Caisse",
                              Crédit = true,
                              DateDebit = MontureClass.Date,
                              DateSaisie = MontureClass.Dates,
                              Débit = false,
                              ModePaiement = "ESPECES",
                              Montant = 0,
                              MontantCrédit = MontureClass.Encaissé,
                              NumCheque = Convert.ToString(MontureClass.Id),
                              Num_Facture = MontureClass.Date + " " + MontureClass.RaisonClient,
                              RubriqueComptable = "ESPECES VERSEMENT SUR: " + "Ordonnance optique" + " " + MontureClass.RaisonClient + " " + " date :" + MontureClass.Date,
                              Username = memberuser.Username,

                          };
                          interfacecreationmonture = 1;



                          using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                          {
                              if (listsupp1 != null)
                              {
                                  if (listsupp1.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp1)
                                      {
                                          creationsuppmonture1 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 1;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture1 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture1 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture1 = true;
                              }
                              if (listsupp2 != null)
                              {
                                  if (listsupp2.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp2)
                                      {
                                          creationsuppmonture1 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 2;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture1 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture2 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture2 = true;
                              }
                              if (listsupp3 != null)
                              {
                                  if (listsupp3.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp3)
                                      {
                                          creationsuppmonture3 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 3;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture3 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture3 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture3 = true;
                              }
                              if (listsupp4 != null)
                              {
                                  if (listsupp4.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp4)
                                      {
                                          creationsuppmonture4 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 4;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture4 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture4 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture4 = true;
                              }
                              proxy.InsertMonture(MontureClass);
                              creationmonture = true;


                              proxy.InsertDepense(CAISSEMONTURE);
                              creationcaisse = true;
                              proxy.InsertDepeiment(PAIEMENTMONTURE);
                              creationdepaiement = true;

                              if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                              {
                                  ts.Complete();
                              }
                          }
                          if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                          {
                              proxy.AjouterTransactionPaiementRefresh();
                              proxy.AjouterDepenseRefresh();
                              proxy.AjouterMontureRefresh(Clientvv.Id);
                              proxy.AjouterMontureSupplementRefresh(MontureClass.Cle);
                              GridMonture.IsEnabled = false;
                              GridMonture.DataContext = null;
                              montureversementzero = false;
                              MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                          }
                      }
                      else
                      {
                          // MessageBoxResult resul03s = Xceed.Wpf.Toolkit.MessageBox.Show("Im here", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                          using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                          {

                              if (listsupp1 != null)
                              {
                                  if (listsupp1.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp1)
                                      {
                                          creationsuppmonture1 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 1;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture1 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture1 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture1 = true;
                              }
                              if (listsupp2 != null)
                              {
                                  if (listsupp2.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp2)
                                      {
                                          creationsuppmonture1 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 2;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture1 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture2 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture2 = true;
                              }
                              if (listsupp3 != null)
                              {
                                  if (listsupp3.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp3)
                                      {
                                          creationsuppmonture3 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 3;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture3 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture3 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture3 = true;
                              }
                              if (listsupp4 != null)
                              {
                                  if (listsupp4.Count > 0)
                                  {
                                      foreach (var itemsupp in listsupp4)
                                      {
                                          creationsuppmonture4 = false;
                                          itemsupp.cle = MontureClass.Cle;
                                          itemsupp.interfaceMonture = 4;
                                          proxy.InsertMontureSupplement(itemsupp);
                                          creationsuppmonture4 = true;
                                      }
                                  }
                                  else
                                  {
                                      creationsuppmonture4 = true;
                                  }
                              }
                              else
                              {
                                  creationsuppmonture4 = true;
                              }
                              proxy.InsertMonture(MontureClass);
                              creationmonture = true;

                              if (creationmonture == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                              {
                                  ts.Complete();
                              }

                          }
                          if (creationmonture == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                          {
                              proxy.AjouterTransactionPaiementRefresh();
                              proxy.AjouterDepenseRefresh();
                              proxy.AjouterMontureRefresh(Clientvv.Id);
                              proxy.AjouterMontureSupplementRefresh(MontureClass.Cle);
                              GridMonture.IsEnabled = false;
                              GridMonture.DataContext = null;
                              montureversementzero = false;
                              MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                          }
                      }


                  }
                  else
                  {
                      if (nouvellemonture == false && anciennemonture == true && memberuser.ModificationDossierClient == true)
                      {
                          int interfacecreationmonture = 0;
                          bool creationmonture, creationcaisse, creationdepaiement = false;
                          bool creationsuppmonture1 = false;
                          bool creationsuppmonture2 = false;
                          bool creationsuppmonture3 = false;
                          bool creationsuppmonture4 = false;
                          // MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotalENC.Text);
                          SVC.Depense CAISSEMONTURE;
                          SVC.Depeiment PAIEMENTMONTURE;


                          if (txtMontantTotalENC.Text != "")
                          {
                              if (Convert.ToDecimal(txtMontantTotalENC.Text) != 0)
                              {
                                  MontureClass.Encaissé = Convert.ToDecimal(txtMontantTotalENC.Text);
                                  MontureClass.Reste = MontureClass.MontantTotal - MontureClass.Encaissé;
                              }
                              else
                              {
                                  MontureClass.Encaissé = 0;
                                  MontureClass.Reste = MontureClass.MontantTotal - MontureClass.Encaissé;
                              }

                          }
                          else
                          {
                              MontureClass.Encaissé = 0;
                              MontureClass.Reste = MontureClass.MontantTotal - MontureClass.Encaissé;
                          }
                          if (txtAccessoiresQuantite1.Text != "")
                          {
                              if (Convert.ToDecimal(txtAccessoiresQuantite1.Text) == 0)
                              {
                                  MontureClass.Accessoires1 = "";
                                  MontureClass.AccessoiresPrix1 = null;
                                  txtAccessoires1.Text = "";
                                  txtAccessoiresPrix1.Text = "0";
                              }
                          }
                          if (txtAccessoiresQuantite2.Text != "")
                          {
                              if (Convert.ToDecimal(txtAccessoiresQuantite2.Text) == 0)
                              {
                                  MontureClass.Accessoires2 = "";
                                  MontureClass.AccessoiresPrix2 = null;
                                  txtAccessoires2.Text = "";
                                  txtAccessoiresPrix2.Text = "0";
                              }
                          }
                          ///MontureCLass ==0 lors du chargement
                          if (montureversementzero == false)
                          {
                              //nouveau encaissement alors insertion
                              if (MontureClass.Encaissé != 0)
                              {
                                  PAIEMENTMONTURE = new SVC.Depeiment
                                  {
                                      date = MontureClass.Date,
                                      montant = Convert.ToDecimal(MontureClass.Encaissé),
                                      paiem = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + MontureClass.RaisonClient + " date :" + MontureClass.Date,
                                      oper = memberuser.Username,
                                      dates = MontureClass.Dates,
                                      banque = "Caisse",
                                      nfact = MontureClass.Date + " " + MontureClass.RaisonClient,
                                      amontant = Convert.ToDecimal(MontureClass.MontantTotal),
                                      cle = MontureClass.Cle,
                                      cp = MontureClass.Id,
                                      Multiple = false,
                                      CodeClient = MontureClass.IdClient,
                                      RaisonClient = MontureClass.RaisonClient,

                                  };
                                  CAISSEMONTURE = new SVC.Depense
                                  {
                                      cle = MontureClass.Cle,
                                      Auto = true,
                                      Commentaires = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + MontureClass.RaisonClient + " " + " date :" + MontureClass.Date,
                                      CompteDébité = "Caisse",
                                      Crédit = true,
                                      DateDebit = MontureClass.Date,
                                      DateSaisie = MontureClass.Dates,
                                      Débit = false,
                                      ModePaiement = "ESPECES",
                                      Montant = 0,
                                      MontantCrédit = MontureClass.Encaissé,
                                      NumCheque = Convert.ToString(MontureClass.Id),
                                      Num_Facture = MontureClass.Date + " " + MontureClass.RaisonClient,
                                      RubriqueComptable = "ESPECES VERSEMENT SUR: " + "Ordonnance optique" + " " + MontureClass.RaisonClient + " " + " date :" + MontureClass.Date,
                                      Username = memberuser.Username,

                                  };
                                  interfacecreationmonture = 1;
                                  using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                  {
                                      #region monturesupp
                                      if (listsupp1 != null)
                                      {
                                          if (listsupp1.Count() > 0)
                                          {
                                              foreach (var item in listsupp1)
                                              {
                                                  var existe = anciennelistsupp1.Any(n => n.Id == item.Id);
                                                  if (existe == false)
                                                  {
                                                      creationsuppmonture1 = false;
                                                      item.cle = MontureClass.Cle;
                                                      item.interfaceMonture = 1;
                                                      proxy.InsertMontureSupplement(item);
                                                      creationsuppmonture1 = true;
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture1 = false;
                                                      //item.CleSupplement = Supplement.VerresAssociés;
                                                      proxy.UpdateMontureSupplement(item);
                                                      creationsuppmonture1 = true;
                                                  }
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture1 = true;
                                          }
                                      }

                                      if (listsupp2 != null)
                                      {
                                          if (listsupp2.Count() > 0)
                                          {
                                              foreach (var item in listsupp2)
                                              {
                                                  var existe = anciennelistsupp2.Any(n => n.Id == item.Id);
                                                  if (existe == false)
                                                  {
                                                      creationsuppmonture2 = false;
                                                      item.cle = MontureClass.Cle;
                                                      item.interfaceMonture = 2;
                                                      proxy.InsertMontureSupplement(item);
                                                      creationsuppmonture2 = true;
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture2 = false;
                                                      //item.CleSupplement = Supplement.VerresAssociés;
                                                      proxy.UpdateMontureSupplement(item);
                                                      creationsuppmonture2 = true;
                                                  }
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture2 = true;
                                          }
                                      }
                                      if (listsupp3 != null)
                                      {
                                          if (listsupp3.Count() > 0)
                                          {
                                              foreach (var item in listsupp3)
                                              {
                                                  var existe = anciennelistsupp3.Any(n => n.Id == item.Id);
                                                  if (existe == false)
                                                  {
                                                      creationsuppmonture3 = false;
                                                      item.cle = MontureClass.Cle;
                                                      item.interfaceMonture = 3;
                                                      proxy.InsertMontureSupplement(item);
                                                      creationsuppmonture3 = true;
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture3 = false;
                                                      //item.CleSupplement = Supplement.VerresAssociés;
                                                      proxy.UpdateMontureSupplement(item);
                                                      creationsuppmonture3 = true;
                                                  }
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture3 = true;
                                          }
                                      }
                                      if (listsupp4 != null)
                                      {
                                          if (listsupp4.Count() > 0)
                                          {
                                              foreach (var item in listsupp4)
                                              {
                                                  var existe = anciennelistsupp4.Any(n => n.Id == item.Id);
                                                  if (existe == false)
                                                  {
                                                      creationsuppmonture4 = false;
                                                      item.cle = MontureClass.Cle;
                                                      item.interfaceMonture = 4;
                                                      proxy.InsertMontureSupplement(item);
                                                      creationsuppmonture4 = true;
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture4 = false;
                                                      //item.CleSupplement = Supplement.VerresAssociés;
                                                      proxy.UpdateMontureSupplement(item);
                                                      creationsuppmonture4 = true;
                                                  }
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture4 = true;
                                          }
                                      }
                                      #endregion
                                      proxy.UpdateMonture(MontureClass);
                                      creationmonture = true;


                                      proxy.InsertDepense(CAISSEMONTURE);
                                      creationcaisse = true;
                                      proxy.InsertDepeiment(PAIEMENTMONTURE);
                                      creationdepaiement = true;

                                      if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                      {
                                          ts.Complete();
                                      }
                                  }
                                  if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                  {
                                      proxy.AjouterTransactionPaiementRefresh();
                                      proxy.AjouterDepenseRefresh();
                                      proxy.AjouterMontureRefresh(Clientvv.Id);
                                      GridMonture.IsEnabled = false;
                                      GridMonture.DataContext = null;
                                      montureversementzero = false;

                                      MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                  }
                              }
                              else
                              { 
                                  if (MontureClass.Encaissé == 0)
                                  {
                                      using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                      {
                                          #region monturesupp

                                          if (listsupp1 != null)
                                          {
                                              if (listsupp1.Count() > 0)
                                              {
                                                  foreach (var item in listsupp1)
                                                  {
                                                      var existe = anciennelistsupp1.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture1 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 1;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture1 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture1 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture1 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture1 = true;
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture1 = true;

                                          }

                                          if (listsupp2 != null)
                                          {
                                              if (listsupp2.Count() > 0)
                                              {
                                                  foreach (var item in listsupp2)
                                                  {
                                                      var existe = anciennelistsupp2.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture2 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 2;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture2 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture2 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture2 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture2 = true;
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture2 = true;

                                          }
                                          if (listsupp3 != null)
                                          {
                                              if (listsupp3.Count() > 0)
                                              {
                                                  foreach (var item in listsupp3)
                                                  {
                                                      var existe = anciennelistsupp3.Any(n => n.Id == item.Id);

                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture3 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 3;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture3 = true;

                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture3 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture3 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture3 = true;
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture3 = true;

                                          }
                                          if (listsupp4 != null)
                                          {
                                              if (listsupp4.Count() > 0)
                                              {
                                                  foreach (var item in listsupp4)
                                                  {
                                                      var existe = anciennelistsupp4.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture4 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 4;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture4 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture4 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture4 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture4 = true;
                                              }
                                          }
                                          else
                                          {
                                              creationsuppmonture4 = true;

                                          }
                                          #endregion

                                          proxy.UpdateMonture(MontureClass);
                                          creationmonture = true;
                                          if (creationmonture == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                          {
                                              ts.Complete();
                                          }
                                      }
                                      if (creationmonture == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                      {
                                          proxy.AjouterTransactionPaiementRefresh();
                                          proxy.AjouterDepenseRefresh();
                                          proxy.AjouterMontureRefresh(Clientvv.Id);
                                          GridMonture.IsEnabled = false;
                                          GridMonture.DataContext = null;
                                          montureversementzero = false;
                                          MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                      }
                                  }

                              }
                          }
                          else
                          {
                              if (montureversementzero == true)
                              {
                                  //lors du chargement montureclass!=0 apres montureclass==0 
                                  //suppression des ecritures dans depense et depaiement
                                  if (MontureClass.Encaissé == 0)
                                  {
                                      CAISSEMONTURE = proxy.GetAllDepense().Where(n => n.cle == MontureClass.Cle).First();
                                      PAIEMENTMONTURE = proxy.GetAllDepeiment().Where(n => n.cle == MontureClass.Cle).First();
                                      using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                      {

                                          proxy.UpdateMonture(MontureClass);
                                          creationmonture = true;
                                          proxy.DeleteDepense(CAISSEMONTURE);
                                          creationcaisse = true;
                                          proxy.DeleteDepeiment(PAIEMENTMONTURE);
                                          creationdepaiement = true;
                                          #region monturesupplement
                                          if (listsupp1 != null)
                                          {
                                              if (listsupp1.Count() > 0)
                                              {
                                                  foreach (var item in listsupp1)
                                                  {
                                                      var existe = anciennelistsupp1.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture1 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 1;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture1 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture1 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture1 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture1 = true;
                                              }
                                          }

                                          if (listsupp2 != null)
                                          {
                                              if (listsupp2.Count() > 0)
                                              {
                                                  foreach (var item in listsupp2)
                                                  {
                                                      var existe = anciennelistsupp2.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture2 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 2;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture2 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture2 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture2 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture2 = true;
                                              }
                                          }
                                          if (listsupp3 != null)
                                          {
                                              if (listsupp3.Count() > 0)
                                              {
                                                  foreach (var item in listsupp3)
                                                  {
                                                      var existe = anciennelistsupp3.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture3 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 3;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture3 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture3 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture3 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture3 = true;
                                              }
                                          }
                                          if (listsupp4 != null)
                                          {
                                              if (listsupp4.Count() > 0)
                                              {
                                                  foreach (var item in listsupp4)
                                                  {
                                                      var existe = anciennelistsupp4.Any(n => n.Id == item.Id);
                                                      if (existe == false)
                                                      {
                                                          creationsuppmonture4 = false;
                                                          item.cle = MontureClass.Cle;
                                                          item.interfaceMonture = 4;
                                                          proxy.InsertMontureSupplement(item);
                                                          creationsuppmonture4 = true;
                                                      }
                                                      else
                                                      {
                                                          creationsuppmonture4 = false;
                                                          //item.CleSupplement = Supplement.VerresAssociés;
                                                          proxy.UpdateMontureSupplement(item);
                                                          creationsuppmonture4 = true;
                                                      }
                                                  }
                                              }
                                              else
                                              {
                                                  creationsuppmonture4 = true;
                                              }
                                          }
                                          #endregion
                                          if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                          {
                                              ts.Complete();
                                          }
                                      }
                                      if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                      {
                                          proxy.AjouterTransactionPaiementRefresh();
                                          proxy.AjouterDepenseRefresh();
                                          proxy.AjouterMontureRefresh(Clientvv.Id);
                                          GridMonture.IsEnabled = false;
                                          GridMonture.DataContext = null;
                                          montureversementzero = false;
                                          MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                      }
                                  }
                                  else
                                  {
                                      //lors du chargement montureclass!=0 apres montureclass!==0 
                                      //alors mise à jours des écritures dans depense et depaiement
                                      if (MontureClass.Encaissé != 0)
                                      {
                                          CAISSEMONTURE = proxy.GetAllDepense().Where(n => n.cle == MontureClass.Cle).First();
                                          CAISSEMONTURE.MontantCrédit = MontureClass.Encaissé;
                                          PAIEMENTMONTURE = proxy.GetAllDepeiment().Where(n => n.cle == MontureClass.Cle).First();
                                          PAIEMENTMONTURE.montant = Convert.ToDecimal(MontureClass.Encaissé);
                                          using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                          {
                                              #region monturesupplement
                                              if (listsupp1 != null)
                                              {
                                                  if (listsupp1.Count() > 0)
                                                  {
                                                      foreach (var item in listsupp1)
                                                      {
                                                          var existe = anciennelistsupp1.Any(n => n.Id == item.Id);
                                                          if (existe == false)
                                                          {
                                                              creationsuppmonture1 = false;
                                                              item.cle = MontureClass.Cle;
                                                              item.interfaceMonture = 1;
                                                              proxy.InsertMontureSupplement(item);
                                                              creationsuppmonture1 = true;
                                                          }
                                                          else
                                                          {
                                                              creationsuppmonture1 = false;
                                                              //item.CleSupplement = Supplement.VerresAssociés;
                                                              proxy.UpdateMontureSupplement(item);
                                                              creationsuppmonture1 = true;
                                                          }
                                                      }
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture1 = true;
                                                  }
                                              }

                                              if (listsupp2 != null)
                                              {
                                                  if (listsupp2.Count() > 0)
                                                  {
                                                      foreach (var item in listsupp2)
                                                      {
                                                          var existe = anciennelistsupp2.Any(n => n.Id == item.Id);
                                                          if (existe == false)
                                                          {
                                                              creationsuppmonture2 = false;
                                                              item.cle = MontureClass.Cle;
                                                              item.interfaceMonture = 2;
                                                              proxy.InsertMontureSupplement(item);
                                                              creationsuppmonture2 = true;
                                                          }
                                                          else
                                                          {
                                                              creationsuppmonture2 = false;
                                                              //item.CleSupplement = Supplement.VerresAssociés;
                                                              proxy.UpdateMontureSupplement(item);
                                                              creationsuppmonture2 = true;
                                                          }
                                                      }
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture2 = true;
                                                  }
                                              }
                                              if (listsupp3 != null)
                                              {
                                                  if (listsupp3.Count() > 0)
                                                  {
                                                      foreach (var item in listsupp3)
                                                      {
                                                          var existe = anciennelistsupp3.Any(n => n.Id == item.Id);
                                                          if (existe == false)
                                                          {
                                                              creationsuppmonture3 = false;
                                                              item.cle = MontureClass.Cle;
                                                              item.interfaceMonture = 3;
                                                              proxy.InsertMontureSupplement(item);
                                                              creationsuppmonture3 = true;
                                                          }
                                                          else
                                                          {
                                                              creationsuppmonture3 = false;
                                                              //item.CleSupplement = Supplement.VerresAssociés;
                                                              proxy.UpdateMontureSupplement(item);
                                                              creationsuppmonture3 = true;
                                                          }
                                                      }
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture3 = true;
                                                  }
                                              }
                                              if (listsupp4 != null)
                                              {
                                                  if (listsupp4.Count() > 0)
                                                  {
                                                      foreach (var item in listsupp4)
                                                      {
                                                          var existe = anciennelistsupp4.Any(n => n.Id == item.Id);
                                                          if (existe == false)
                                                          {
                                                              creationsuppmonture4 = false;
                                                              item.cle = MontureClass.Cle;
                                                              item.interfaceMonture = 4;
                                                              proxy.InsertMontureSupplement(item);
                                                              creationsuppmonture4 = true;
                                                          }
                                                          else
                                                          {
                                                              creationsuppmonture4 = false;
                                                              //item.CleSupplement = Supplement.VerresAssociés;
                                                              proxy.UpdateMontureSupplement(item);
                                                              creationsuppmonture4 = true;
                                                          }
                                                      }
                                                  }
                                                  else
                                                  {
                                                      creationsuppmonture4 = true;
                                                  }
                                              }
                                              #endregion
                                              proxy.UpdateMonture(MontureClass);
                                              creationmonture = true;


                                              proxy.UpdateDepense(CAISSEMONTURE);
                                              creationcaisse = true;
                                              proxy.UpdateDepeiment(PAIEMENTMONTURE);
                                              creationdepaiement = true;

                                              if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                              {
                                                  ts.Complete();
                                              }
                                          }
                                          if (creationcaisse == true && creationmonture == true && creationdepaiement == true && creationsuppmonture1 == true && creationsuppmonture2 == true && creationsuppmonture3 == true && creationsuppmonture4 == true)
                                          {
                                              proxy.AjouterTransactionPaiementRefresh();
                                              proxy.AjouterDepenseRefresh();
                                              proxy.AjouterMontureRefresh(Clientvv.Id);
                                              GridMonture.IsEnabled = false;
                                              GridMonture.DataContext = null;
                                              montureversementzero = false;
                                              MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                          }
                                      }
                                  }
                              }
                          }




                      }
                  }
              }
              catch (Exception ex)
              {
                  MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
              }
          }
        
        private void MontureDatagrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (MontureDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    MontureClass = MontureDatagrid.SelectedItem as SVC.Monture;
                    GridMonture.DataContext = MontureClass;
                    GridMonture.IsEnabled = true;
                    nouvellemonture = false;
                    anciennemonture = true;
                    if (MontureClass.StatutVente == false)
                    {
                        btnvente.IsEnabled = true;
                        txtMontantTotalENC.IsEnabled = true;
                    }
                    else
                    {
                        btnvente.IsEnabled = false;
                        txtMontantTotalENC.IsEnabled = false;
                    }

                    if (MontureClass.StatutDevis == true && MontureClass.StatutVente == false)
                    {
                        TxtStatutGlobal.Content = "Devis";

                        TxtStatutGlobal.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    }
                    else
                    {
                        if (MontureClass.StatutDevis == true && MontureClass.StatutVente == true)
                        {
                            TxtStatutGlobal.Content = "Vente validée";
                            TxtStatutGlobal.Background = System.Windows.Media.Brushes.LightGreen;
                        }
                    }


                    if (MontureClass.DroiteFleshHaut == true)
                    {
                        txtDroiteFleshHaut.Visibility = Visibility.Visible;
                        DroiteFleshBas.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtDroiteFleshHaut.Visibility = Visibility.Collapsed;
                        DroiteFleshBas.Visibility = Visibility.Visible;
                    }

                    if (MontureClass.DroiteFleshDroite == true)
                    {
                        txtDroiteFleshDroite.Visibility = Visibility.Visible;
                        txtDroiteFleshGauche.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtDroiteFleshDroite.Visibility = Visibility.Collapsed;
                        txtDroiteFleshGauche.Visibility = Visibility.Visible;
                    }

                    if (MontureClass.GaucheFleshHaut == true)
                    {
                        txtGaucheFleshHaut.Visibility = Visibility.Visible;
                        txtGaucheFleshBas.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtGaucheFleshHaut.Visibility = Visibility.Collapsed;
                        txtGaucheFleshBas.Visibility = Visibility.Visible;
                    }

                    if (MontureClass.GaucheFleshDroite == true)
                    {
                        txtGaucheFleshDroite.Visibility = Visibility.Visible;
                        txtGaucheFleshGauche.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        txtGaucheFleshDroite.Visibility = Visibility.Collapsed;
                        txtGaucheFleshGauche.Visibility = Visibility.Visible;
                    }
                    /**************************************************************/
                    if (MontureClass.Loin == true && MontureClass.Pres == true)
                    {

                        ODLOIN.Text = "Loin";
                        ODITERM.Text = "Interm.";
                        ODPRES.Text = "Près";
                        OGLOIN.Text = "Loin";
                        OGINTERM.Text = "Interm.";
                        OGPRES.Text = "Près";
                        MonturePresLabel.Text = "PRES";
                        MontureLoinLabel.Text = "LOIN";


                    }
                    else
                    {
                        if (MontureClass.Loin == true && MontureClass.Pres == false)
                        {


                            ODLOIN.Text = "Loin";
                            ODITERM.Text = "Loin";
                            ODPRES.Text = "Près";
                            OGLOIN.Text = "Loin";
                            OGINTERM.Text = "Loin";
                            OGPRES.Text = "Près";
                            MonturePresLabel.Text = "LOIN";
                            MontureLoinLabel.Text = "LOIN";


                        }
                        else
                        {
                            if (MontureClass.Loin == false && MontureClass.Pres == true)
                            {
                                ODLOIN.Text = "Loin";
                                ODITERM.Text = "Près";
                                ODPRES.Text = "Près";
                                OGLOIN.Text = "Loin";
                                OGINTERM.Text = "Près";
                                OGPRES.Text = "Près";
                                MonturePresLabel.Text = "PRES";
                                MontureLoinLabel.Text = "PRES";
                            }
                        }
                    }
                    if (MontureClass.Encaissé != 0)
                    {
                        montureversementzero = true;
                    }
                    else
                    {
                        montureversementzero = false;
                    }
                    if (MontureClass.StatutDevis == true && MontureClass.StatutVente == false)
                    {
                        TxtStatutGlobal.Content = "Devis";

                        TxtStatutGlobal.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    }
                    else
                    {
                        if (MontureClass.StatutDevis == true && MontureClass.StatutVente == true)
                        {
                            TxtStatutGlobal.Content = "Vente validée";
                            TxtStatutGlobal.Background = System.Windows.Media.Brushes.LightGreen;
                        }
                    }

                }
                listsupp1 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 1).ToList();
                listsupp2 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 2).ToList();
                listsupp3 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 3).ToList();
                listsupp4 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 4).ToList();
                anciennelistsupp1 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 1).ToList();
                anciennelistsupp2 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 2).ToList();
                anciennelistsupp3 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 3).ToList();
                anciennelistsupp4 = proxy.GetAllMontureSupplementbycle(MontureClass.Cle).Where(n => n.interfaceMonture == 4).ToList();
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnNewLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    LentilleClass = new SVC.LentilleClient
                    {
                        Date = DateTime.Now,
                        UserName = memberuser.Username,
                        Délivre = false,
                        RaisonClient = Clientvv.Raison,
                        StatutDevis = true,
                        StatutVente = false,
                        IdClient = Clientvv.Id,
                        DroiteCylindrePlus = true,
                        DroiteCylindreMoin = false,
                        GaucheCylindreMoin = false,
                        GaucheCylindrePlus = true,
                        AccessoiresQuantite1 = 0,
                        AccessoiresQuantite2 = 0,
                        AccessoiresPrix1 = 0,
                        AccessoiresPrix2 = 0,
                        Encaissé = 0,
                        Reste = 0,
                        Dates = DateTime.Now,
                        DroitQuantiteLentille = 0,
                        DroitPrixLentille = 0,
                        GauchePrixLentille = 0,
                        GaucheQuantiteLentille = 0,
                        MontantTotal = 0,
                        TypeDevisite = "Inconnu",
                        Dioptrie = true,
                        mm = false,
                        Remise=0,
                    };
                    GridLentille.DataContext = LentilleClass;
                    GridLentille.IsEnabled = true;
                    TxtStatutGlobalLentille.Content = "Devis";
                    TxtStatutGlobalLentille.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    nouvellelentille = true;
                    anciennelentille = false;
                    txtMontantTotalENCLentille.IsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void btnTransposerLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                /********************GroiteLoin*************************************/
                if (txtAncienSphereDroite.Text != "" && txtAncienCylindreDroite.Text != "" && txtAncienAxeDroite.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtAncienSphereDroite.Text != "")
                    {
                        if (decimal.TryParse(txtAncienSphereDroite.Text, out sphere))
                            sphere = Convert.ToDecimal(txtAncienSphereDroite.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtAncienSphereDroite.Text = "";
                        sphere = 0;
                    }
                    if (txtAncienCylindreDroite.Text != "")
                    {
                        if (decimal.TryParse(txtAncienCylindreDroite.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtAncienCylindreDroite.Text);
                            if (cylindre > 0)
                            {
                                LentilleClass.DroiteCylindrePlus = true;
                                LentilleClass.DroiteCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    LentilleClass.DroiteCylindrePlus =false;
                                    LentilleClass.DroiteCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtAncienCylindreDroite.Text = "";
                        cylindre = 0;
                    }

                    if (txtAncienAxeDroite.Text != "")
                    {
                        if (int.TryParse(txtAncienAxeDroite.Text, out axe))
                            axe = Convert.ToInt16(txtAncienAxeDroite.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtAncienAxeDroite.Text = "";
                        axe = 0;
                    }
                    txtAncienCylindreDroite.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtAncienSphereDroite.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (LentilleClass.DroiteCylindrePlus == true && LentilleClass.DroiteCylindreMoin == false)
                    {
                        txtAncienAxeDroite.Text = (axe + 90).ToString();
                        LentilleClass.DroiteCylindrePlus = false;
                        LentilleClass.DroiteCylindreMoin = true;

                    }
                    else
                    {
                        if (LentilleClass.DroiteCylindrePlus == false && LentilleClass.DroiteCylindreMoin == true)
                        {
                            txtAncienAxeDroite.Text = (axe - 90).ToString();
                            LentilleClass.DroiteCylindrePlus = true;
                            LentilleClass.DroiteCylindreMoin = false;
                        }
                    }
                } /********************GroiteIntermediaire*************************************/
                if (txtNouvSphereDroite.Text != "" && txtNouvCylindreDroite.Text != "" && txtNouvAxeDroite.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtNouvSphereDroite.Text != "")
                    {
                        if (decimal.TryParse(txtNouvSphereDroite.Text, out sphere))
                            sphere = Convert.ToDecimal(txtNouvSphereDroite.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtNouvSphereDroite.Text = "";
                        sphere = 0;
                    }
                    if (txtNouvCylindreDroite.Text != "")
                    {
                        if (decimal.TryParse(txtNouvCylindreDroite.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtNouvCylindreDroite.Text);
                            if (cylindre > 0)
                            {
                                LentilleClass.DroiteCylindrePlus = true;
                                LentilleClass.DroiteCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    LentilleClass.DroiteCylindrePlus = false;
                                    LentilleClass.DroiteCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtNouvCylindreDroite.Text = "";
                        cylindre = 0;
                    }

                    if (txtNouvAxeDroite.Text != "")
                    {
                        if (int.TryParse(txtNouvAxeDroite.Text, out axe))
                            axe = Convert.ToInt16(txtNouvAxeDroite.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtNouvAxeDroite.Text = "";
                        axe = 0;
                    }
                    txtNouvCylindreDroite.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtNouvSphereDroite.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (LentilleClass.DroiteCylindrePlus == true && LentilleClass.DroiteCylindreMoin == false)
                    {
                        txtNouvAxeDroite.Text = (axe + 90).ToString();
                        LentilleClass.DroiteCylindrePlus = false;
                        LentilleClass.DroiteCylindreMoin = true;

                    }
                    else
                    {
                        if (LentilleClass.DroiteCylindrePlus == false && LentilleClass.DroiteCylindreMoin == true)
                        {
                            txtNouvAxeDroite.Text = (axe - 90).ToString();
                            LentilleClass.DroiteCylindrePlus = true;
                            LentilleClass.DroiteCylindreMoin = false;
                        }
                    }
                }
                /********************GroitePres*************************************/
                if (txtLentilleSphereDroite.Text != "" && txtLentilleCylindreDroite.Text != "" && txtLentilleAxeDroite.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtLentilleSphereDroite.Text != "")
                    {
                        if (decimal.TryParse(txtLentilleSphereDroite.Text, out sphere))
                            sphere = Convert.ToDecimal(txtLentilleSphereDroite.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtLentilleSphereDroite.Text = "";
                        sphere = 0;
                    }
                    if (txtLentilleCylindreDroite.Text != "")
                    {
                        if (decimal.TryParse(txtLentilleCylindreDroite.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtLentilleCylindreDroite.Text);
                            if (cylindre > 0)
                            {
                                LentilleClass.DroiteCylindrePlus = true;
                                LentilleClass.DroiteCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    LentilleClass.DroiteCylindrePlus = false;
                                    LentilleClass.DroiteCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtLentilleCylindreDroite.Text = "";
                        cylindre = 0;
                    }

                    if (txtLentilleAxeDroite.Text != "")
                    {
                        if (int.TryParse(txtLentilleAxeDroite.Text, out axe))
                            axe = Convert.ToInt16(txtLentilleAxeDroite.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtLentilleAxeDroite.Text = "";
                        axe = 0;
                    }
                    txtLentilleCylindreDroite.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtLentilleSphereDroite.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (LentilleClass.DroiteCylindrePlus == true && LentilleClass.DroiteCylindreMoin == false)
                    {
                        txtLentilleAxeDroite.Text = (axe + 90).ToString();
                        LentilleClass.DroiteCylindrePlus = false;
                        LentilleClass.DroiteCylindreMoin = true;

                    }
                    else
                    {
                        if (LentilleClass.DroiteCylindrePlus == false && LentilleClass.DroiteCylindreMoin == true)
                        {
                            txtLentilleAxeDroite.Text = (axe - 90).ToString();
                            LentilleClass.DroiteCylindrePlus = true;
                            LentilleClass.DroiteCylindreMoin = false;
                        }
                    }
                }
                /********************GaucheLoin*************************************/
                if (txtAncienSphereGauche.Text != "" && txtAncienCylindreGauche.Text != "" && txtAncienAxeGauche.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtAncienSphereGauche.Text != "")
                    {
                        if (decimal.TryParse(txtAncienSphereGauche.Text, out sphere))
                            sphere = Convert.ToDecimal(txtAncienSphereGauche.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtAncienSphereGauche.Text = "";
                        sphere = 0;
                    }
                    if (txtAncienCylindreGauche.Text != "")
                    {
                        if (decimal.TryParse(txtAncienCylindreGauche.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtAncienCylindreGauche.Text);
                            if (cylindre > 0)
                            {
                                LentilleClass.GaucheCylindrePlus = true;
                                LentilleClass.GaucheCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    LentilleClass.GaucheCylindrePlus = false;
                                    LentilleClass.GaucheCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtAncienCylindreGauche.Text = "";
                        cylindre = 0;
                    }

                    if (txtAncienAxeGauche.Text != "")
                    {
                        if (int.TryParse(txtAncienAxeGauche.Text, out axe))
                            axe = Convert.ToInt16(txtAncienAxeGauche.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtAncienAxeGauche.Text = "";
                        axe = 0;
                    }
                    txtAncienCylindreGauche.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtAncienSphereGauche.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (LentilleClass.GaucheCylindrePlus == true && LentilleClass.GaucheCylindreMoin == false)
                    {
                        txtAncienAxeGauche.Text = (axe + 90).ToString();
                        LentilleClass.GaucheCylindrePlus = false;
                        LentilleClass.GaucheCylindreMoin = true;

                    }
                    else
                    {
                        if (LentilleClass.GaucheCylindrePlus == false && LentilleClass.GaucheCylindreMoin == true)
                        {
                            txtAncienAxeGauche.Text = (axe - 90).ToString();
                            LentilleClass.GaucheCylindrePlus = true;
                            LentilleClass.GaucheCylindreMoin = false;
                        }
                    }
                }
                /***********************Nouv gauche***********************/
                if (txtNouvSphereGauche.Text != "" && txtNouvCylindreGauche.Text != "" && txtNouvAxeGauche.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtNouvSphereGauche.Text != "")
                    {
                        if (decimal.TryParse(txtNouvSphereGauche.Text, out sphere))
                            sphere = Convert.ToDecimal(txtNouvSphereGauche.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtNouvSphereGauche.Text = "";
                        sphere = 0;
                    }
                    if (txtNouvCylindreGauche.Text != "")
                    {
                        if (decimal.TryParse(txtNouvCylindreGauche.Text, out cylindre))
                        {

                            cylindre = Convert.ToDecimal(txtNouvCylindreGauche.Text);
                            if (cylindre > 0)
                            {
                                LentilleClass.GaucheCylindrePlus = true;
                                LentilleClass.GaucheCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    LentilleClass.GaucheCylindrePlus = false;
                                    LentilleClass.GaucheCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtNouvCylindreGauche.Text = "";
                        cylindre = 0;
                    }

                    if (txtNouvAxeGauche.Text != "")
                    {
                        if (int.TryParse(txtNouvAxeGauche.Text, out axe))
                            axe = Convert.ToInt16(txtNouvAxeGauche.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtNouvAxeGauche.Text = "";
                        axe = 0;
                    }
                    txtNouvCylindreGauche.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtNouvSphereGauche.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (LentilleClass.GaucheCylindrePlus == true && LentilleClass.GaucheCylindreMoin == false)
                    {
                        txtNouvAxeGauche.Text = (axe + 90).ToString();
                        LentilleClass.GaucheCylindrePlus = false;
                        LentilleClass.GaucheCylindreMoin = true;

                    }
                    else
                    {
                        if (LentilleClass.GaucheCylindrePlus == false && LentilleClass.GaucheCylindreMoin == true)
                        {
                            txtNouvAxeGauche.Text = (axe - 90).ToString();
                            LentilleClass.GaucheCylindrePlus = true;
                            LentilleClass.GaucheCylindreMoin = false;
                        }
                    }
                }
                /********************GauchePres*************************************/
                if (txtLentilleSphereGauche.Text != "" && txtLentilleCylindreGauche.Text != "" && txtLentilleAxeGauche.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtLentilleSphereGauche.Text != "")
                    {
                        if (decimal.TryParse(txtLentilleSphereGauche.Text, out sphere))
                            sphere = Convert.ToDecimal(txtLentilleSphereGauche.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtLentilleSphereGauche.Text = "";
                        sphere = 0;
                    }
                    if (txtLentilleCylindreGauche.Text != "")
                    {
                        if (decimal.TryParse(txtLentilleCylindreGauche.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtLentilleCylindreGauche.Text);
                            if (cylindre > 0)
                            {
                                LentilleClass.GaucheCylindrePlus = true;
                                LentilleClass.GaucheCylindreMoin = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    LentilleClass.GaucheCylindrePlus = false;
                                    LentilleClass.GaucheCylindreMoin = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtLentilleCylindreGauche.Text = "";
                        cylindre = 0;
                    }

                    if (txtLentilleAxeGauche.Text != "")
                    {
                        if (int.TryParse(txtLentilleAxeGauche.Text, out axe))
                            axe = Convert.ToInt16(txtLentilleAxeGauche.Text);
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtLentilleAxeGauche.Text = "";
                        axe = 0;
                    }
                    txtLentilleCylindreGauche.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtLentilleSphereGauche.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (LentilleClass.GaucheCylindrePlus == true && LentilleClass.GaucheCylindreMoin == false)
                    {
                        txtLentilleAxeGauche.Text = (axe + 90).ToString();
                        LentilleClass.GaucheCylindrePlus = false;
                        LentilleClass.GaucheCylindreMoin = true;

                    }
                    else
                    {
                        if (LentilleClass.GaucheCylindrePlus == false && LentilleClass.GaucheCylindreMoin == true)
                        {
                            txtLentilleAxeGauche.Text = (axe - 90).ToString();
                            LentilleClass.GaucheCylindrePlus = true;
                            LentilleClass.GaucheCylindreMoin = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnDiopmm_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (txtKeratometrieDroiteH.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieDroiteH.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(txtKeratometrieDroiteH.Text);
                        txtKeratometrieDroiteH.Text = (337.5 / KeratometrieDroiteH).ToString();
                    }
                    else
                    {
                        txtKeratometrieDroiteH.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (txtKeratometrieDroiteV.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieDroiteV.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(txtKeratometrieDroiteV.Text);
                        txtKeratometrieDroiteV.Text = (337.5 / KeratometrieDroiteV).ToString();
                    }
                    else
                    {
                        txtKeratometrieDroiteV.Text = "";
                    }
                }
                moyDroite = ((337.5 / KeratometrieDroiteV) + (337.5 / KeratometrieDroiteH)) / 2;
                if (moyDroite != 0)
                {
                    txtKeratometrieDroitemoy.Text = moyDroite.ToString();
                }
                else
                {
                    txtKeratometrieDroitemoy.Text = "";

                }

                Double KeratometrieGaucheH = 0;
                Double moyGauche = 0;
                if (txtKeratometrieGaucheH.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieGaucheH.Text, out KeratometrieGaucheH))
                    {
                        KeratometrieGaucheH = Convert.ToDouble(txtKeratometrieGaucheH.Text);
                        txtKeratometrieGaucheH.Text = (337.5 / KeratometrieGaucheH).ToString();
                    }
                    else
                    {
                        txtKeratometrieGaucheH.Text = "";
                    }
                }

                Double KeratometrieGaucheV = 0;

                if (txtKeratometrieGaucheV.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieGaucheV.Text, out KeratometrieGaucheV))
                    {
                        KeratometrieGaucheV = Convert.ToDouble(txtKeratometrieGaucheV.Text);
                        txtKeratometrieGaucheV.Text = (337.5 / KeratometrieGaucheV).ToString();
                    }
                    else
                    {
                        txtKeratometrieGaucheV.Text = "";
                    }
                }
                moyGauche = ((337.5 / KeratometrieGaucheV) + (337.5 / KeratometrieGaucheH)) / 2;
                if (moyGauche != 0)
                {
                    txtKeratometrieGauchemoy.Text = moyGauche.ToString();
                }
                else
                {
                    txtKeratometrieGauchemoy.Text = "";

                }
                if (LentilleClass.Dioptrie == true && LentilleClass.mm == false)
                {
                    LentilleClass.Dioptrie = false;
                    LentilleClass.mm = true;
                }
                else
                {
                    LentilleClass.Dioptrie = true;
                    LentilleClass.mm = false;
                }


            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void txtKeratometrieDroiteH_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (txtKeratometrieDroiteH.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieDroiteH.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(txtKeratometrieDroiteH.Text);
                    }
                    else
                    {
                        txtKeratometrieDroiteH.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (txtKeratometrieDroiteV.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieDroiteV.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(txtKeratometrieDroiteV.Text);
                    }
                    else
                    {
                        txtKeratometrieDroiteV.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    txtKeratometrieDroitemoy.Text = moyDroite.ToString();
                    LentilleClass.KeratometrieDroitemoy = moyDroite.ToString();
                }
                else
                {
                    txtKeratometrieDroitemoy.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void txtKeratometrieDroiteV_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (txtKeratometrieDroiteH.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieDroiteH.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(txtKeratometrieDroiteH.Text);
                    }
                    else
                    {
                        txtKeratometrieDroiteH.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (txtKeratometrieDroiteV.Text != "")
                {
                    if (Double.TryParse(txtKeratometrieDroiteV.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(txtKeratometrieDroiteV.Text);
                    }
                    else
                    {
                        txtKeratometrieDroiteV.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    txtKeratometrieDroitemoy.Text = moyDroite.ToString();
                    LentilleClass.KeratometrieDroitemoy = moyDroite.ToString();
                }
                else
                {
                    txtKeratometrieDroitemoy.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtKeratometrieGaucheH_TextChanged(object sender, TextChangedEventArgs e)
        {
            Double KeratometrieGaucheH = 0;
            Double moyGauche = 0;
            if (txtKeratometrieGaucheH.Text != "")
            {
                if (Double.TryParse(txtKeratometrieGaucheH.Text, out KeratometrieGaucheH))
                {
                    KeratometrieGaucheH = Convert.ToDouble(txtKeratometrieGaucheH.Text);
                }
                else
                {
                    txtKeratometrieGaucheH.Text = "";
                }
            }

            Double KeratometrieGaucheV = 0;

            if (txtKeratometrieGaucheV.Text != "")
            {
                if (Double.TryParse(txtKeratometrieGaucheV.Text, out KeratometrieGaucheV))
                {
                    KeratometrieGaucheV = Convert.ToDouble(txtKeratometrieGaucheV.Text);
                }
                else
                {
                    txtKeratometrieGaucheV.Text = "";
                }
            }
            moyGauche = (KeratometrieGaucheV + KeratometrieGaucheH) / 2;
            if (moyGauche != 0)
            {
                txtKeratometrieGauchemoy.Text = moyGauche.ToString();
                LentilleClass.KeratometrieGauchemoy = moyGauche.ToString();

            }
            else
            {
                txtKeratometrieGauchemoy.Text = "";

            }

        }

        private void txtKeratometrieGaucheV_TextChanged(object sender, TextChangedEventArgs e)
        {
            Double KeratometrieGaucheH = 0;
            Double moyGauche = 0;
            if (txtKeratometrieGaucheH.Text != "")
            {
                if (Double.TryParse(txtKeratometrieGaucheH.Text, out KeratometrieGaucheH))
                {
                    KeratometrieGaucheH = Convert.ToDouble(txtKeratometrieGaucheH.Text);
                }
                else
                {
                    txtKeratometrieGaucheH.Text = "";
                }
            }

            Double KeratometrieGaucheV = 0;

            if (txtKeratometrieGaucheV.Text != "")
            {
                if (Double.TryParse(txtKeratometrieGaucheV.Text, out KeratometrieGaucheV))
                {
                    KeratometrieGaucheV = Convert.ToDouble(txtKeratometrieGaucheV.Text);
                }
                else
                {
                    txtKeratometrieGaucheV.Text = "";
                }
            }
            moyGauche = (KeratometrieGaucheV + KeratometrieGaucheH) / 2;
            if (moyGauche != 0)
            {
                txtKeratometrieGauchemoy.Text = moyGauche.ToString();
                LentilleClass.KeratometrieGauchemoy = moyGauche.ToString();
            }
            else
            {
                txtKeratometrieGauchemoy.Text = "";

            }
        }

        private void txtAccessoires1Lentille_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellelentille == true && anciennelentille == false)
                {
                    //   SelectionProduitLentille cl = new SelectionProduitLentille(proxy, memberuser, callback, 7, LentilleClass, 0);
                    SelectionProduitLentilleCat cl = new SelectionProduitLentilleCat(proxy, memberuser, callback, 7, LentilleClass, 0,Clientvv);

                    cl.Show();
                }
                else
                {
                    if (nouvellelentille == false && anciennelentille == true && LentilleClass.StatutVente == false)
                    {
                        // SelectionProduitLentille cl = new SelectionProduitLentille(proxy, memberuser, callback, 7, LentilleClass, 0);
                        SelectionProduitLentilleCat cl = new SelectionProduitLentilleCat(proxy, memberuser, callback, 7, LentilleClass, 0, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoires2Lentille_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellelentille == true && anciennelentille == false)
                {
                    //  SelectionProduitLentille cl = new SelectionProduitLentille(proxy, memberuser, callback, 8, LentilleClass, 0);
                    SelectionProduitLentilleCat cl = new SelectionProduitLentilleCat(proxy, memberuser, callback, 8, LentilleClass, 0, Clientvv);
                    cl.Show();
                }
                else
                {
                    if (nouvellelentille == false && anciennelentille == true && LentilleClass.StatutVente == false)
                    {
                        //SelectionProduitLentille cl = new SelectionProduitLentille(proxy, memberuser, callback, 8, LentilleClass, 0);
                        SelectionProduitLentilleCat cl = new SelectionProduitLentilleCat(proxy, memberuser, callback,8, LentilleClass, 0, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroiteLentilleDesignation_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellelentille == true && anciennelentille == false)
                {
                    SelectionLentille cl = new SelectionLentille(proxy, memberuser, callback, 1, LentilleClass, 0, Clientvv);
                    cl.Show();
                }
                else
                {
                    if (nouvellelentille == false && anciennelentille == true && LentilleClass.StatutVente == false)
                    {
                        SelectionLentille cl = new SelectionLentille(proxy, memberuser, callback, 1, LentilleClass, 1, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGaucheLentilleDesignation_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (nouvellelentille == true && anciennelentille == false)
                {
                    SelectionLentille cl = new SelectionLentille(proxy, memberuser, callback, 2, LentilleClass, 0, Clientvv);
                    cl.Show();
                }
                else
                {
                    if (nouvellelentille == false && anciennelentille == true && LentilleClass.StatutVente == false)
                    {
                        SelectionLentille cl = new SelectionLentille(proxy, memberuser, callback, 2, LentilleClass, 1, Clientvv);
                        cl.Show();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroitPrixLentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteLentilleDroite, QuantiteLentilleGauche, PrixDroite, PrixGauche, PrixTotal = 0;
                if (txtDroitQuantiteLentille.Text != "")
                {
                    QuantiteLentilleDroite = Convert.ToDecimal(txtDroitQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleDroite = 0;
                }
                if (txtDroitPrixLentille.Text != "")
                {
                    PrixDroite = Convert.ToDecimal(txtDroitPrixLentille.Text);
                }
                else
                {
                    PrixDroite = 0;
                }
                /********************gauche************/
                if (txtGaucheQuantiteLentille.Text != "")
                {
                    QuantiteLentilleGauche = Convert.ToDecimal(txtGaucheQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleGauche = 0;
                }
                if (txtGauchePrixLentille.Text != "")
                {
                    PrixGauche = Convert.ToDecimal(txtGauchePrixLentille.Text);
                }
                else
                {
                    PrixGauche = 0;
                }


                PrixTotal = (PrixDroite * QuantiteLentilleDroite) + (PrixGauche * QuantiteLentilleGauche);


                txtPrixTotalLentille.Text = (PrixTotal).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtDroitQuantiteLentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteLentilleDroite, QuantiteLentilleGauche, PrixDroite, PrixGauche, PrixTotal = 0;
                if (txtDroitQuantiteLentille.Text != "")
                {
                    QuantiteLentilleDroite = Convert.ToDecimal(txtDroitQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleDroite = 0;
                }
                if (txtDroitPrixLentille.Text != "")
                {
                    PrixDroite = Convert.ToDecimal(txtDroitPrixLentille.Text);
                }
                else
                {
                    PrixDroite = 0;
                }
                /********************gauche************/
                if (txtGaucheQuantiteLentille.Text != "")
                {
                    QuantiteLentilleGauche = Convert.ToDecimal(txtGaucheQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleGauche = 0;
                }
                if (txtGauchePrixLentille.Text != "")
                {
                    PrixGauche = Convert.ToDecimal(txtGauchePrixLentille.Text);
                }
                else
                {
                    PrixGauche = 0;
                }


                PrixTotal = (PrixDroite * QuantiteLentilleDroite) + (PrixGauche * QuantiteLentilleGauche);


                txtPrixTotalLentille.Text = (PrixTotal).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGauchePrixLentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteLentilleDroite, QuantiteLentilleGauche, PrixDroite, PrixGauche, PrixTotal = 0;
                if (txtDroitQuantiteLentille.Text != "")
                {
                    QuantiteLentilleDroite = Convert.ToDecimal(txtDroitQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleDroite = 0;
                }
                if (txtDroitPrixLentille.Text != "")
                {
                    PrixDroite = Convert.ToDecimal(txtDroitPrixLentille.Text);
                }
                else
                {
                    PrixDroite = 0;
                }
                /********************gauche************/
                if (txtGaucheQuantiteLentille.Text != "")
                {
                    QuantiteLentilleGauche = Convert.ToDecimal(txtGaucheQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleGauche = 0;
                }
                if (txtGauchePrixLentille.Text != "")
                {
                    PrixGauche = Convert.ToDecimal(txtGauchePrixLentille.Text);
                }
                else
                {
                    PrixGauche = 0;
                }


                PrixTotal = (PrixDroite * QuantiteLentilleDroite) + (PrixGauche * QuantiteLentilleGauche);


                txtPrixTotalLentille.Text = (PrixTotal).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtGaucheQuantiteLentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteLentilleDroite, QuantiteLentilleGauche, PrixDroite, PrixGauche, PrixTotal = 0;
                if (txtDroitQuantiteLentille.Text != "")
                {
                    QuantiteLentilleDroite = Convert.ToDecimal(txtDroitQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleDroite = 0;
                }
                if (txtDroitPrixLentille.Text != "")
                {
                    PrixDroite = Convert.ToDecimal(txtDroitPrixLentille.Text);
                }
                else
                {
                    PrixDroite = 0;
                }
                /********************gauche************/
                if (txtGaucheQuantiteLentille.Text != "")
                {
                    QuantiteLentilleGauche = Convert.ToDecimal(txtGaucheQuantiteLentille.Text);
                }
                else
                {
                    QuantiteLentilleGauche = 0;
                }
                if (txtGauchePrixLentille.Text != "")
                {
                    PrixGauche = Convert.ToDecimal(txtGauchePrixLentille.Text);
                }
                else
                {
                    PrixGauche = 0;
                }


                PrixTotal = (PrixDroite * QuantiteLentilleDroite) + (PrixGauche * QuantiteLentilleGauche);


                txtPrixTotalLentille.Text = (PrixTotal).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresQuantite1Lentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite1Lentille.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite1Lentille.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix1Lentille.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix1Lentille.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc1Lentille.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresPrix1Lentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite1Lentille.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite1Lentille.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix1Lentille.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix1Lentille.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc1Lentille.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresQuantite2Lentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite2Lentille.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite2Lentille.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix2Lentille.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix2Lentille.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc2Lentille.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtAccessoiresPrix2Lentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Decimal QuantiteAccessoire, Prix = 0;
                if (txtAccessoiresQuantite2Lentille.Text != "")
                {
                    QuantiteAccessoire = Convert.ToDecimal(txtAccessoiresQuantite2Lentille.Text);
                }
                else
                {
                    QuantiteAccessoire = 0;
                }
                if (txtAccessoiresPrix2Lentille.Text != "")
                {
                    Prix = Convert.ToDecimal(txtAccessoiresPrix2Lentille.Text);
                }
                else
                {
                    Prix = 0;
                }


                txtPrixTotalAcc2Lentille.Text = (QuantiteAccessoire * Prix).ToString();


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalLentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {

                Decimal PrixTotalLentille, PrixAccessoires1, PrixAccessoires2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLentille.Text != "")
                {
                    PrixTotalLentille = Convert.ToDecimal(txtPrixTotalLentille.Text);
                }
                else
                {
                    PrixTotalLentille = 0;
                }
                if (txtPrixTotalAcc1Lentille.Text != "")
                {
                    PrixAccessoires1 = Convert.ToDecimal(txtPrixTotalAcc1Lentille.Text);
                }
                else
                {
                    PrixAccessoires1 = 0;
                }
                if (txtPrixTotalAcc2Lentille.Text != "")
                {
                    PrixAccessoires2 = Convert.ToDecimal(txtPrixTotalAcc2Lentille.Text);
                }
                else
                {
                    PrixAccessoires2 = 0;
                }

                montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                if (!String.IsNullOrEmpty(txtRemiseLentille.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseLentille.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2 - remisemonture);
                        }
                        else
                        {
                            txtRemiseLentille.Text = "";
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                        }
                    }
                    else
                    {
                        txtRemiseLentille.Text = "";
                        montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseLentille.Text = "";
                }

                txtMontantTotalLentille.Text = (montanttotal).ToString();
                LentilleClass.MontantTotal = Convert.ToDecimal(txtMontantTotalLentille.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalAcc1Lentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {

                Decimal PrixTotalLentille, PrixAccessoires1, PrixAccessoires2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLentille.Text != "")
                {
                    PrixTotalLentille = Convert.ToDecimal(txtPrixTotalLentille.Text);
                }
                else
                {
                    PrixTotalLentille = 0;
                }
                if (txtPrixTotalAcc1Lentille.Text != "")
                {
                    PrixAccessoires1 = Convert.ToDecimal(txtPrixTotalAcc1Lentille.Text);
                }
                else
                {
                    PrixAccessoires1 = 0;
                }
                if (txtPrixTotalAcc2Lentille.Text != "")
                {
                    PrixAccessoires2 = Convert.ToDecimal(txtPrixTotalAcc2Lentille.Text);
                }
                else
                {
                    PrixAccessoires2 = 0;
                }

                montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                if (!String.IsNullOrEmpty(txtRemiseLentille.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseLentille.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2 - remisemonture);
                        }
                        else
                        {
                            txtRemiseLentille.Text = "";
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                        }
                    }
                    else
                    {
                        txtRemiseLentille.Text = "";
                        montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseLentille.Text = "";
                }

                txtMontantTotalLentille.Text = (montanttotal).ToString();
                LentilleClass.MontantTotal = Convert.ToDecimal(txtMontantTotalLentille.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtPrixTotalAcc2Lentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {

                Decimal PrixTotalLentille, PrixAccessoires1, PrixAccessoires2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLentille.Text != "")
                {
                    PrixTotalLentille = Convert.ToDecimal(txtPrixTotalLentille.Text);
                }
                else
                {
                    PrixTotalLentille = 0;
                }
                if (txtPrixTotalAcc1Lentille.Text != "")
                {
                    PrixAccessoires1 = Convert.ToDecimal(txtPrixTotalAcc1Lentille.Text);
                }
                else
                {
                    PrixAccessoires1 = 0;
                }
                if (txtPrixTotalAcc2Lentille.Text != "")
                {
                    PrixAccessoires2 = Convert.ToDecimal(txtPrixTotalAcc2Lentille.Text);
                }
                else
                {
                    PrixAccessoires2 = 0;
                }

                montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                if (!String.IsNullOrEmpty(txtRemiseLentille.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseLentille.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2 - remisemonture);
                        }
                        else
                        {
                            txtRemiseLentille.Text = "";
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                        }
                    }
                    else
                    {
                        txtRemiseLentille.Text = "";
                        montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseLentille.Text = "";
                }

                txtMontantTotalLentille.Text = (montanttotal).ToString();
                LentilleClass.MontantTotal = Convert.ToDecimal(txtMontantTotalLentille.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void ValiderLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (nouvellelentille == true && anciennelentille == false && memberuser.CreationDossierClient == true)
                {
                    int interfacecreationmonture = 0;
                    bool creationmonture, creationcaisse, creationdepaiement = false;
                    LentilleClass.StatutDevis = true;
                    LentilleClass.StatutVente = false;
                    SVC.Depeiment PAIEMENTLentille;
                    // MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotalENC.Text);
                    SVC.Depense CAISSEMONTURE;
                    SVC.Depeiment PAIEMENTMONTURE;
                    SVC.Depense CAISSELentille;
                    string _numbers = Convert.ToString(LentilleClass.IdClient) +Convert.ToString(LentilleClass.MontantTotal)+ Convert.ToString(DateTime.Now.Year) + Convert.ToString(DateTime.Now.Month) + Convert.ToString(DateTime.Now.Day) + Convert.ToString(DateTime.Now.Hour) + Convert.ToString(DateTime.Now.Minute) + Convert.ToString(DateTime.Now.Second) + Convert.ToString(DateTime.Now.Millisecond);

                    //    MessageBoxResult resul0333 = Xceed.Wpf.Toolkit.MessageBox.Show(Convert.ToString(DoWork(_numbers)), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    LentilleClass.Ncommande = Convert.ToString(DoWork(_numbers));
                    if (txtMontantTotalENCLentille.Text != "")
                    {
                        if (Convert.ToDecimal(txtMontantTotalENCLentille.Text) != 0)
                        {
                            LentilleClass.Encaissé = Convert.ToDecimal(txtMontantTotalENCLentille.Text);
                            LentilleClass.Reste = LentilleClass.MontantTotal - LentilleClass.Encaissé;

                        }
                        else
                        {
                            LentilleClass.Encaissé = 0;
                            LentilleClass.Reste = LentilleClass.MontantTotal - LentilleClass.Encaissé;

                        }

                    }
                    else
                    {
                        LentilleClass.Encaissé = 0;
                        LentilleClass.Reste = LentilleClass.MontantTotal - LentilleClass.Encaissé;

                    }
                    LentilleClass.Cle = Clientvv.Id + Clientvv.Raison + LentilleClass.MontantTotal + DateTime.Now.TimeOfDay;
                    if (LentilleClass.AccessoiresQuantite1 == 0)
                    {
                        LentilleClass.Accessoires1 = "";
                        LentilleClass.AccessoiresQuantite1 = null;
                    }
                    if (LentilleClass.AccessoiresQuantite2 == 0)
                    {
                        LentilleClass.Accessoires2 = "";
                        LentilleClass.AccessoiresQuantite2 = null;
                    }
                    if (LentilleClass.DroitPrixLentille == 0)
                    {
                        LentilleClass.DroiteLentilleDesignation = "";
                        LentilleClass.DroitPrixLentille = null;
                    }
                    if (LentilleClass.GauchePrixLentille == 0)
                    {
                        LentilleClass.GaucheLentilleDesignation = "";
                        LentilleClass.GauchePrixLentille = null;
                    }
                    if (LentilleClass.Encaissé != 0)
                    {


                        PAIEMENTLentille = new SVC.Depeiment
                        {
                            date = LentilleClass.Date,
                            montant = Convert.ToDecimal(LentilleClass.Encaissé),
                            paiem = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + LentilleClass.RaisonClient + " date :" + LentilleClass.Date,
                            oper = memberuser.Username,
                            dates = LentilleClass.Dates,
                            banque = "Caisse",
                            nfact = LentilleClass.Date + " " + LentilleClass.RaisonClient,
                            amontant = Convert.ToDecimal(LentilleClass.MontantTotal),
                            cle = LentilleClass.Cle,
                            cp = LentilleClass.Id,
                            Multiple = false,
                            CodeClient = LentilleClass.IdClient,
                            RaisonClient = LentilleClass.RaisonClient,

                        };
                        CAISSELentille = new SVC.Depense
                        {
                            cle = LentilleClass.Cle,
                            Auto = true,
                            Commentaires = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + LentilleClass.RaisonClient + " " + " date :" + LentilleClass.Date,
                            CompteDébité = "Caisse",
                            Crédit = true,
                            DateDebit = LentilleClass.Date,
                            DateSaisie = LentilleClass.Dates,
                            Débit = false,
                            ModePaiement = "ESPECES",
                            Montant = 0,
                            MontantCrédit = LentilleClass.Encaissé,
                            NumCheque = Convert.ToString(LentilleClass.Id),
                            Num_Facture = LentilleClass.Date + " " + LentilleClass.RaisonClient,
                            RubriqueComptable = "ESPECES VERSEMENT SUR: " + "Ordonnance optique" + " " + LentilleClass.RaisonClient + " " + " date :" + LentilleClass.Date,
                            Username = memberuser.Username,

                        };
                        interfacecreationmonture = 1;


                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {

                            proxy.InsertLentilleClient(LentilleClass);
                            creationmonture = true;


                            proxy.InsertDepense(CAISSELentille);
                            creationcaisse = true;
                            proxy.InsertDepeiment(PAIEMENTLentille);
                            creationdepaiement = true;

                            if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                            {
                                ts.Complete();
                            }
                        }
                        if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                        {

                            proxy.AjouterTransactionPaiementRefresh();
                            proxy.AjouterDepenseRefresh();
                            proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                            GridLentille.IsEnabled = false;
                            GridLentille.DataContext = null;
                            LentilleClass = null;
                            Lentilleversementzero = false;
                            MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                        }
                    }
                    else
                    {
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {


                            proxy.InsertLentilleClient(LentilleClass);
                            ts.Complete();
                            creationmonture = true;







                        }
                        if (creationmonture == true)
                        {
                            proxy.AjouterTransactionPaiementRefresh();
                            proxy.AjouterDepenseRefresh();
                            proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                            GridLentille.IsEnabled = false;
                            GridLentille.DataContext = null;
                            LentilleClass = null;
                            MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }


                }
                else
                {
                    if (nouvellelentille == false && anciennelentille == true && memberuser.ModificationDossierClient == true)
                    {
                        //MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show("I was here", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                        int interfacecreationmonture = 0;
                        bool creationmonture, creationcaisse, creationdepaiement = false;

                        // MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotalENC.Text);
                        SVC.Depense CAISSEMONTURE;
                        SVC.Depeiment PAIEMENTMONTURE;

                        if (txtMontantTotalENCLentille.Text != "")
                        {
                            if (Convert.ToDecimal(txtMontantTotalENCLentille.Text) != 0)
                            {
                                LentilleClass.Encaissé = Convert.ToDecimal(txtMontantTotalENCLentille.Text);
                                LentilleClass.Reste = LentilleClass.MontantTotal - LentilleClass.Encaissé;

                            }
                            else
                            {
                                LentilleClass.Encaissé = 0;
                                LentilleClass.Reste = LentilleClass.MontantTotal - LentilleClass.Encaissé;

                            }

                        }
                        else
                        {
                            LentilleClass.Encaissé = 0;
                            LentilleClass.Reste = LentilleClass.MontantTotal - LentilleClass.Encaissé;

                        }



                        if (LentilleClass.AccessoiresQuantite1 == 0)
                        {
                            LentilleClass.Accessoires1 = "";
                            LentilleClass.AccessoiresQuantite1 = null;
                        }
                        if (LentilleClass.AccessoiresQuantite2 == 0)
                        {
                            LentilleClass.Accessoires2 = "";
                            LentilleClass.AccessoiresQuantite2 = null;
                        }
                        if (LentilleClass.DroitPrixLentille == 0)
                        {
                            LentilleClass.DroiteLentilleDesignation = "";
                            LentilleClass.DroitPrixLentille = null;
                        }
                        if (LentilleClass.GauchePrixLentille == 0)
                        {
                            LentilleClass.GaucheLentilleDesignation = "";
                            LentilleClass.GauchePrixLentille = null;
                        }


                        if (Lentilleversementzero == false)
                        {
                            if (LentilleClass.Encaissé != 0)
                            {


                                PAIEMENTMONTURE = new SVC.Depeiment
                                {
                                    date = LentilleClass.Date,
                                    montant = Convert.ToDecimal(LentilleClass.Encaissé),
                                    paiem = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + LentilleClass.RaisonClient + " date :" + LentilleClass.Date,
                                    oper = memberuser.Username,
                                    dates = LentilleClass.Dates,
                                    banque = "Caisse",
                                    nfact = LentilleClass.Date + " " + LentilleClass.RaisonClient,
                                    amontant = Convert.ToDecimal(LentilleClass.MontantTotal),
                                    cle = LentilleClass.Cle,
                                    cp = LentilleClass.Id,
                                    Multiple = false,
                                    CodeClient = LentilleClass.IdClient,
                                    RaisonClient = LentilleClass.RaisonClient,

                                };
                                CAISSEMONTURE = new SVC.Depense
                                {
                                    cle = LentilleClass.Cle,
                                    Auto = true,
                                    Commentaires = "ESPECES" + " VERSEMENT SUR :" + "Ordonnance optique" + " " + LentilleClass.RaisonClient + " " + " date :" + LentilleClass.Date,
                                    CompteDébité = "Caisse",
                                    Crédit = true,
                                    DateDebit = LentilleClass.Date,
                                    DateSaisie = LentilleClass.Dates,
                                    Débit = false,
                                    ModePaiement = "ESPECES",
                                    Montant = 0,
                                    MontantCrédit = LentilleClass.Encaissé,
                                    NumCheque = Convert.ToString(LentilleClass.Id),
                                    Num_Facture = LentilleClass.Date + " " + LentilleClass.RaisonClient,
                                    RubriqueComptable = "ESPECES VERSEMENT SUR: " + "Ordonnance optique" + " " + LentilleClass.RaisonClient + " " + " date :" + LentilleClass.Date,
                                    Username = memberuser.Username,

                                };
                                interfacecreationmonture = 1;
                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {

                                    proxy.UpdateLentilleClient(LentilleClass);
                                    creationmonture = true;


                                    proxy.InsertDepense(CAISSEMONTURE);
                                    creationcaisse = true;
                                    proxy.InsertDepeiment(PAIEMENTMONTURE);
                                    creationdepaiement = true;

                                    if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                                    {
                                        ts.Complete();
                                    }
                                }
                                if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                                {
                                    proxy.AjouterTransactionPaiementRefresh();
                                    proxy.AjouterDepenseRefresh();
                                    proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                    GridLentille.IsEnabled = false;
                                    GridLentille.DataContext = null;
                                    LentilleClass = null;
                                    Lentilleversementzero = false;
                                    MessageBoxResult resul56e03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                }
                            }
                            else
                            {
                                using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                {


                                    proxy.UpdateLentilleClient(LentilleClass);
                                    ts.Complete();
                                    creationmonture = true;







                                }
                                if (creationmonture == true)
                                {
                                    proxy.AjouterTransactionPaiementRefresh();
                                    proxy.AjouterDepenseRefresh();
                                    proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                    GridLentille.IsEnabled = false;
                                    GridLentille.DataContext = null;
                                    LentilleClass = null;
                                    MessageBoxResult resul0d3 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                                }
                            }
                        }
                        else
                        {
                            if (Lentilleversementzero == true)
                            {
                                if (LentilleClass.Encaissé == 0)
                                {
                                    CAISSEMONTURE = proxy.GetAllDepense().Where(n => n.cle == LentilleClass.Cle).First();
                                    PAIEMENTMONTURE = proxy.GetAllDepeiment().Where(n => n.cle == LentilleClass.Cle).First();
                                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                    {

                                        proxy.UpdateLentilleClient(LentilleClass);
                                        creationmonture = true;


                                        proxy.DeleteDepense(CAISSEMONTURE);
                                        creationcaisse = true;
                                        proxy.DeleteDepeiment(PAIEMENTMONTURE);
                                        creationdepaiement = true;

                                        if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                                        {
                                            ts.Complete();
                                        }
                                    }
                                    if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                                    {
                                        proxy.AjouterTransactionPaiementRefresh();
                                        proxy.AjouterDepenseRefresh();
                                        proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                        GridLentille.IsEnabled = false;
                                        GridLentille.DataContext = null;
                                        LentilleClass = null;
                                        Lentilleversementzero = false;
                                        MessageBoxResult resul0q3 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                    }
                                }
                                else
                                {
                                    if (LentilleClass.Encaissé != 0)
                                    {
                                        CAISSEMONTURE = proxy.GetAllDepense().Where(n => n.cle == LentilleClass.Cle).First();
                                        CAISSEMONTURE.MontantCrédit = LentilleClass.Encaissé;
                                        PAIEMENTMONTURE = proxy.GetAllDepeiment().Where(n => n.cle == LentilleClass.Cle).First();
                                        PAIEMENTMONTURE.montant = Convert.ToDecimal(LentilleClass.Encaissé);
                                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                                        {

                                            proxy.UpdateLentilleClient(LentilleClass);
                                            creationmonture = true;


                                            proxy.UpdateDepense(CAISSEMONTURE);
                                            creationcaisse = true;
                                            proxy.UpdateDepeiment(PAIEMENTMONTURE);
                                            creationdepaiement = true;

                                            if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                                            {
                                                ts.Complete();
                                            }
                                        }
                                        if (creationcaisse == true && creationmonture == true && creationdepaiement == true)
                                        {
                                            proxy.AjouterTransactionPaiementRefresh();
                                            proxy.AjouterDepenseRefresh();
                                            proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                                            GridLentille.IsEnabled = false;
                                            GridLentille.DataContext = null;
                                            LentilleClass = null;
                                            Lentilleversementzero = false;
                                            MessageBoxResult resul203 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                        }
                                    }
                                }
                            }
                        }

                    }
                }


            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void LentilleDatagrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (LentilleDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    LentilleClass = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                    GridLentille.DataContext = LentilleClass;
                    GridLentille.IsEnabled = true;

                    nouvellelentille = false;
                    anciennelentille = true;

                    if (LentilleClass.Encaissé != 0)
                    {
                        Lentilleversementzero = true;
                    }
                    else
                    {
                        Lentilleversementzero = false;
                    }
                    /************************************************/
                    if (LentilleClass.StatutVente == false)
                    {
                        btnventeLentille.IsEnabled = true;
                        txtMontantTotalENCLentille.IsEnabled = true;
                    }
                    else
                    {
                        btnventeLentille.IsEnabled = false;
                        txtMontantTotalENCLentille.IsEnabled = false;
                    }

                    if (LentilleClass.StatutDevis == true && LentilleClass.StatutVente == false)
                    {
                        TxtStatutGlobalLentille.Content = "Devis";

                        TxtStatutGlobalLentille.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    }
                    else
                    {
                        if (LentilleClass.StatutDevis == true && LentilleClass.StatutVente == true)
                        {
                            TxtStatutGlobalLentille.Content = "Vente validée";
                            TxtStatutGlobalLentille.Background = System.Windows.Media.Brushes.LightGreen;
                        }
                    }






                    /**************************************************************/



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnImprimerLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                /*   if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                   {
                       SVC.LentilleClient selectedmont = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                       List<SVC.LentilleClient> mm = new List<SVC.LentilleClient>();
                       mm.Add(selectedmont);
                       List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                       clientvvv.Add(Clientvv);
                       ImpressionLentille cl = new ImpressionLentille(proxy, mm, clientvvv);
                       cl.Show();
                   }*/
                if (LentilleDatagrid.SelectedItem!=null)
                {
                    dialog1 = new DXDialog("Impression", DialogButtons.YesNo, true);
                    dialog1.Template = Resources["template6"] as ControlTemplate;

                    // dialog1.Content = Resources["content"];
                    dialog1.ResizeMode = ResizeMode.NoResize;
                    dialog1.Width = 350;
                    dialog1.Height = 200;
                    dialog1.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    dialog1.ShowDialog();
                    interfaceimpressionlentille = 0;
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnSuppLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (LentilleDatagrid.SelectedItem != null && memberuser.SupressionDossierClient == true)
                {
                    var selectedlentille = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                    if (selectedlentille.StatutVente == false)
                    {

                        bool sucees = false;
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {

                            proxy.DeleteLentilleClient(selectedlentille);
                            ts.Complete();
                            sucees = true;
                        }
                        if (sucees == true)
                        {
                            proxy.AjouterLentilleClientRefresh(Clientvv.Id);
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                        }


                    }
                    else
                    {
                        if (selectedlentille.StatutVente == true)
                        {

                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez tout d'abord supprimer le document de vente associé", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            tsdffgent.IsSelected = true;
                            bool existe = proxy.GetAllF1ByCleDossier(Convert.ToString(selectedlentille.Cle)).Any();
                            if (existe == true)
                            {
                                if (memberuser.ModificationDossierClient == true)
                                {

                                    if (ListeDesDocuments.SelectedItem != null && memberuser.ModificationDossierClient == true)
                                    {
                                        selectedF1 = proxy.GetAllF1ByCleDossier(Convert.ToString(selectedlentille.Cle)).First();
                                        ancienneF1 = proxy.GetAllF1ByCleDossier(Convert.ToString(selectedlentille.Cle)).First();
                                        factureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                        anciennefactureselectedl = proxy.GetAllFactureBycompteur(selectedF1.nfact);
                                        FacturationDesign();
                                        ReceptDatagrid.IsEnabled = false;
                                        if (factureselectedl != null)
                                        {
                                            foreach (var item in factureselectedl)
                                            {
                                                item.quantite = 0;
                                            }
                                            ReceptDatagrid.ItemsSource = factureselectedl;
                                            ReceptDatagrid.DataContext = factureselectedl;

                                            CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                                            WindowBorderFacture.DataContext = selectedF1;
                                            var TTC = ((factureselectedl).AsEnumerable().Sum(o => (((o.privente * o.tva) / 100) * o.quantite) + (o.privente * o.quantite)));
                                            string strTTC = string.Format("{0:0.00}", TTC);
                                            txtTTC.Text = strTTC;

                                        }
                                        facturenew = false;
                                        facturemodif = true;
                                        string nfact = selectedF1.nfact.Substring(0, 1);

                                        switch (nfact)
                                        {
                                            case "F":
                                                chFacture.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "modifier Facture";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 1;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }
                                                break;
                                            case "A":
                                                chFactureAvoir.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "Facture d'avoir";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 2;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }
                                                break;
                                            case "B":
                                                chBonLivraison.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "bon de livraison";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 3;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }
                                                break;
                                            case "C":
                                                chBonLivraisonAvoir.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "avoir bon de livraison";
                                                ReceptDatagrid.CanUserDeleteRows = false;
                                                selectedparam = proxy.GetAllParamétre();
                                                documenttype = 4;
                                                if (selectedparam.AffichPrixAchatVente == true)
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                                }
                                                else
                                                {
                                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                                }
                                                if (selectedparam.ModiPrix == true)
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                                }
                                                else
                                                {
                                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                                }
                                                if (selectedparam.modidate == true)
                                                {
                                                    txtDateOper.IsEnabled = true;
                                                }
                                                if (selectedparam.affiben == true)
                                                {
                                                    Bénéfice.Visibility = Visibility.Visible;
                                                    Bénéficemont.Visibility = Visibility.Visible;

                                                }

                                                break;
                                            case "P":
                                                chProforma.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "modifier Proforma";
                                                ReceptDatagrid.CanUserDeleteRows = true;
                                                documenttype = 5;

                                                ReceptDatagrid.Columns[2].IsReadOnly = false;

                                                txtDateOper.IsEnabled = true;



                                                break;
                                            case "R":
                                                chFactureProvisoir.IsChecked = true;
                                                txtnVersement.IsEnabled = false;
                                                NomDocumentLabel.Content = "Facture provisoir";
                                                ReceptDatagrid.CanUserDeleteRows = true;

                                                ReceptDatagrid.Columns[2].IsReadOnly = false;

                                                txtDateOper.IsEnabled = true;
                                                documenttype = 6;
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult resultgfh = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.MessageBoxPrivilége, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }

                                }


                            }

                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void btnEditLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (LentilleDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    LentilleClass = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                    GridLentille.DataContext = LentilleClass;
                    GridLentille.IsEnabled = true;

                    nouvellelentille = false;
                    anciennelentille = true;

                    if (LentilleClass.Encaissé != 0)
                    {
                        Lentilleversementzero = true;
                    }
                    else
                    {
                        Lentilleversementzero = false;
                    }
                    /************************************************/
                    if (LentilleClass.StatutVente == false)
                    {
                        btnventeLentille.IsEnabled = true;
                        txtMontantTotalENCLentille.IsEnabled = true;
                    }
                    else
                    {
                        btnventeLentille.IsEnabled = false;
                        txtMontantTotalENCLentille.IsEnabled =false;
                    }

                    if (LentilleClass.StatutDevis == true && LentilleClass.StatutVente == false)
                    {
                        TxtStatutGlobalLentille.Content = "Devis";

                        TxtStatutGlobalLentille.Background = System.Windows.Media.Brushes.PaleVioletRed;
                    }
                    else
                    {
                        if (LentilleClass.StatutDevis == true && LentilleClass.StatutVente == true)
                        {
                            TxtStatutGlobalLentille.Content = "Vente validée";
                            TxtStatutGlobalLentille.Background = System.Windows.Media.Brushes.LightGreen;
                        }
                    }






                    /**************************************************************/



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtRechercheVisite_EditValueChanged(object sender, DevExpress.Xpf.Editors.EditValueChangedEventArgs e)
        {
            try
            {
                TextBox t = (TextBox)sender;
                string filter = t.Text;
                ICollectionView cv = CollectionViewSource.GetDefaultView(HistoriqueDesDataGrid.ItemsSource);
                if (filter == "")
                    cv.Filter = null;
                else
                {
                    cv.Filter = o =>
                    {
                        SVC.F1 p = o as SVC.F1;
                        if (t.Name == "txtId")
                            return (p.Id == Convert.ToInt32(filter));
                        return (p.nfact.ToUpper().Contains(filter.ToUpper()));
                    };
                }


            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtRechercheVersement_EditValueChanged(object sender, DevExpress.Xpf.Editors.EditValueChangedEventArgs e)
        {
            try
            {
                TextBox t = (TextBox)sender;
                string filter = t.Text;
                ICollectionView cv = CollectionViewSource.GetDefaultView(VersementPatientDataGrid.ItemsSource);
                if (filter == "")
                    cv.Filter = null;
                else
                {
                    cv.Filter = o =>
                    {
                        SVC.Depeiment p = o as SVC.Depeiment;
                        if (t.Name == "txtId")
                            return (p.Id == Convert.ToInt32(filter));
                        return (p.paiem.ToUpper().Contains(filter.ToUpper()));
                    };
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtRecherdfgcheVisite_EditValueChanged(object sender, DevExpress.Xpf.Editors.EditValueChangedEventArgs e)
        {
            try
            {
                TextEdit t = (TextEdit)sender;
                string filter = t.Text;
                ICollectionView cv = CollectionViewSource.GetDefaultView(ProduitHistoriquevente.ItemsSource);
                if (filter == "")
                    cv.Filter = null;
                else
                {
                    cv.Filter = o =>
                    {
                        SVC.Facture p = o as SVC.Facture;
                        if (t.Name == "txtId")
                            return (p.Id == Convert.ToInt32(filter));
                        return (p.design.ToUpper().Contains(filter.ToUpper()));
                    };
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnvente_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                dialog1 = new DXDialog("Veuillez choisir un document", DialogButtons.YesNo, true);
                dialog1.Template = Resources["template4"] as ControlTemplate;
                interfacefacturation = 1;
                dialog1.ResizeMode = ResizeMode.NoResize;
                dialog1.Width = 350;
                dialog1.Height = 250;
                dialog1.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                dialog1.ShowDialog();
                facturenew = true;
                facturemodif = false;
                factureselectedl = new List<SVC.Facture>();
                /****************************Accessoire 01***********************************/
                #region Accessoire1
                if (MontureClass.IdAccessoires1 != 0 && MontureClass.AccessoiresQuantite1 > 0)
                {
                    if (MontureClass.Accessoires1Statut == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdAccessoires1)).First();
                        if (selectedtropuvé.quantite > 0 && selectedtropuvé.quantite>= MontureClass.AccessoiresQuantite1)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.AccessoiresPrix1,
                                        quantite = MontureClass.AccessoiresQuantite1,
                                        Total = MontureClass.AccessoiresPrix1 * MontureClass.AccessoiresQuantite1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + MontureClass.AccessoiresQuantite1;
                                        found.Total = found.Total + MontureClass.AccessoiresQuantite1 * MontureClass.AccessoiresPrix1;



                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.AccessoiresPrix1,
                                    quantite = MontureClass.AccessoiresQuantite1,
                                    Total = MontureClass.AccessoiresPrix1 * MontureClass.AccessoiresQuantite1,

                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {


                                    found.quantite = found.quantite + MontureClass.AccessoiresQuantite1;
                                    found.Total = found.Total + MontureClass.AccessoiresQuantite1 * MontureClass.AccessoiresPrix1;

                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit "+ selectedtropuvé.design+ " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                        }
                    }
                    else
                    {
                        if (MontureClass.Accessoires1Statut == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdAccessoires1)).Any();

                            if (existeaccessoire1)
                            {
                                SVC.Prodf selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdAccessoires1)).First();
                                if (selectedtropuvé.quantite > 0 && selectedtropuvé.quantite >= MontureClass.AccessoiresQuantite1)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = MontureClass.AccessoiresPrix1,
                                                quantite = MontureClass.AccessoiresQuantite1,
                                                Total = MontureClass.AccessoiresPrix1 * MontureClass.AccessoiresQuantite1,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {
                                                factureselectedl.Add(facturevente);
                                            }
                                            else
                                            {
                                                found.quantite = found.quantite + MontureClass.AccessoiresQuantite1;
                                                found.Total = found.Total + MontureClass.AccessoiresQuantite1 * MontureClass.AccessoiresPrix1;
                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.AccessoiresPrix1,
                                            quantite = MontureClass.AccessoiresQuantite1,
                                            Total = MontureClass.AccessoiresPrix1 * MontureClass.AccessoiresQuantite1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,
                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {
                                            factureselectedl.Add(facturevente);
                                        }
                                        else
                                        {
                                            found.quantite = found.quantite + MontureClass.AccessoiresQuantite1;
                                            found.Total = found.Total + MontureClass.AccessoiresQuantite1 * MontureClass.AccessoiresPrix1;
                                        }


                                    }
                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }

                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.Accessoires1 + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Exclamation);

                            }
                        }

                    }

                }
                #endregion
                /************************Accesoires 2****************************/
                #region Accessoires2
                if (MontureClass.IdAccessoires2 != 0 && MontureClass.AccessoiresQuantite2 > 0)
                {
                    if (MontureClass.Accessoires2Statut == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdAccessoires2)).First();
                        if (selectedtropuvé.quantite > 0 && selectedtropuvé.quantite >= MontureClass.AccessoiresQuantite2)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.AccessoiresPrix2,
                                        quantite = MontureClass.AccessoiresQuantite2,
                                        Total = MontureClass.AccessoiresPrix2 * MontureClass.AccessoiresQuantite2,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {


                                        found.quantite = found.quantite + MontureClass.AccessoiresQuantite2;
                                        found.Total = found.Total + MontureClass.AccessoiresQuantite2 * MontureClass.AccessoiresPrix2;






                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.AccessoiresPrix2,
                                    quantite = MontureClass.AccessoiresQuantite2,
                                    Total = MontureClass.AccessoiresPrix2 * MontureClass.AccessoiresQuantite2,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    found.quantite = found.quantite + MontureClass.AccessoiresQuantite2;
                                    found.Total = found.Total + MontureClass.AccessoiresQuantite2 * MontureClass.AccessoiresPrix2;


                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (MontureClass.Accessoires2Statut == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdAccessoires2)).Any();

                            if (existeaccessoire1)
                            {
                                SVC.Prodf selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdAccessoires2)).First();
                                if (selectedtropuvé.quantite > 0 && selectedtropuvé.quantite >= MontureClass.AccessoiresQuantite2)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = MontureClass.AccessoiresPrix2,
                                                quantite = MontureClass.AccessoiresQuantite2,
                                                Total = MontureClass.AccessoiresPrix2 * MontureClass.AccessoiresQuantite2,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {


                                                found.quantite = found.quantite + MontureClass.AccessoiresQuantite2;
                                                found.Total = found.Total + MontureClass.AccessoiresQuantite2 * MontureClass.AccessoiresPrix2;






                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.AccessoiresPrix2,
                                            quantite = MontureClass.AccessoiresQuantite2,
                                            Total = MontureClass.AccessoiresPrix2 * MontureClass.AccessoiresQuantite2,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {

                                            found.quantite = found.quantite + MontureClass.AccessoiresQuantite2;
                                            found.Total = found.Total + MontureClass.AccessoiresQuantite2 * MontureClass.AccessoiresPrix2;


                                        }


                                    }
                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }

                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.Accessoires2 + " ce produit n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Exclamation);

                            }
                        }
                    }
                }
                #endregion
                /*********************************Verre Loin droit*****************************/
                #region DroiteVerreLoin
                if (MontureClass.IdDroiteVerreLoin > 0)
                {
                    if (MontureClass.DroiteStatutLoinVerre == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdDroiteVerreLoin)).First();
                        if (selectedtropuvé.quantite > 0 )
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.DroitPrixVerreLoin,
                                        quantite = 1,
                                        Total = MontureClass.DroitPrixVerreLoin * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {
                                        factureselectedl.Add(facturevente);
                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.DroitPrixVerreLoin;
                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.DroitPrixVerreLoin,
                                    quantite = 1,
                                    Total = MontureClass.DroitPrixVerreLoin * 1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    found.quantite = found.quantite + 1;
                                    found.Total = found.Total + 1 * MontureClass.DroitPrixVerreLoin;

                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    if (MontureClass.DroiteStatutLoinVerre == 1)
                    {
                        var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdDroiteVerreLoin)).Any();

                        if (existeaccessoire1)
                        {
                            SVC.Prodf selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdDroiteVerreLoin)).First();
                            if (selectedtropuvé.quantite > 0)
                            {
                                if (selectedtropuvé.perempt != null)
                                {
                                    if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.DroitPrixVerreLoin,
                                            quantite = 1,
                                            Total = MontureClass.DroitPrixVerreLoin * 1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,
                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {
                                            factureselectedl.Add(facturevente);
                                        }
                                        else
                                        {
                                            found.quantite = found.quantite + 1;
                                            found.Total = found.Total + 1 * MontureClass.DroitPrixVerreLoin;
                                        }


                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                    }
                                }
                                else
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.DroitPrixVerreLoin,
                                        quantite = 1,
                                        Total = MontureClass.DroitPrixVerreLoin * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,

                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {

                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {

                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.DroitPrixVerreLoin;

                                    }


                                }
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.DroiteVerreLoinDesignation + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Exclamation);

                        }
                    }
                }
                #endregion
                /****************************Gauche verre loin********************/
                #region GaucheVerreLoin
                if (MontureClass.IdGaucheVerreLoin > 0)
                {
                    if (MontureClass.GaucheStatutLoinVerre == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdGaucheVerreLoin)).First();

                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.GauchePrixVerreLoin,
                                        quantite = 1,
                                        Total = MontureClass.GauchePrixVerreLoin * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage= selectedtropuvé.collisage,
                                      
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {
                                        factureselectedl.Add(facturevente);
                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.GauchePrixVerreLoin;
                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.GauchePrixVerreLoin,
                                    quantite = 1,
                                    Total = MontureClass.GauchePrixVerreLoin * 1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {
                                    found.quantite = found.quantite + 1;
                                    found.Total = found.Total + 1 * MontureClass.GauchePrixVerreLoin;
                                }


                            }
                        }else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (MontureClass.GaucheStatutLoinVerre == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdGaucheVerreLoin)).Any();

                            if (existeaccessoire1)
                            {
                                SVC.Prodf selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdGaucheVerreLoin)).First();
                                if (selectedtropuvé.quantite > 0)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = MontureClass.GauchePrixVerreLoin,
                                                quantite = 1,
                                                Total = MontureClass.GauchePrixVerreLoin * 1,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                collisage = selectedtropuvé.collisage,
                                                Client = Clientvv.Raison,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {
                                                factureselectedl.Add(facturevente);
                                            }
                                            else
                                            {
                                                found.quantite = found.quantite + 1;
                                                found.Total = found.Total + 1 * MontureClass.GauchePrixVerreLoin;
                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.GauchePrixVerreLoin,
                                            quantite = 1,
                                            Total = MontureClass.GauchePrixVerreLoin * 1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {
                                            found.quantite = found.quantite + 1;
                                            found.Total = found.Total + 1 * MontureClass.GauchePrixVerreLoin;
                                        }


                                    }
                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.GaucheVerreLoinDesignation + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Exclamation);

                            }
                        }
                    }
                }
                #endregion
                /**********************************************MontureLoin*********************/
                #region MontureLoin
                if (MontureClass.IdMontureLoin > 0)
                {
                    if (MontureClass.DroiteStatutLoinMonture == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdMontureLoin)).First();
                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.PrixMontureLoin,
                                        quantite = 1,
                                        Total = MontureClass.PrixMontureLoin * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.PrixMontureLoin;

                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.PrixMontureLoin,
                                    quantite = 1,
                                    Total = MontureClass.PrixMontureLoin * 1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,

                                    collisage = selectedtropuvé.collisage,
                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    found.quantite = found.quantite + 1;
                                    found.Total = found.Total + 1 * MontureClass.PrixMontureLoin;

                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    if (MontureClass.DroiteStatutLoinMonture == 1)
                    {
                        var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdMontureLoin)).Any();

                        if (existeaccessoire1)
                        {
                            var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdMontureLoin)).Where(n => n.quantite != 0).First();
                            if (selectedtropuvé.quantite > 0)
                            {
                                if (selectedtropuvé.perempt != null)
                                {
                                    if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.PrixMontureLoin,
                                            quantite = 1,
                                            Total = MontureClass.PrixMontureLoin * 1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,
                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {


                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {
                                            found.quantite = found.quantite + 1;
                                            found.Total = found.Total + 1 * MontureClass.PrixMontureLoin;

                                        }


                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                    }
                                }
                                else
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.PrixMontureLoin,
                                        quantite = 1,
                                        Total = MontureClass.PrixMontureLoin * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,

                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {

                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {

                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.PrixMontureLoin;

                                    }


                                }
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.MontureDesignationLoin + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Exclamation);

                        }
                    }
                }
                #endregion
                /*******************************DroiteVerre Pres*************************/
                #region DroiteVERREPRESS
                if (MontureClass.IdDroiteVerrePres > 0)
                {
                    if (MontureClass.DroiteStatutPresVerre == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdDroiteVerrePres)).First();
                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.DroitPrixVerrePres,
                                        quantite = 1,
                                        Total = MontureClass.DroitPrixVerrePres * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.DroitPrixVerrePres;

                                    }

                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.DroitPrixVerrePres,
                                    quantite = 1,
                                    Total = MontureClass.DroitPrixVerrePres * 1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    found.quantite = found.quantite + 1;
                                    found.Total = found.Total + 1 * MontureClass.DroitPrixVerrePres;


                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (MontureClass.DroiteStatutPresVerre == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdDroiteVerrePres)).Any();

                            if (existeaccessoire1)
                            {
                                var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdDroiteVerrePres)).Where(n => n.quantite != 0).First();
                                if (selectedtropuvé.quantite > 0)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = MontureClass.DroitPrixVerrePres,
                                                quantite = 1,
                                                Total = MontureClass.DroitPrixVerrePres * 1,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {
                                                found.quantite = found.quantite + 1;
                                                found.Total = found.Total + 1 * MontureClass.DroitPrixVerrePres;

                                            }

                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.DroitPrixVerrePres,
                                            quantite = 1,
                                            Total = MontureClass.DroitPrixVerrePres * 1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {

                                            found.quantite = found.quantite + 1;
                                            found.Total = found.Total + 1 * MontureClass.DroitPrixVerrePres;


                                        }


                                    }
                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.DroiteVerrePresDesignation + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                            }
                        }
                    }
                }
                #endregion
                /****************************************Gauche verre pres**********///////
                #region GaucheVerrePres
                if (MontureClass.IdGaucheVerrePres > 0)
                {
                    if (MontureClass.GaucheStatutPresVerre == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdGaucheVerrePres)).First();
                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.GauchePrixVerrePres,
                                        quantite = 1,
                                        Total = MontureClass.GauchePrixVerrePres * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {
                                        factureselectedl.Add(facturevente);
                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.GauchePrixVerrePres;
                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.GauchePrixVerrePres,
                                    quantite = 1,
                                    Total = MontureClass.GauchePrixVerrePres * 1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {
                                    found.quantite = found.quantite + 1;
                                    found.Total = found.Total + 1 * MontureClass.GauchePrixVerrePres;
                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (MontureClass.GaucheStatutPresVerre == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdGaucheVerrePres)).Any();

                            if (existeaccessoire1)
                            {
                                var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdGaucheVerrePres)).Where(n => n.quantite != 0).First();
                                if (selectedtropuvé.quantite > 0)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = MontureClass.GauchePrixVerrePres,
                                                quantite = 1,
                                                Total = MontureClass.GauchePrixVerrePres * 1,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {
                                                factureselectedl.Add(facturevente);
                                            }
                                            else
                                            {
                                                found.quantite = found.quantite + 1;
                                                found.Total = found.Total + 1 * MontureClass.GauchePrixVerrePres;
                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.GauchePrixVerrePres,
                                            quantite = 1,
                                            Total = MontureClass.GauchePrixVerrePres * 1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {
                                            found.quantite = found.quantite + 1;
                                            found.Total = found.Total + 1 * MontureClass.GauchePrixVerrePres;
                                        }


                                    }
                                }else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(MontureClass.GaucheVerrePresDesignation + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                            }
                        }
                    }
                }
                #endregion
                /********************************Monture Pres**************************/
                #region MonturePres
                if (MontureClass.IdMonturePres > 0)
                {
                    if (MontureClass.DroiteStatutPresMonture == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(MontureClass.IdMonturePres)).First();
                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = MontureClass.PrixMonturePres,
                                        quantite = 1,
                                        Total = MontureClass.PrixMonturePres * 1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + 1;
                                        found.Total = found.Total + 1 * MontureClass.PrixMonturePres;

                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = MontureClass.PrixMonturePres,
                                    quantite = 1,
                                    Total = MontureClass.PrixMonturePres * 1,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {
                                    found.quantite = found.quantite + 1;
                                    found.Total = found.Total + 1 * MontureClass.PrixMonturePres;
                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (MontureClass.DroiteStatutPresMonture == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdMonturePres)).Any();

                            if (existeaccessoire1)
                            {
                                SVC.Prodf selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(MontureClass.IdMonturePres)).First();
                                if (selectedtropuvé.quantite > 0)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = MontureClass.PrixMonturePres,
                                                quantite = 1,
                                                Total = MontureClass.PrixMonturePres * 1,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {
                                                found.quantite = found.quantite + 1;
                                                found.Total = found.Total + 1 * MontureClass.PrixMonturePres;

                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = MontureClass.PrixMonturePres,
                                            quantite = 1,
                                            Total = MontureClass.PrixMonturePres * 1,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {
                                            found.quantite = found.quantite + 1;
                                            found.Total = found.Total + 1 * MontureClass.PrixMonturePres;
                                        }


                                    }
                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                        }
                    }
                }
                #endregion
                ReceptDatagrid.ItemsSource = factureselectedl;
                ReceptDatagrid.DataContext = factureselectedl;

                CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void AnnulerMonture_Click(object sender, RoutedEventArgs e)
        {
            GridMonture.DataContext = null;
            GridMonture.IsEnabled = false;
            nouvellemonture = false;
            anciennemonture = false;
            btnvente.IsEnabled = false;
            txtDroiteFleshHaut.Visibility = Visibility.Visible;
            DroiteFleshBas.Visibility = Visibility.Collapsed;
            txtDroiteFleshDroite.Visibility = Visibility.Visible;
            txtDroiteFleshGauche.Visibility = Visibility.Collapsed;
            txtGaucheFleshHaut.Visibility = Visibility.Visible;
            txtGaucheFleshBas.Visibility = Visibility.Collapsed;
            txtGaucheFleshDroite.Visibility = Visibility.Visible;
            txtGaucheFleshGauche.Visibility = Visibility.Collapsed;
            ODLOIN.Text = "Loin";
            ODITERM.Text = "Interm.";
            ODPRES.Text = "Près";
            OGLOIN.Text = "Loin";
            OGINTERM.Text = "Interm.";
            OGPRES.Text = "Près";
            MonturePresLabel.Text = "PRES";
            MontureLoinLabel.Text = "LOIN";
        }

        private void AnnulerLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GridLentille.IsEnabled = false;
                GridLentille.DataContext = null;
                GridLentille.IsEnabled = false;
                nouvellelentille = false;
                anciennelentille = false;
                btnventeLentille.IsEnabled = false;


            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnventeLentille_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                dialog1 = new DXDialog("Veuillez choisir un document", DialogButtons.YesNo, true);
                dialog1.Template = Resources["template4"] as ControlTemplate;

                interfacefacturation = 2;
                dialog1.ResizeMode = ResizeMode.NoResize;
                dialog1.Width = 350;
                dialog1.Height = 250;
                dialog1.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                dialog1.ShowDialog();


                facturenew = true;
                facturemodif = false;
                factureselectedl = new List<SVC.Facture>();
                #region accessoires1
                if (LentilleClass.IdAccessoires1 != 0 && LentilleClass.AccessoiresQuantite1 > 0)
                {
                    if (LentilleClass.DroiteStatutAccessoires1 == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(LentilleClass.IdAccessoires1)).First();
                        if (selectedtropuvé.quantite > 0 && selectedtropuvé.quantite >= LentilleClass.AccessoiresQuantite1)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = LentilleClass.AccessoiresPrix1,
                                        quantite = LentilleClass.AccessoiresQuantite1,
                                        Total = LentilleClass.AccessoiresPrix1 * LentilleClass.AccessoiresQuantite1,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {
                                        found.quantite = found.quantite + LentilleClass.AccessoiresQuantite1;
                                        found.Total = found.Total + LentilleClass.AccessoiresQuantite1 * LentilleClass.AccessoiresPrix1;



                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = LentilleClass.AccessoiresPrix1,
                                    quantite = LentilleClass.AccessoiresQuantite1,
                                    Total = LentilleClass.AccessoiresPrix1 * LentilleClass.AccessoiresQuantite1,
                                    collisage = selectedtropuvé.collisage,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,


                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {


                                    found.quantite = found.quantite + LentilleClass.AccessoiresQuantite1;
                                    found.Total = found.Total + LentilleClass.AccessoiresQuantite1 * LentilleClass.AccessoiresPrix1;

                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (LentilleClass.DroiteStatutAccessoires1 == 1)
                        {
                            var existeaccessoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdAccessoires1)).Where(n => n.quantite != 0).Any();
                            if (existeaccessoire1 == true)
                            {
                                var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdAccessoires1)).Where(n => n.quantite != 0).First();
                                if (selectedtropuvé.quantite > 0 && selectedtropuvé.quantite >= LentilleClass.AccessoiresQuantite1)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = LentilleClass.AccessoiresPrix1,
                                                quantite = LentilleClass.AccessoiresQuantite1,
                                                Total = LentilleClass.AccessoiresPrix1 * LentilleClass.AccessoiresQuantite1,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {
                                                found.quantite = found.quantite + LentilleClass.AccessoiresQuantite1;
                                                found.Total = found.Total + LentilleClass.AccessoiresQuantite1 * LentilleClass.AccessoiresPrix1;



                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = LentilleClass.AccessoiresPrix1,
                                            quantite = LentilleClass.AccessoiresQuantite1,
                                            Total = LentilleClass.AccessoiresPrix1 * LentilleClass.AccessoiresQuantite1,
                                            collisage = selectedtropuvé.collisage,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,


                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {


                                            found.quantite = found.quantite + LentilleClass.AccessoiresQuantite1;
                                            found.Total = found.Total + LentilleClass.AccessoiresQuantite1 * LentilleClass.AccessoiresPrix1;

                                        }


                                    }
                                }else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                                        
                                
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(LentilleClass.Accessoires1.ToString() + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Warning);

                            }

                        }
                    }
                }
                #endregion
                #region accessoires2
                if (LentilleClass.IdAccessoires2 != 0 && LentilleClass.AccessoiresQuantite2 > 0)
                {
                    if (LentilleClass.DroiteStatutAccessoires2 == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(LentilleClass.IdAccessoires2)).First();
                        if (selectedtropuvé.quantite > 0  && selectedtropuvé.quantite >= LentilleClass.AccessoiresQuantite2)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = LentilleClass.AccessoiresPrix2,
                                        quantite = LentilleClass.AccessoiresQuantite2,
                                        Total = LentilleClass.AccessoiresPrix2 * LentilleClass.AccessoiresQuantite2,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {


                                        found.quantite = found.quantite + LentilleClass.AccessoiresQuantite2;
                                        found.Total = found.Total + LentilleClass.AccessoiresQuantite2 * LentilleClass.AccessoiresPrix2;






                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = LentilleClass.AccessoiresPrix2,
                                    quantite = LentilleClass.AccessoiresQuantite2,
                                    Total = LentilleClass.AccessoiresPrix2 * LentilleClass.AccessoiresQuantite2,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,

                                    collisage = selectedtropuvé.collisage,
                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    found.quantite = found.quantite + LentilleClass.AccessoiresQuantite2;
                                    found.Total = found.Total + LentilleClass.AccessoiresQuantite2 * LentilleClass.AccessoiresPrix2;


                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (LentilleClass.DroiteStatutAccessoires2 == 1)
                        {
                            var existeaccesoire1 = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdAccessoires2)).Where(n => n.quantite != 0).Any();
                            if (existeaccesoire1 == true)
                            {
                                var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdAccessoires2)).Where(n => n.quantite != 0).First();
                                if (selectedtropuvé.quantite > 0  && selectedtropuvé.quantite >= LentilleClass.AccessoiresQuantite2)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = LentilleClass.AccessoiresPrix2,
                                                quantite = LentilleClass.AccessoiresQuantite2,
                                                Total = LentilleClass.AccessoiresPrix2 * LentilleClass.AccessoiresQuantite2,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {


                                                found.quantite = found.quantite + LentilleClass.AccessoiresQuantite2;
                                                found.Total = found.Total + LentilleClass.AccessoiresQuantite2 * LentilleClass.AccessoiresPrix2;






                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = LentilleClass.AccessoiresPrix2,
                                            quantite = LentilleClass.AccessoiresQuantite2,
                                            Total = LentilleClass.AccessoiresPrix2 * LentilleClass.AccessoiresQuantite2,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {

                                            found.quantite = found.quantite + LentilleClass.AccessoiresQuantite2;
                                            found.Total = found.Total + LentilleClass.AccessoiresQuantite2 * LentilleClass.AccessoiresPrix2;


                                        }


                                    }
                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(LentilleClass.Accessoires1.ToString() + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Warning);
                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(LentilleClass.Accessoires2.ToString() + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Warning);

                        }

                    }
                }
                #endregion
                /*******************************************************************/
                #region Lentille Droite
                if (LentilleClass.IdDroiteLentille != 0 && LentilleClass.DroitQuantiteLentille != 0)
                {
                   // MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(LentilleClass.DroiteStatutLentille.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                    if (LentilleClass.DroiteStatutLentille == 0)
                    {

                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(LentilleClass.IdDroiteLentille)).First();
                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = LentilleClass.DroitPrixLentille,
                                        quantite = LentilleClass.DroitQuantiteLentille,
                                        Total = LentilleClass.DroitPrixLentille * LentilleClass.DroitQuantiteLentille,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {


                                        found.quantite = found.quantite + LentilleClass.DroitQuantiteLentille;
                                        found.Total = found.Total + LentilleClass.DroitQuantiteLentille * LentilleClass.DroitPrixLentille;






                                    }


                                }
                                else
                                {
                                    MessageBoxResult resdult = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = LentilleClass.DroitPrixLentille,
                                    quantite = LentilleClass.DroitQuantiteLentille,
                                    Total = LentilleClass.DroitPrixLentille * LentilleClass.DroitQuantiteLentille,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);
                               //     MessageBoxResult resudlt = Xceed.Wpf.Toolkit.MessageBox.Show(facturevente.design.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);

                                }
                                else
                                {

                                    found.quantite = found.quantite + LentilleClass.DroitQuantiteLentille;
                                    found.Total = found.Total + LentilleClass.DroitQuantiteLentille * LentilleClass.DroitPrixLentille;


                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (LentilleClass.DroiteStatutLentille == 1)
                        {
                            var existedroitelentille = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdDroiteLentille)).Where(n => n.quantite != 0).Any();
                            if (existedroitelentille == true)
                            {
                                var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdDroiteLentille)).Where(n => n.quantite != 0).First();
                                if (selectedtropuvé.quantite > 0)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = LentilleClass.DroitPrixLentille,
                                                quantite = LentilleClass.DroitQuantiteLentille,
                                                Total = LentilleClass.DroitPrixLentille * LentilleClass.DroitQuantiteLentille,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {


                                                found.quantite = found.quantite + LentilleClass.DroitQuantiteLentille;
                                                found.Total = found.Total + LentilleClass.DroitQuantiteLentille * LentilleClass.DroitPrixLentille;






                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult redsult = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = LentilleClass.DroitPrixLentille,
                                            quantite = LentilleClass.DroitQuantiteLentille,
                                            Total = LentilleClass.DroitPrixLentille * LentilleClass.DroitQuantiteLentille,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {

                                            found.quantite = found.quantite + LentilleClass.DroitQuantiteLentille;
                                            found.Total = found.Total + LentilleClass.DroitQuantiteLentille * LentilleClass.DroitPrixLentille;


                                        }


                                    }
                                }else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                MessageBoxResult resudflt = Xceed.Wpf.Toolkit.MessageBox.Show(LentilleClass.DroiteLentilleDesignation.ToString() + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Warning);

                            }
                        }
                    }
                }
                #endregion
                /********************************************************************/
                #region lentille gauche
                if (LentilleClass.IdGaucheLentille != 0 && LentilleClass.GaucheQuantiteLentille != 0)
                {
                    if (LentilleClass.GaucheStatutLentille == 0)
                    {
                        SVC.Prodf selectedtropuvé = proxy.GetAllProdfbyfiche(Convert.ToInt16(LentilleClass.IdGaucheLentille)).First();

                        if (selectedtropuvé.quantite > 0)
                        {
                            if (selectedtropuvé.perempt != null)
                            {
                                if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                {
                                    SVC.Facture facturevente = new SVC.Facture
                                    {
                                        cab = selectedtropuvé.cab,
                                        cf = selectedtropuvé.cf,
                                        codeprod = selectedtropuvé.cp,
                                        dates = DateTime.Now,
                                        datef = selectedtropuvé.datef,
                                        design = selectedtropuvé.design,
                                        lot = selectedtropuvé.lot,
                                        oper = memberuser.Username,
                                        perempt = selectedtropuvé.perempt,
                                        tva = selectedtropuvé.tva,
                                        previent = selectedtropuvé.previent,
                                        privente = LentilleClass.GauchePrixLentille,
                                        quantite = LentilleClass.GaucheQuantiteLentille,
                                        Total = LentilleClass.GauchePrixLentille * LentilleClass.GaucheQuantiteLentille,
                                        ficheproduit = selectedtropuvé.Id,
                                        ff = selectedtropuvé.nfact,
                                        Fournisseur = selectedtropuvé.fourn,
                                        codeclient = Clientvv.Id,
                                        Client = Clientvv.Raison,
                                        collisage = selectedtropuvé.collisage,
                                    };
                                    var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                    if (found == null)
                                    {


                                        factureselectedl.Add(facturevente);

                                    }
                                    else
                                    {


                                        found.quantite = found.quantite + LentilleClass.GaucheQuantiteLentille;
                                        found.Total = found.Total + LentilleClass.GaucheQuantiteLentille * LentilleClass.GauchePrixLentille;






                                    }


                                }
                                else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                            }
                            else
                            {
                                SVC.Facture facturevente = new SVC.Facture
                                {
                                    cab = selectedtropuvé.cab,
                                    cf = selectedtropuvé.cf,
                                    codeprod = selectedtropuvé.cp,
                                    dates = DateTime.Now,
                                    datef = selectedtropuvé.datef,
                                    design = selectedtropuvé.design,
                                    lot = selectedtropuvé.lot,
                                    oper = memberuser.Username,
                                    perempt = selectedtropuvé.perempt,
                                    tva = selectedtropuvé.tva,
                                    previent = selectedtropuvé.previent,
                                    privente = LentilleClass.GauchePrixLentille,
                                    quantite = LentilleClass.GaucheQuantiteLentille,
                                    Total = LentilleClass.GauchePrixLentille * LentilleClass.GaucheQuantiteLentille,
                                    ficheproduit = selectedtropuvé.Id,
                                    ff = selectedtropuvé.nfact,
                                    Fournisseur = selectedtropuvé.fourn,
                                    codeclient = Clientvv.Id,
                                    Client = Clientvv.Raison,
                                    collisage = selectedtropuvé.collisage,

                                };
                                var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                if (found == null)
                                {

                                    factureselectedl.Add(facturevente);

                                }
                                else
                                {

                                    found.quantite = found.quantite + LentilleClass.GaucheQuantiteLentille;
                                    found.Total = found.Total + LentilleClass.GaucheQuantiteLentille * LentilleClass.GauchePrixLentille;


                                }


                            }
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        if (LentilleClass.GaucheStatutLentille == 1)
                        {
                            var existegachelentille = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdGaucheLentille)).Where(n => n.quantite != 0).Any();
                            if (existegachelentille == true)
                            {
                                var selectedtropuvé = proxy.GetAllProdfbycode(Convert.ToInt16(LentilleClass.IdGaucheLentille)).Where(n => n.quantite != 0).First();

                                if (selectedtropuvé.quantite > 0)
                                {
                                    if (selectedtropuvé.perempt != null)
                                    {
                                        if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))
                                        {
                                            SVC.Facture facturevente = new SVC.Facture
                                            {
                                                cab = selectedtropuvé.cab,
                                                cf = selectedtropuvé.cf,
                                                codeprod = selectedtropuvé.cp,
                                                dates = DateTime.Now,
                                                datef = selectedtropuvé.datef,
                                                design = selectedtropuvé.design,
                                                lot = selectedtropuvé.lot,
                                                oper = memberuser.Username,
                                                perempt = selectedtropuvé.perempt,
                                                tva = selectedtropuvé.tva,
                                                previent = selectedtropuvé.previent,
                                                privente = LentilleClass.GauchePrixLentille,
                                                quantite = LentilleClass.GaucheQuantiteLentille,
                                                Total = LentilleClass.GauchePrixLentille * LentilleClass.GaucheQuantiteLentille,
                                                ficheproduit = selectedtropuvé.Id,
                                                ff = selectedtropuvé.nfact,
                                                Fournisseur = selectedtropuvé.fourn,
                                                codeclient = Clientvv.Id,
                                                Client = Clientvv.Raison,
                                                collisage = selectedtropuvé.collisage,
                                            };
                                            var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                            if (found == null)
                                            {


                                                factureselectedl.Add(facturevente);

                                            }
                                            else
                                            {


                                                found.quantite = found.quantite + LentilleClass.GaucheQuantiteLentille;
                                                found.Total = found.Total + LentilleClass.GaucheQuantiteLentille * LentilleClass.GauchePrixLentille;






                                            }


                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Ce produit est interdit en vente date de péremption proche", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                        }
                                    }
                                    else
                                    {
                                        SVC.Facture facturevente = new SVC.Facture
                                        {
                                            cab = selectedtropuvé.cab,
                                            cf = selectedtropuvé.cf,
                                            codeprod = selectedtropuvé.cp,
                                            dates = DateTime.Now,
                                            datef = selectedtropuvé.datef,
                                            design = selectedtropuvé.design,
                                            lot = selectedtropuvé.lot,
                                            oper = memberuser.Username,
                                            perempt = selectedtropuvé.perempt,
                                            tva = selectedtropuvé.tva,
                                            previent = selectedtropuvé.previent,
                                            privente = LentilleClass.GauchePrixLentille,
                                            quantite = LentilleClass.GaucheQuantiteLentille,
                                            Total = LentilleClass.GauchePrixLentille * LentilleClass.GaucheQuantiteLentille,
                                            ficheproduit = selectedtropuvé.Id,
                                            ff = selectedtropuvé.nfact,
                                            Fournisseur = selectedtropuvé.fourn,
                                            codeclient = Clientvv.Id,
                                            Client = Clientvv.Raison,
                                            collisage = selectedtropuvé.collisage,

                                        };
                                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                                        if (found == null)
                                        {

                                            factureselectedl.Add(facturevente);

                                        }
                                        else
                                        {

                                            found.quantite = found.quantite + LentilleClass.GaucheQuantiteLentille;
                                            found.Total = found.Total + LentilleClass.GaucheQuantiteLentille * LentilleClass.GauchePrixLentille;


                                        }


                                    }
                                }else
                                {
                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Le produit " + selectedtropuvé.design + " avec quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                                }
                                        
                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(LentilleClass.GaucheLentilleDesignation.ToString() + " n'existe pas dans le stock vente impossible", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Warning);
                            }
                        }
                    }
                }
                #endregion
                /********************************************************************/

                ReceptDatagrid.ItemsSource = factureselectedl;
                ReceptDatagrid.DataContext = factureselectedl;

                CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ConfirmerDocument1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    if (fermer == true)
                    {
                        txtnVersement.IsEnabled = true;
                        FacturationDesign();
                        ReceptDatagrid.DataContext = factureselectedl;
                        ReceptDatagrid.ItemsSource = factureselectedl;
                        txtTTC.Text = "0";
                        txtnfact.IsEnabled = false;


                        if (documenttype == 3)
                        {
                            NomDocumentLabel.Content = "bon de livraison";
                            chBonLivraison.IsChecked = true;
                            txtnVersement.IsEnabled = true;
                            selectedparam = proxy.GetAllParamétre();

                            if (selectedparam.AffichPrixAchatVente == true)
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                            }
                            else
                            {
                                NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                            }
                            if (selectedparam.ModiPrix == true)
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = false;
                            }
                            else
                            {
                                ReceptDatagrid.Columns[2].IsReadOnly = true;
                            }
                            if (selectedparam.modidate == true)
                            {
                                txtDateOper.IsEnabled = true;
                            }
                            if (selectedparam.affiben == true)
                            {
                                Bénéfice.Visibility = Visibility.Visible;
                                Bénéficemont.Visibility = Visibility.Visible;

                            }
                        }
                        else
                        {


                            if (documenttype == 1)
                            {
                                NomDocumentLabel.Content = "Nouvelle Facture";
                                chFacture.IsChecked = true;
                                txtnVersement.IsEnabled = true;
                                selectedparam = proxy.GetAllParamétre();

                                if (selectedparam.AffichPrixAchatVente == true)
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    NomenclatureProduit.Columns[4].Visibility = Visibility.Collapsed;
                                }
                                if (selectedparam.ModiPrix == true)
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                }
                                else
                                {
                                    ReceptDatagrid.Columns[2].IsReadOnly = true;
                                }
                                if (selectedparam.modidate == true)
                                {
                                    txtDateOper.IsEnabled = true;
                                }
                                if (selectedparam.affiben == true)
                                {
                                    Bénéfice.Visibility = Visibility.Visible;
                                    Bénéficemont.Visibility = Visibility.Visible;
                                    //   Bénéficemont.Text = Convert.ToString(((comptoircalcu.listcomptoir).AsEnumerable().Sum(o => o.privente * o.quantite)) - ((comptoircalcu.listcomptoir).AsEnumerable().Sum(o => o.previent * o.quantite)));

                                }
                            }
                            else
                            {
                                if (documenttype == 5)
                                {
                                    NomDocumentLabel.Content = "Nouvelle Proforma";
                                    chProforma.IsChecked = true;
                                    txtnVersement.IsEnabled = false;
                                    ReceptDatagrid.Columns[2].IsReadOnly = false;
                                    txtDateOper.IsEnabled = true;


                                }
                            }
                        }


                        string cle = "";
                        bool monture = false;
                        bool lentille = false;
                        decimal versementdossier = 0;decimal remise = 0;
                        
                        if (interfacefacturation == 1)
                        {
                            cle = MontureClass.Cle;
                            monture = true;
                            lentille = false;
                            versementdossier =Convert.ToDecimal(MontureClass.Encaissé); 
                            remise = Convert.ToDecimal(MontureClass.Remise);
                        }
                        else
                        {
                            if (interfacefacturation == 2)
                            {
                                cle = LentilleClass.Cle;
                                monture = false;
                                lentille = true;
                                versementdossier = Convert.ToDecimal(LentilleClass.Encaissé);
                                remise = Convert.ToDecimal(LentilleClass.Remise);
                            }
                            else
                            {
                                remise = 0;
                            }
                        }


                        nouveauF1 = new SVC.F1
                        {
                            codeclient = Clientvv.Id,
                            date = DateTime.Now,
                            dates = DateTime.Now,
                            raison = Clientvv.Raison,
                            modep = "A TERME",
                            oper = memberuser.Username,
                            cleDossier = cle,
                            Monture = monture,
                            Lentille = lentille,
                            versement = versementdossier,
                            // ht= 0,
                            // net= 0,
                            /*  timbre = 0,
                              echeance = 0,
                              ht = 0,
                              net = 0,

                              tva = 0,
                              versement = 0,
                              reste = 0,
                              */
                         //  remise = remise,

                        };
                        tsdffgent.IsSelected = true;
                        
                    //    selectchanged();
                        WindowBorderFacture.DataContext = nouveauF1;
                    //    txtRemise.Text=remise.ToString();
                        ///    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(interfacefacturation.ToString(), NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    //    calculef1();
                        dialog1.Close();
                        
                    }
                    else
                    {
                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Vous devez choisir un document de vente", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ListeDesDocuments_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListeDesDocuments.ItemsSource = proxy.GetAllF1Bycode(Clientvv.Id).Where(n => n.nfact.Substring(0, 2) != "Co").OrderBy(n => n.date);

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btndéfiltrer1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                bool ImageResultTransfer = false;
                bool InsertImageResult = false;
                using (var ts = new TransactionScope())
                {
                    serverfilepath = op.FileName;

                    filepath = "";
                    if (serverfilepath != "")
                    {
                        string dada = op.SafeFileName;//+PATIENT.Id;
                        filepath = op.FileName;

                        serverfilepath = @"ImagesGalerie\" + dada;
                        byte[] buffer = null;

                        // read the file and return the byte[
                        using (FileStream fs = new FileStream(filepath, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            buffer = new byte[fs.Length];
                            fs.Read(buffer, 0, (int)fs.Length);
                        }
                        if (buffer != null)
                        {
                            proxy.UploadDocument(serverfilepath, buffer);
                            ImageResultTransfer = true;
                            /*Il se peut que les informations dicom sont vide il faudrait traité ce cas*/
                            SVC.DicomFichier cas = new SVC.DicomFichier
                            {
                                // PatientNameInDicom = dd.NomPatient,
                                Date = DateTime.Now,

                                Raison = Clientvv.Raison,
                                NomFichier = dada,

                                ChemainFichier = serverfilepath,

                                IdClient = Clientvv.Id,
                            };
                            proxy.InsertDicomFichier(cas);
                            InsertImageResult = true;
                        }
                        if (ImageResultTransfer && InsertImageResult)
                        {
                            ts.Complete();
                            MessageBoxResult resul03s = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                            op = null;
                        }
                        else
                        {
                            MessageBoxResult resul03d = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.Opérationéchouée, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

                        }


                    }




                }
                proxy.AjouterDicomImageRefresh(Clientvv.Id);

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }



        private void btnImprimer1_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnSuppDicom1_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnNewDicom1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    op = new Microsoft.Win32.OpenFileDialog();
                    op.Title = "Select a picture";
                    op.Filter = "All supported graphics|*.jpg;*.jpeg;*.png|" +
                      "JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|" +
                      "Portable Network Graphic (*.png)|*.png";
                    if (op.ShowDialog() == true)
                    {
                        imgPhotod.Source = new BitmapImage(new Uri(op.FileName));
                    }


                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void DatagridImage1_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (DatagridImage1.SelectedItem != null)
                {
                    SVC.DicomFichier SelectMedecin = DatagridImage1.SelectedItem as SVC.DicomFichier;

                    imgPhotod.Source = LoadImage(proxy.DownloadDocument(SelectMedecin.ChemainFichier.ToString()));

                    op = null;

                }
            }
            catch (Exception ex)
            {
                string Mess = "Error: " + ex.Message;

            }
        }

        private void btnNewExamenOptometrie_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    ExamenOptométriqueClass = new SVC.examenopto
                    {
                        Date = DateTime.Now,
                        UserName = memberuser.Username,
                        RaisonClient = Clientvv.Raison,
                        IdClient = Clientvv.Id,
                        CylindrePlusODOG = true,
                        CylindreMoinODOG = false,
                        CylindrePlusRefra = true,
                        CylindreMoinRefra = false,
                        Dates = DateTime.Now,
                        Dioptrie = true,
                        mm = false,

                    };
                    GridExamenOptometrique.DataContext = ExamenOptométriqueClass;
                    GridExamenOptometrique.IsEnabled = true;
                    nouveauexamenoptometrique = true;
                    ancienexamenoptometrique = false;


                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void AnnulerExamenOptometrique_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GridExamenOptometrique.IsEnabled = false;
                GridExamenOptometrique.DataContext = null;
                nouveauexamenoptometrique = false;
                ancienexamenoptometrique = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ValiderExamenOptometrique_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (nouveauexamenoptometrique == true && ancienexamenoptometrique == false && memberuser.CreationDossierClient == true)
                {

                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.InsertExamensOptométriques(ExamenOptométriqueClass);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterExamensOptométriquesRefresh(Clientvv.Id);
                        GridExamenOptometrique.IsEnabled = false;
                        GridExamenOptometrique.DataContext = null;
                        ExamenOptométriqueClass = null;
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }



                else
                {
                    if (nouveauexamenoptometrique == false && ancienexamenoptometrique == true && memberuser.ModificationDossierClient == true)
                    {

                        bool modifexamen = false;
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {
                            proxy.UpdateExamensOptométriques(ExamenOptométriqueClass);
                            ts.Complete();
                            modifexamen = true;
                        }
                        if (modifexamen == true)
                        {

                            proxy.AjouterExamensOptométriquesRefresh(Clientvv.Id);
                            GridExamenOptometrique.IsEnabled = false;
                            GridExamenOptometrique.DataContext = null;
                            ExamenOptométriqueClass = null;
                            MessageBoxResult resul0d3 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void ExamenOptometrieDatagrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (ExamenOptometrieDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    ExamenOptométriqueClass = ExamenOptometrieDatagrid.SelectedItem as SVC.examenopto;
                    GridExamenOptometrique.DataContext = ExamenOptométriqueClass;
                    GridExamenOptometrique.IsEnabled = true;

                    nouveauexamenoptometrique = false;
                    ancienexamenoptometrique = true;

                    /**************************************************************/



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnEditExamenOptometrie_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ExamenOptometrieDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    ExamenOptométriqueClass = ExamenOptometrieDatagrid.SelectedItem as SVC.examenopto;
                    GridExamenOptometrique.DataContext = ExamenOptométriqueClass;
                    GridExamenOptometrique.IsEnabled = true;

                    nouveauexamenoptometrique = false;
                    ancienexamenoptometrique = true;

                    /**************************************************************/



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnTransposerODOG_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                bool droite = false;
                bool gauche = false;
                /********************GroiteLoin*************************************/
                if (txtAncienSphereDroiteExamenOptometrique.Text != "" && txtAncienCylindreDroiteExamenOptometrique.Text != "" && txtAncienAxeDroiteExamenOptometrique.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (txtAncienSphereDroiteExamenOptometrique.Text != "")
                    {
                        if (decimal.TryParse(txtAncienSphereDroiteExamenOptometrique.Text, out sphere))
                            sphere = Convert.ToDecimal(txtAncienSphereDroiteExamenOptometrique.Text);
                        else
                            sphere = 0;
                    }
                    else
                    {
                        txtAncienSphereDroiteExamenOptometrique.Text = "";
                        sphere = 0;
                    }
                    if (txtAncienCylindreDroiteExamenOptometrique.Text != "")
                    {
                        if (decimal.TryParse(txtAncienCylindreDroiteExamenOptometrique.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(txtAncienCylindreDroiteExamenOptometrique.Text);
                            if (cylindre > 0)
                            {
                                ExamenOptométriqueClass.CylindrePlusODOG = true;
                                ExamenOptométriqueClass.CylindreMoinODOG = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    ExamenOptométriqueClass.CylindrePlusODOG = false;
                                    ExamenOptométriqueClass.CylindreMoinODOG = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                    }
                    else
                    {
                        txtAncienCylindreDroiteExamenOptometrique.Text = "";
                        cylindre = 0;
                    }

                    if (txtAncienAxeDroiteExamenOptometrique.Text != "")
                    {
                        if (int.TryParse(txtAncienAxeDroiteExamenOptometrique.Text, out axe))
                        {
                            axe = Convert.ToInt16(txtAncienAxeDroiteExamenOptometrique.Text);
                            droite = true;
                        }
                        else
                            axe = 0;
                    }
                    else
                    {
                        txtAncienAxeDroiteExamenOptometrique.Text = "";
                        axe = 0;
                    }
                    txtAncienCylindreDroiteExamenOptometrique.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    txtAncienSphereDroiteExamenOptometrique.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (ExamenOptométriqueClass.CylindrePlusODOG == true && ExamenOptométriqueClass.CylindreMoinODOG == false)
                    {
                        txtAncienAxeDroiteExamenOptometrique.Text = (axe + 90).ToString();
                        //  ExamenOptométriqueClass.CylindrePlusODOG = false;
                        // ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusODOG == false && ExamenOptométriqueClass.CylindreMoinODOG == true)
                        {
                            txtAncienAxeDroiteExamenOptometrique.Text = (axe - 90).ToString();
                            //   ExamenOptométriqueClass.CylindrePlusODOG = true;
                            //  ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }
                } /********************GroiteIntermediaire*************************************/
                if (txtAncienSphereGaucheExamenOptometrique.Text != "" && txtAncienCylindreGaucheExamenOptometrique.Text != "" && txtAncienAxeGaucheExamenOptometrique.Text != "")
                {

                    int axeG = 0;
                    decimal sphereG, cylindreG = 0;

                    if (txtAncienSphereGaucheExamenOptometrique.Text != "")
                    {
                        if (decimal.TryParse(txtAncienSphereGaucheExamenOptometrique.Text, out sphereG))
                            sphereG = Convert.ToDecimal(txtAncienSphereGaucheExamenOptometrique.Text);
                        else
                            sphereG = 0;
                    }
                    else
                    {
                        txtAncienSphereGaucheExamenOptometrique.Text = "";
                        sphereG = 0;
                    }
                    if (txtAncienCylindreGaucheExamenOptometrique.Text != "")
                    {
                        if (decimal.TryParse(txtAncienCylindreGaucheExamenOptometrique.Text, out cylindreG))
                        {
                        
                                cylindreG = Convert.ToDecimal(txtAncienCylindreGaucheExamenOptometrique.Text);
                                if (cylindreG > 0)
                                {
                                ExamenOptométriqueClass.CylindrePlusODOG = true;
                                ExamenOptométriqueClass.CylindreMoinODOG = false;
                                }
                                else
                                {
                                    if (cylindreG < 0)
                                    {
                                    ExamenOptométriqueClass.CylindrePlusODOG = false;
                                    ExamenOptométriqueClass.CylindreMoinODOG = true;
                                }
                                }
                            }
                        else
                            {
                                cylindreG = 0;
                            }
                    }
                    else
                    {
                        txtAncienCylindreGaucheExamenOptometrique.Text = "";
                        cylindreG = 0;
                    }

                    if (txtAncienAxeGaucheExamenOptometrique.Text != "")
                    {
                        if (int.TryParse(txtAncienAxeGaucheExamenOptometrique.Text, out axeG))
                        {
                            axeG = Convert.ToInt16(txtAncienAxeGaucheExamenOptometrique.Text);
                            gauche = true;
                        }
                        else
                            axeG = 0;
                    }
                    else
                    {
                        txtAncienAxeGaucheExamenOptometrique.Text = "";
                        axeG = 0;
                    }
                    txtAncienCylindreGaucheExamenOptometrique.Text = ((-cylindreG)).ToString("+#.##;-#.##;0");
                    txtAncienSphereGaucheExamenOptometrique.Text = (sphereG + cylindreG).ToString("+#.##;-#.##;0");
                    if (ExamenOptométriqueClass.CylindrePlusODOG == true && ExamenOptométriqueClass.CylindreMoinODOG == false)
                    {
                        txtAncienAxeGaucheExamenOptometrique.Text = (axeG + 90).ToString();
                        //   ExamenOptométriqueClass.CylindrePlusODOG = false;
                        //   ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusODOG == false && ExamenOptométriqueClass.CylindreMoinODOG == true)
                        {
                            txtAncienAxeGaucheExamenOptometrique.Text = (axeG - 90).ToString();
                            //    ExamenOptométriqueClass.CylindrePlusODOG = true;
                            //    ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }

                }
                if (droite == true || gauche == true)

                {
                    if (ExamenOptométriqueClass.CylindrePlusODOG == true && ExamenOptométriqueClass.CylindreMoinODOG == false)
                    {
                        ExamenOptométriqueClass.CylindrePlusODOG = false;
                        ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusODOG == false && ExamenOptométriqueClass.CylindreMoinODOG == true)
                        {
                            ExamenOptométriqueClass.CylindrePlusODOG = true;
                            ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btndpmm_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteValH1 = 0;
                Double moyDroite1 = 0;
                if (KeratometrieDroiteH1.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteH1.Text, out KeratometrieDroiteValH1))
                    {
                        KeratometrieDroiteValH1 = Convert.ToDouble(KeratometrieDroiteH1.Text);
                        KeratometrieDroiteH1.Text = (337.5 / KeratometrieDroiteValH1).ToString();
                    }
                    else
                    {
                        KeratometrieDroiteH1.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieDroiteV1.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteV1.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieDroiteV1.Text);
                        KeratometrieDroiteV1.Text = (337.5 / KeratometrieDroiteV).ToString();
                    }
                    else
                    {
                        KeratometrieDroiteV1.Text = "";
                    }
                }
                moyDroite1 = ((337.5 / KeratometrieDroiteV) + (337.5 / KeratometrieDroiteValH1)) / 2;
                if (moyDroite1 != 0 )
                {
                    KeratometrieDroitemoy1.Text = moyDroite1.ToString();
                  //  MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("1", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
                else
                {
                    KeratometrieDroitemoy1.Text = "";
                   // MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("2", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                }
                /*******************droite deuxieme*************//////
                Double KeratometrieDroiteValH2 = 0;
                Double moyDroite2 = 0;
                if (KeratometrieDroiteH2.Text != "")  
                {
                    if (Double.TryParse(KeratometrieDroiteH2.Text, out KeratometrieDroiteValH2))
                    {
                        KeratometrieDroiteValH2 = Convert.ToDouble(KeratometrieDroiteH2.Text);
                        KeratometrieDroiteH2.Text = (337.5 / KeratometrieDroiteValH2).ToString();
                    }
                    else
                    {
                        KeratometrieDroiteH2.Text = "";
                    }
                }
                Double KeratometrieDroiteV22 = 0;

                if (KeratometrieDroiteV2.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteV2.Text, out KeratometrieDroiteV22))
                    {
                        KeratometrieDroiteV22 = Convert.ToDouble(KeratometrieDroiteV2.Text);
                        KeratometrieDroiteV2.Text = (337.5 / KeratometrieDroiteV22).ToString();
                    }
                    else
                    {
                        KeratometrieDroiteV2.Text = "";
                    }
                }
                moyDroite2 = ((337.5 / KeratometrieDroiteV22) + (337.5 / KeratometrieDroiteValH2)) / 2;
                if (moyDroite2 != 0)
                {
                    KeratometrieDroitemoy2.Text = moyDroite2.ToString();
                }
                else
                {
                    KeratometrieDroitemoy2.Text = "";

                }
              
                /******************Gauche first******************************/
                Double KeratometrieGaucheValH1 = 0;
                Double moyGauche1 = 0;
                if (KeratometrieGaucheH1.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheH1.Text, out KeratometrieGaucheValH1))
                    {
                        KeratometrieGaucheValH1 = Convert.ToDouble(KeratometrieGaucheH1.Text);
                        KeratometrieGaucheH1.Text = (337.5 / KeratometrieGaucheValH1).ToString();
                    }
                    else
                    {
                        KeratometrieGaucheH1.Text = "";
                    }
                }
                Double KeratometrieGaucheV = 0;

                if (KeratometrieGaucheV1.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheV1.Text, out KeratometrieGaucheV))
                    {
                        KeratometrieGaucheV = Convert.ToDouble(KeratometrieGaucheV1.Text);
                        KeratometrieGaucheV1.Text = (337.5 / KeratometrieGaucheV).ToString();
                    }
                    else
                    {
                        KeratometrieGaucheV1.Text = "";
                    }
                }
                moyGauche1 = ((337.5 / KeratometrieGaucheV) + (337.5 / KeratometrieGaucheValH1)) / 2;
                if (moyGauche1 != 0)
                {
                    KeratometrieGauchemoy1.Text = moyGauche1.ToString();
                    //  MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("1", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                }
                else
                {
                    KeratometrieGauchemoy1.Text = "";
                    // MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("2", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                }
                /*******************Gauche deuxieme*************//////
                Double KeratometrieGaucheValH2 = 0;
                Double moyGauche2 = 0;
                if (KeratometrieGaucheH2.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheH2.Text, out KeratometrieGaucheValH2))
                    {
                        KeratometrieGaucheValH2 = Convert.ToDouble(KeratometrieGaucheH2.Text);
                        KeratometrieGaucheH2.Text = (337.5 / KeratometrieGaucheValH2).ToString();
                    }
                    else
                    {
                        KeratometrieGaucheH2.Text = "";
                    }
                }
                Double KeratometrieGaucheV22 = 0;

                if (KeratometrieGaucheV2.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheV2.Text, out KeratometrieGaucheV22))
                    {
                        KeratometrieGaucheV22 = Convert.ToDouble(KeratometrieGaucheV2.Text);
                        KeratometrieGaucheV2.Text = (337.5 / KeratometrieGaucheV22).ToString();
                    }
                    else
                    {
                        KeratometrieGaucheV2.Text = "";
                    }
                }
                moyGauche2 = ((337.5 / KeratometrieGaucheV22) + (337.5 / KeratometrieGaucheValH2)) / 2;
                if (moyGauche2 != 0)
                {
                    KeratometrieGauchemoy2.Text = moyGauche2.ToString();
                }
                else
                {
                    KeratometrieGauchemoy2.Text = "";

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieDroiteH1_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieDroiteH1.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteH1.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieDroiteH1.Text);
                    }
                    else
                    {
                        KeratometrieDroiteH1.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieDroiteV1.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteV1.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieDroiteV1.Text);
                    }
                    else
                    {
                        KeratometrieDroiteV1.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieDroitemoy1.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieDroitemoy1 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieDroitemoy1.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void KeratometrieDroiteV1_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieDroiteH1.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteH1.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieDroiteH1.Text);
                    }
                    else
                    {
                        KeratometrieDroiteH1.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieDroiteV1.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteV1.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieDroiteV1.Text);
                    }
                    else
                    {
                        KeratometrieDroiteV1.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieDroitemoy1.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieDroitemoy1 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieDroitemoy1.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieDroiteH2_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieDroiteH2.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteH2.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieDroiteH2.Text);
                    }
                    else
                    {
                        KeratometrieDroiteH2.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieDroiteV2.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteV2.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieDroiteV2.Text);
                    }
                    else
                    {
                        KeratometrieDroiteV2.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieDroitemoy2.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieDroitemoy2 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieDroitemoy2.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieDroiteV2_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieDroiteH2.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteH2.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieDroiteH2.Text);
                    }
                    else
                    {
                        KeratometrieDroiteH2.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieDroiteV2.Text != "")
                {
                    if (Double.TryParse(KeratometrieDroiteV2.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieDroiteV2.Text);
                    }
                    else
                    {
                        KeratometrieDroiteV2.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieDroitemoy2.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieDroitemoy2 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieDroitemoy2.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieGaucheH1_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieGaucheH1.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheH1.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieGaucheH1.Text);
                    }
                    else
                    {
                        KeratometrieGaucheH1.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieGaucheV1.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheV1.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieGaucheV1.Text);
                    }
                    else
                    {
                        KeratometrieGaucheV1.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieGauchemoy1.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieGauchemoy1 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieGauchemoy1.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieGaucheV1_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieGaucheH1.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheH1.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieGaucheH1.Text);
                    }
                    else
                    {
                        KeratometrieGaucheH1.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieGaucheV1.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheV1.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieGaucheV1.Text);
                    }
                    else
                    {
                        KeratometrieGaucheV1.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieGauchemoy1.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieGauchemoy1 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieGauchemoy1.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieGaucheH2_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieGaucheH2.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheH2.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieGaucheH2.Text);
                    }
                    else
                    {
                        KeratometrieGaucheH2.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieGaucheV2.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheV2.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieGaucheV2.Text);
                    }
                    else
                    {
                        KeratometrieGaucheV2.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieGauchemoy2.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieGauchemoy2 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieGauchemoy2.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void KeratometrieGaucheV2_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                Double KeratometrieDroiteH = 0;
                Double moyDroite = 0;
                if (KeratometrieGaucheH2.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheH2.Text, out KeratometrieDroiteH))
                    {
                        KeratometrieDroiteH = Convert.ToDouble(KeratometrieGaucheH2.Text);
                    }
                    else
                    {
                        KeratometrieGaucheH2.Text = "";
                    }
                }
                Double KeratometrieDroiteV = 0;

                if (KeratometrieGaucheV2.Text != "")
                {
                    if (Double.TryParse(KeratometrieGaucheV2.Text, out KeratometrieDroiteV))
                    {
                        KeratometrieDroiteV = Convert.ToDouble(KeratometrieGaucheV2.Text);
                    }
                    else
                    {
                        KeratometrieGaucheV2.Text = "";
                    }
                }
                moyDroite = (KeratometrieDroiteV + KeratometrieDroiteH) / 2;
                if (moyDroite != 0)
                {
                    KeratometrieGauchemoy2.Text = moyDroite.ToString();
                    ExamenOptométriqueClass.KeratometrieGauchemoy2 = moyDroite.ToString();
                }
                else
                {
                    KeratometrieGauchemoy2.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtAncienSphereDroiteExamenOptometrique_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                double cylindre;
                if (txtAncienSphereDroiteExamenOptometrique.Text != "")
                {
                    if (double.TryParse(txtAncienSphereDroiteExamenOptometrique.Text, out cylindre))
                    {
                        cylindre = Convert.ToInt16(txtAncienSphereDroiteExamenOptometrique.Text);
                        txtAncienSphereDroiteExamenOptometrique.Text = ((cylindre)).ToString("+#.##;-#.##;0");
                    }
                    else
                    {
                        cylindre = 0;
                    }

                }
                else
                {
                    txtAncienSphereDroiteExamenOptometrique.Text = "";

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtAncienCylindreDroiteExamenOptometrique_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                double cylindre;
                if (txtAncienCylindreDroiteExamenOptometrique.Text != "")
                {
                    if (double.TryParse(txtAncienCylindreDroiteExamenOptometrique.Text, out cylindre))
                    {
                        cylindre = Convert.ToInt16(txtAncienCylindreDroiteExamenOptometrique.Text);
                        txtAncienCylindreDroiteExamenOptometrique.Text = ((cylindre)).ToString("+#.##;-#.##;0");
                    }
                    else
                    {
                        cylindre = 0;
                    }

                }
                else
                {
                    txtAncienCylindreDroiteExamenOptometrique.Text = "";

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtAncienSphereGaucheExamenOptometrique_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                double cylindre;
                if (txtAncienSphereGaucheExamenOptometrique.Text != "")
                {
                    if (double.TryParse(txtAncienSphereGaucheExamenOptometrique.Text, out cylindre))
                    {
                        cylindre = Convert.ToInt16(txtAncienSphereGaucheExamenOptometrique.Text);
                        txtAncienSphereGaucheExamenOptometrique.Text = ((cylindre)).ToString("+#.##;-#.##;0");
                    }
                    else
                    {
                        cylindre = 0;
                    }

                }
                else
                {
                    txtAncienSphereGaucheExamenOptometrique.Text = "";

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtAncienCylindreGaucheExamenOptometrique_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                double cylindre;
                if (txtAncienCylindreGaucheExamenOptometrique.Text != "")
                {
                    if (double.TryParse(txtAncienCylindreGaucheExamenOptometrique.Text, out cylindre))
                    {
                        cylindre = Convert.ToInt16(txtAncienCylindreGaucheExamenOptometrique.Text);
                        txtAncienCylindreGaucheExamenOptometrique.Text = ((cylindre)).ToString("+#.##;-#.##;0");
                    }
                    else
                    {
                        cylindre = 0;
                    }

                }
                else
                {
                    txtAncienCylindreGaucheExamenOptometrique.Text = "";

                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnTransposerSub_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                bool droite = false;
                bool gauche = false;
                /********************GroiteLoin*************************************/
                if (RefraSubSPHDroite1.Text != "" && RefraSubCYLDroite1.Text != "" && RefraSubAXEDroite1.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (RefraSubSPHDroite1.Text != "")
                    {
                        if (decimal.TryParse(RefraSubSPHDroite1.Text, out sphere))
                            sphere = Convert.ToDecimal(RefraSubSPHDroite1.Text);
                        else
                            sphere = 0;
                        RefraSubSPHDroite1.Text = "";
                    }
                    else
                    {
                        RefraSubSPHDroite1.Text = "";
                        sphere = 0;
                    }
                    if (RefraSubCYLDroite1.Text != "")
                    {
                        if (decimal.TryParse(RefraSubCYLDroite1.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(RefraSubCYLDroite1.Text);
                            if (cylindre > 0)
                            {
                                ExamenOptométriqueClass.CylindrePlusRefra = true;
                                ExamenOptométriqueClass.CylindreMoinRefra = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    ExamenOptométriqueClass.CylindrePlusRefra = false;
                                    ExamenOptométriqueClass.CylindreMoinRefra = true;
                                }
                            }
                        }

                        else
                        {
                            cylindre = 0;
                        }
                        RefraSubCYLDroite1.Text = "";
                    }
                    else
                    {
                        RefraSubCYLDroite1.Text = "";
                        cylindre = 0;
                    }

                    if (RefraSubAXEDroite1.Text != "")
                    {
                        if (int.TryParse(RefraSubAXEDroite1.Text, out axe))
                        {
                            axe = Convert.ToInt16(RefraSubAXEDroite1.Text);
                            droite = true;
                        }
                        else
                            axe = 0;
                        RefraSubAXEDroite1.Text = "";
                    }
                    else
                    {
                        RefraSubAXEDroite1.Text = "";
                        axe = 0;
                    }
                    RefraSubCYLDroite1.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    RefraSubSPHDroite1.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (ExamenOptométriqueClass.CylindrePlusRefra == true && ExamenOptométriqueClass.CylindreMoinRefra == false)
                    {
                        RefraSubAXEDroite1.Text = (axe + 90).ToString();
                        //  ExamenOptométriqueClass.CylindrePlusODOG = false;
                        // ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusRefra == false && ExamenOptométriqueClass.CylindreMoinRefra == true)
                        {
                            RefraSubAXEDroite1.Text = (axe - 90).ToString();
                            //   ExamenOptométriqueClass.CylindrePlusODOG = true;
                            //  ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }
                }
                /**********************************************/
                /********************GroiteLoin*************************************/
                if (RefraSubSPHDroite2.Text != "" && RefraSubCYLDroite2.Text != "" && RefraSubAXEDroite2.Text != "")
                {

                    int axe = 0;
                    decimal sphere, cylindre = 0;

                    if (RefraSubSPHDroite2.Text != "")
                    {
                        if (decimal.TryParse(RefraSubSPHDroite2.Text, out sphere))
                            sphere = Convert.ToDecimal(RefraSubSPHDroite2.Text);
                        else
                            sphere = 0;
                        RefraSubSPHDroite2.Text = "";
                    }
                    else
                    {
                        RefraSubSPHDroite2.Text = "";
                        sphere = 0;
                    }
                    if (RefraSubCYLDroite2.Text != "")
                    {
                        if (decimal.TryParse(RefraSubCYLDroite2.Text, out cylindre))
                        {
                            cylindre = Convert.ToDecimal(RefraSubCYLDroite2.Text);
                            if (cylindre > 0)
                            {
                                ExamenOptométriqueClass.CylindrePlusRefra = true;
                                ExamenOptométriqueClass.CylindreMoinRefra = false;
                            }
                            else
                            {
                                if (cylindre < 0)
                                {
                                    ExamenOptométriqueClass.CylindrePlusRefra = false;
                                    ExamenOptométriqueClass.CylindreMoinRefra = true;
                                }
                            }
                        }
                        else
                        {
                            cylindre = 0;
                        }
                        RefraSubCYLDroite2.Text = "";
                    }
                    else
                    {
                        RefraSubCYLDroite2.Text = "";
                        cylindre = 0;
                    }

                    if (RefraSubAXEDroite2.Text != "")
                    {
                        if (int.TryParse(RefraSubAXEDroite2.Text, out axe))
                        {
                            axe = Convert.ToInt16(RefraSubAXEDroite2.Text);
                            droite = true;
                        }
                        else
                            axe = 0;
                        RefraSubAXEDroite2.Text = "";
                    }
                    else
                    {
                        RefraSubAXEDroite2.Text = "";
                        axe = 0;
                    }

                    RefraSubCYLDroite2.Text = ((-cylindre)).ToString("+#.##;-#.##;0");
                    RefraSubSPHDroite2.Text = (sphere + cylindre).ToString("+#.##;-#.##;0");
                    if (ExamenOptométriqueClass.CylindrePlusRefra == true && ExamenOptométriqueClass.CylindreMoinRefra == false)
                    {
                        RefraSubAXEDroite2.Text = (axe + 90).ToString();
                        //  ExamenOptométriqueClass.CylindrePlusODOG = false;
                        // ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusRefra == false && ExamenOptométriqueClass.CylindreMoinRefra == true)
                        {
                            RefraSubAXEDroite2.Text = (axe - 90).ToString();
                            //   ExamenOptométriqueClass.CylindrePlusODOG = true;
                            //  ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }
                }
                /********************GroiteIntermediaire*************************************/
                if (RefraSubSPHGauche1.Text != "" && RefraSubCYLGauche1.Text != "" && RefraSubAXEGauche1.Text != "")
                {

                    int axeG = 0;
                    decimal sphereG, cylindreG = 0;

                    if (RefraSubSPHGauche1.Text != "")
                    {
                        if (decimal.TryParse(RefraSubSPHGauche1.Text, out sphereG))
                            sphereG = Convert.ToDecimal(RefraSubSPHGauche1.Text);
                        else
                            sphereG = 0;
                    }
                    else
                    {
                        RefraSubSPHGauche1.Text = "";
                        sphereG = 0;
                    }
                    if (RefraSubCYLGauche1.Text != "")
                    {
                        if (decimal.TryParse(RefraSubCYLGauche1.Text, out cylindreG))
                        {
                            cylindreG = Convert.ToDecimal(RefraSubCYLGauche1.Text);
                            if (cylindreG > 0)
                            {
                                ExamenOptométriqueClass.CylindrePlusRefra = true;
                                ExamenOptométriqueClass.CylindreMoinRefra = false;
                            }
                            else
                            {
                                if (cylindreG < 0)
                                {
                                    ExamenOptométriqueClass.CylindrePlusRefra = false;
                                    ExamenOptométriqueClass.CylindreMoinRefra = true;
                                }
                            }
                        }
                        else
                        {
                            cylindreG = 0;
                        }
                    }
                    else
                    {
                        RefraSubCYLGauche1.Text = "";
                        cylindreG = 0;
                    }

                    if (RefraSubAXEGauche1.Text != "")
                    {
                        if (int.TryParse(RefraSubAXEGauche1.Text, out axeG))
                        {
                            axeG = Convert.ToInt16(RefraSubAXEGauche1.Text);
                            gauche = true;
                        }
                        else
                            axeG = 0;
                    }
                    else
                    {
                        RefraSubAXEGauche1.Text = "";
                        axeG = 0;
                    }
                    RefraSubCYLGauche1.Text = ((-cylindreG)).ToString("+#.##;-#.##;0");
                    RefraSubSPHGauche1.Text = (sphereG + cylindreG).ToString("+#.##;-#.##;0");
                    if (ExamenOptométriqueClass.CylindrePlusRefra == true && ExamenOptométriqueClass.CylindreMoinRefra == false)
                    {
                        RefraSubAXEGauche1.Text = (axeG + 90).ToString();
                        //   ExamenOptométriqueClass.CylindrePlusODOG = false;
                        //   ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusRefra == false && ExamenOptométriqueClass.CylindreMoinRefra == true)
                        {
                            RefraSubAXEGauche1.Text = (axeG - 90).ToString();
                            //    ExamenOptométriqueClass.CylindrePlusODOG = true;
                            //    ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }

                }
                /********************GroiteIntermediaire*************************************/
                if (RefraSubSPHGauche2.Text != "" && RefraSubCYLGauche2.Text != "" && RefraSubAXEGauche2.Text != "")
                {

                    int axeG = 0;
                    decimal sphereG, cylindreG = 0;

                    if (RefraSubSPHGauche2.Text != "")
                    {
                        if (decimal.TryParse(RefraSubSPHGauche2.Text, out sphereG))
                            sphereG = Convert.ToDecimal(RefraSubSPHGauche2.Text);
                        else
                            sphereG = 0;
                    }
                    else
                    {
                        RefraSubSPHGauche2.Text = "";
                        sphereG = 0;
                    }
                    if (RefraSubCYLGauche2.Text != "")
                    {
                        if (decimal.TryParse(RefraSubCYLGauche2.Text, out cylindreG))
                        {
                            cylindreG = Convert.ToDecimal(RefraSubCYLGauche2.Text);
                            if (cylindreG > 0)
                            {
                                ExamenOptométriqueClass.CylindrePlusRefra = true;
                                ExamenOptométriqueClass.CylindreMoinRefra = false;
                            }
                            else
                            {
                                if (cylindreG < 0)
                                {
                                    ExamenOptométriqueClass.CylindrePlusRefra = false;
                                    ExamenOptométriqueClass.CylindreMoinRefra = true;
                                }
                            }
                        }
                        else
                        {
                            cylindreG = 0;
                        }
                    }
                    else
                    {
                        RefraSubCYLGauche2.Text = "";
                        cylindreG = 0;
                    }

                    if (RefraSubAXEGauche2.Text != "")
                    {
                        if (int.TryParse(RefraSubAXEGauche2.Text, out axeG))
                        {
                            axeG = Convert.ToInt16(RefraSubAXEGauche2.Text);
                            gauche = true;
                        }
                        else
                            axeG = 0;
                    }
                    else
                    {
                        RefraSubAXEGauche2.Text = "";
                        axeG = 0;
                    }
                    RefraSubCYLGauche2.Text = ((-cylindreG)).ToString("+#.##;-#.##;0");
                    RefraSubSPHGauche2.Text = (sphereG + cylindreG).ToString("+#.##;-#.##;0");
                    if (ExamenOptométriqueClass.CylindrePlusRefra == true && ExamenOptométriqueClass.CylindreMoinRefra == false)
                    {
                        RefraSubAXEGauche2.Text = (axeG + 90).ToString();
                        //   ExamenOptométriqueClass.CylindrePlusODOG = false;
                        //   ExamenOptométriqueClass.CylindreMoinODOG = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusRefra == false && ExamenOptométriqueClass.CylindreMoinRefra == true)
                        {
                            RefraSubAXEGauche2.Text = (axeG - 90).ToString();
                            //    ExamenOptométriqueClass.CylindrePlusODOG = true;
                            //    ExamenOptométriqueClass.CylindreMoinODOG = false;
                        }
                    }

                }
                if (droite == true || gauche == true)

                {
                    if (ExamenOptométriqueClass.CylindrePlusRefra == true && ExamenOptométriqueClass.CylindreMoinRefra == false)
                    {
                        ExamenOptométriqueClass.CylindrePlusRefra = false;
                        ExamenOptométriqueClass.CylindreMoinRefra = true;

                    }
                    else
                    {
                        if (ExamenOptométriqueClass.CylindrePlusRefra == false && ExamenOptométriqueClass.CylindreMoinRefra == true)
                        {
                            ExamenOptométriqueClass.CylindrePlusRefra = true;
                            ExamenOptométriqueClass.CylindreMoinRefra = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnImprimerExamenOptometrie_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ExamenOptometrieDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                {
                    SVC.examenopto selectedmont = ExamenOptometrieDatagrid.SelectedItem as SVC.examenopto;
                    List<SVC.examenopto> mm = new List<SVC.examenopto>();
                    mm.Add(selectedmont);
                    List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                    clientvvv.Add(Clientvv);
                    ExamenOptométrique cl = new ExamenOptométrique(proxy, mm, clientvvv);
                    cl.Show();
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnNewExamenBinoculaire_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    ExamenBinoculaireClass = new SVC.ExamenBinoculaire
                    {
                        Date = DateTime.Now,
                        UserName = memberuser.Username,
                        RaisonClient = Clientvv.Raison,
                        IdClient = Clientvv.Id,
                        VisionDesCouleursRouge = false,
                        VisionDesCouleursVert = false,
                        VisionDesCouleursBleu = false,
                        VisionDesCouleursChromatopsie = false,
                        Motricite1 = false,
                        Motricite2 = false,
                        Motricite3 = false,
                        Motricite4 = false,
                        Motricite5 = false,
                        Motricite6 = false,
                        Motricite7 = false,
                        Motricite8 = false,

                    };
                    GridExamenBinoculaire.DataContext = ExamenBinoculaireClass;
                    GridExamenBinoculaire.IsEnabled = true;
                    nouveauExamenBinoculaire = true;
                    ancieneExamenBinoculaire = false;


                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void AnnulerExamenBinoculaire_Click(object sender, RoutedEventArgs e)
        {

            try
            {
                GridExamenBinoculaire.IsEnabled = false;
                GridExamenBinoculaire.DataContext = null;
                nouveauExamenBinoculaire = false;
                ancieneExamenBinoculaire = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ValiderExamenBinoculaire_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (nouveauExamenBinoculaire == true && ancieneExamenBinoculaire == false && memberuser.CreationDossierClient == true)
                {

                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.InsertExamenBinoculaire(ExamenBinoculaireClass);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterExamenBinoculaireRefresh(Clientvv.Id);
                        GridExamenBinoculaire.IsEnabled = false;
                        GridExamenBinoculaire.DataContext = null;
                        ExamenBinoculaireClass = null;
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }



                else
                {
                    if (nouveauExamenBinoculaire == false && ancieneExamenBinoculaire == true && memberuser.ModificationDossierClient == true)
                    {

                        bool modifexamen = false;
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {
                            proxy.UpdateExamenBinoculaire(ExamenBinoculaireClass);
                            ts.Complete();
                            modifexamen = true;
                        }
                        if (modifexamen == true)
                        {

                            proxy.AjouterExamenBinoculaireRefresh(Clientvv.Id);
                            GridExamenBinoculaire.IsEnabled = false;
                            GridExamenBinoculaire.DataContext = null;
                            ExamenBinoculaireClass = null;
                            MessageBoxResult resul0d3 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btnEditExamenBinoculaire_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ExamenBinoculaireDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    ExamenBinoculaireClass = ExamenBinoculaireDatagrid.SelectedItem as SVC.ExamenBinoculaire;
                    GridExamenBinoculaire.DataContext = ExamenBinoculaireClass;
                    GridExamenBinoculaire.IsEnabled = true;

                    nouveauExamenBinoculaire = false;
                    ancieneExamenBinoculaire = true;

                    /**************************************************************/



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ExamenBinoculaireDatagrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (ExamenBinoculaireDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    ExamenBinoculaireClass = ExamenBinoculaireDatagrid.SelectedItem as SVC.ExamenBinoculaire;
                    GridExamenBinoculaire.DataContext = ExamenBinoculaireClass;
                    GridExamenBinoculaire.IsEnabled = true;

                    nouveauExamenBinoculaire = false;
                    ancieneExamenBinoculaire = true;

                    /**************************************************************/



                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void btnImprimerExamenBinoculaire_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ExamenBinoculaireDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                {
                    SVC.ExamenBinoculaire selectedmont = ExamenBinoculaireDatagrid.SelectedItem as SVC.ExamenBinoculaire;
                    List<SVC.ExamenBinoculaire> mm = new List<SVC.ExamenBinoculaire>();
                    mm.Add(selectedmont);
                    List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                    clientvvv.Add(Clientvv);
                    ImpressionExamenBinoculaire cl = new ImpressionExamenBinoculaire(proxy, mm, clientvvv);
                    cl.Show();
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void ValiderAdaptation_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (existeAdaptationLentille == false && memberuser.CreationDossierClient == true)
                {

                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.InsertAdaptationLentille(AdaptationLentilleClass);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterAdaptationLentilleRefresh(Clientvv.Id);
                        existeAdaptationLentille = true;
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }



                else
                {
                    if (existeAdaptationLentille == true && memberuser.ModificationDossierClient == true)
                    {

                        bool modifexamen = false;
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {
                            proxy.UpdateAdaptationLentille(AdaptationLentilleClass);
                            ts.Complete();
                            modifexamen = true;
                        }
                        if (modifexamen == true)
                        {

                            proxy.AjouterAdaptationLentilleRefresh(Clientvv.Id);
                            existeAdaptationLentille = true;

                            MessageBoxResult resul0d3 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ValiderAnam_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (existeAnamnese == false && memberuser.CreationDossierClient == true)
                {

                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.InsertAnamnese(AnamneseClass);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterAnamneseRefresh(Clientvv.Id);
                        existeAnamnese = true;
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }



                else
                {
                    if (existeAnamnese == true && memberuser.ModificationDossierClient == true)
                    {

                        bool modifexamen = false;
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {
                            proxy.UpdateAnamnese(AnamneseClass);
                            ts.Complete();
                            modifexamen = true;
                        }
                        if (modifexamen == true)
                        {

                            proxy.AjouterAnamneseRefresh(Clientvv.Id);
                            existeAnamnese = true;

                            MessageBoxResult resul0d3 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private static BitmapImage LoadImage(byte[] imageData)
        {

            if (imageData == null || imageData.Length == 0) return null;
            var image = new BitmapImage();
            using (var mem = new MemoryStream(imageData))
            {
                mem.Position = 0;
                image.BeginInit();
                image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;
                image.CacheOption = BitmapCacheOption.OnLoad;
                image.UriSource = null;
                image.StreamSource = mem;
                image.EndInit();
            }
            image.Freeze();
            return image;

        }
        private void inkCanvas1_Gesture(object sender, InkCanvasGestureEventArgs e)
        {
        }
        private void button1_Click(object sender, RoutedEventArgs e)
        {
            this.inkCanvas1.Strokes.Clear();
            MessageBox.Show("you have press the clear button");
        }
        public static BitmapImage ConvertByteArrayToBitmapImage(Byte[] bytes)
        {
            var stream = new MemoryStream(bytes);
            stream.Seek(0, SeekOrigin.Begin);
            var image = new BitmapImage();
            image.BeginInit();
            image.StreamSource = stream;
            image.EndInit();
            return image;
        }
        private void PaintDatagrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (PaintDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    PaintClass = PaintDatagrid.SelectedItem as SVC.Paint;
                    PaintGrid.DataContext = PaintClass;
                    Canvas canvas = new Canvas { Width = inkCanvas1.ActualWidth, Height = inkCanvas1.ActualHeight };

                    imagePaint = new System.Windows.Controls.Image
                    {
                        Width = 436,
                        Height = 205,
                        Source = ConvertByteArrayToBitmapImage(PaintClass.Image),
                    };
                    inkCanvas1.Children.Add(canvas);
                    canvas.Children.Add(imagePaint);
                    Canvas.SetTop(imagePaint, 75);
                    Canvas.SetLeft(imagePaint, 40);
                    Stream stream = new MemoryStream(PaintClass.InkCanvas);
                    inkCanvas1.Strokes = new System.Windows.Ink.StrokeCollection(stream);
                    existePaint = true;
                    commandeGrid.IsEnabled = true;
                    Inkcanvasgrid.IsEnabled = true;
                    creermodif = true;
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Title);
            }
        }

        private void btnNewPaint_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    Canvas canvas = new Canvas { Width = inkCanvas1.ActualWidth, Height = inkCanvas1.ActualHeight };
                    imagePaint = new System.Windows.Controls.Image
                    {
                        Width = 436,
                        Height = 205,
                        Source = new BitmapImage(new Uri(@"/NewOptics;component/Images/dessin.bmp", UriKind.Relative)),
                    };
                    inkCanvas1.Strokes.Clear();
                    inkCanvas1.Children.Add(canvas);
                    canvas.Children.Add(imagePaint);
                    Canvas.SetTop(imagePaint, 75);
                    Canvas.SetLeft(imagePaint, 40);
                    PaintClass = new SVC.Paint
                    {
                        Date = DateTime.Now,
                        IdClient = Clientvv.Id,
                        RaisonClient = Clientvv.Raison,
                        UserName = memberuser.Username,

                    };
                    PaintGrid.DataContext = PaintClass;
                    existePaint = false;
                    commandeGrid.IsEnabled = true;
                    Inkcanvasgrid.IsEnabled = true;
                    creermodif = true;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Title);

            }
        }
        public byte[] getJPGFromImageControl(BitmapImage imageC)
        {
            MemoryStream memStream = new MemoryStream();
            JpegBitmapEncoder encoder = new JpegBitmapEncoder();
            encoder.Frames.Add(BitmapFrame.Create(imageC));
            encoder.Save(memStream);
            return memStream.ToArray();
        }
        private void ValiderPaint_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true && existePaint == false && creermodif == true)
                {
                    MemoryStream ms = new MemoryStream();
                    inkCanvas1.Strokes.Save(ms);
                    byte[] bytes = ms.ToArray();
                    PaintClass.InkCanvas = bytes;
                    bool creationexamen = false;

                    if (imagePaint != null)
                    {

                        PaintClass.Image = getJPGFromImageControl(imagePaint.Source as BitmapImage);
                    }
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {

                        proxy.InsertPaint(PaintClass);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterPaintRefresh(Clientvv.Id);
                        existePaint = false;
                        commandeGrid.IsEnabled = false;
                        PaintDatagrid.DataContext = null;
                        PaintClass = null;
                        Inkcanvasgrid.IsEnabled = false;
                        creermodif = false;
                        inkCanvas1.Children.Clear();
                        inkCanvas1.Strokes.Clear();
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
                else
                {
                    if (memberuser.ModificationDossierClient == true && existePaint == true && creermodif == true)
                    {
                        MemoryStream ms = new MemoryStream();
                        inkCanvas1.Strokes.Save(ms);
                        byte[] bytes = ms.ToArray();
                        PaintClass.InkCanvas = bytes;
                        PaintClass.Date = DateTime.Now;
                        PaintClass.RaisonClient = Clientvv.Raison;
                        PaintClass.UserName = memberuser.Username;
                        bool creationexamen = false;
                        if (imagePaint != null)
                        {

                            PaintClass.Image = getJPGFromImageControl(imagePaint.Source as BitmapImage);
                        }
                        using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                        {
                            proxy.UpdatePaint(PaintClass);
                            ts.Complete();
                            creationexamen = true;

                        }
                        if (creationexamen == true)
                        {

                            proxy.AjouterPaintRefresh(Clientvv.Id);
                            existePaint = false;
                            commandeGrid.IsEnabled = false;
                            PaintDatagrid.DataContext = null;
                            PaintClass = null;
                            Inkcanvasgrid.IsEnabled = false;
                            creermodif = false;
                            inkCanvas1.Strokes.Clear();
                            inkCanvas1.Children.Clear();
                            MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void inkCanvas1_MouseMove(object sender, MouseEventArgs e)
        {
            inkCanvas1.Cursor = Cursors.Cross;
        }

        private void button2_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Now the window will be closed thanx for using InkPad");
            this.Close();
        }
        private void penSize_Click(object sender, RoutedEventArgs e)
        {

            RadioButton rad = sender as RadioButton;
            DrawingAttributes inkDA = new DrawingAttributes();
            inkDA.Width = rad.FontSize;
            inkDA.Height = rad.FontSize;
            inkDA.Color = inkCanvas1.DefaultDrawingAttributes.Color;
            inkDA.IsHighlighter = inkCanvas1.DefaultDrawingAttributes.IsHighlighter;
            inkCanvas1.DefaultDrawingAttributes = inkDA;

        }
        private void rad_Click(object sender, RoutedEventArgs e)
        {
            RadioButton rad = sender as RadioButton;
            inkCanvas1.EditingMode = (InkCanvasEditingMode)rad.Tag;
        }

        private void btnStylusSetting_Click(object sender, RoutedEventArgs e)
        {
            StylusSettings dlg = new StylusSettings(proxy);
            dlg.Owner = this;
            dlg.DrawingAttributes = inkCanvas1.DefaultDrawingAttributes;
            if ((bool)dlg.ShowDialog().GetValueOrDefault())
            {
                inkCanvas1.DefaultDrawingAttributes = dlg.DrawingAttributes;
            }
        }

        private void btnLoadImage_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.CreationDossierClient == true)
                {
                    opLoadInc = new Microsoft.Win32.OpenFileDialog();
                    opLoadInc.Title = "Select a picture";
                    opLoadInc.Filter = "All supported graphics|*.jpg;*.jpeg;*.png|" +
                        "Bitmap files |*.bmp;*.bmp|" +
                        "Portable Network Graphic (*.png)|*.png";
                    if (opLoadInc.ShowDialog() == true)
                    {


                        Canvas canvas = new Canvas { Width = inkCanvas1.ActualWidth, Height = inkCanvas1.ActualHeight };
                        imagePaint = new System.Windows.Controls.Image
                        {
                            Width = 436,
                            Height = 205,
                            Source = new BitmapImage(new Uri(opLoadInc.FileName)),
                        };
                        inkCanvas1.Children.Clear();
                        inkCanvas1.Children.Add(canvas);
                        canvas.Children.Add(imagePaint);
                        Canvas.SetTop(imagePaint, 75);
                        Canvas.SetLeft(imagePaint, 40);
                    }


                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void AnnulerPaint_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                existePaint = false;
                commandeGrid.IsEnabled = false;
                PaintDatagrid.DataContext = null;
                PaintClass = null;
                Inkcanvasgrid.IsEnabled = false;
                creermodif = false;
                inkCanvas1.Children.Clear();
                inkCanvas1.Strokes.Clear();
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btnSuppPaint_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.SupressionDossierClient == true && PaintDatagrid.SelectedItem != null)
                {
                    SVC.Paint selectedpaint = PaintDatagrid.SelectedItem as SVC.Paint;
                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.DeletePaint(selectedpaint);
                        creationexamen = true;
                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterPaintRefresh(Clientvv.Id);
                        existePaint = false;
                        commandeGrid.IsEnabled = false;
                        PaintDatagrid.DataContext = null;
                        PaintClass = null;
                        Inkcanvasgrid.IsEnabled = false;
                        creermodif = false;
                        inkCanvas1.Strokes.Clear();
                        inkCanvas1.Children.Clear();
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }



        private void btnSuppExamenBinoculaire_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (memberuser.SupressionDossierClient == true && ExamenBinoculaireDatagrid.SelectedItem != null)
                {
                    SVC.ExamenBinoculaire selectedexamen = ExamenBinoculaireDatagrid.SelectedItem as SVC.ExamenBinoculaire;
                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.DeleteExamenBinoculaire(selectedexamen);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterExamenBinoculaireRefresh(Clientvv.Id);
                        GridExamenBinoculaire.IsEnabled = false;
                        GridExamenBinoculaire.DataContext = null;
                        ExamenBinoculaireClass = null;
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }

        private void btnEditPaint_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (PaintDatagrid.SelectedItem != null && memberuser.ModificationDossierClient == true)
                {
                    PaintClass = PaintDatagrid.SelectedItem as SVC.Paint;
                    PaintGrid.DataContext = PaintClass;
                    Canvas canvas = new Canvas { Width = inkCanvas1.ActualWidth, Height = inkCanvas1.ActualHeight };

                    imagePaint = new System.Windows.Controls.Image
                    {
                        Width = 436,
                        Height = 205,
                        Source = ConvertByteArrayToBitmapImage(PaintClass.Image),
                    };
                    inkCanvas1.Children.Add(canvas);
                    canvas.Children.Add(imagePaint);
                    Canvas.SetTop(imagePaint, 75);
                    Canvas.SetLeft(imagePaint, 40);
                    Stream stream = new MemoryStream(PaintClass.InkCanvas);
                    inkCanvas1.Strokes = new System.Windows.Ink.StrokeCollection(stream);
                    existePaint = true;
                    commandeGrid.IsEnabled = true;
                    Inkcanvasgrid.IsEnabled = true;
                    creermodif = true;
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btnSuppExamenOptometrie_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (memberuser.SupressionDossierClient == true && ExamenOptometrieDatagrid.SelectedItem != null)
                {
                    SVC.examenopto selectedexamen = ExamenOptometrieDatagrid.SelectedItem as SVC.examenopto;
                    bool creationexamen = false;
                    using (var ts = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        proxy.DeleteExamensOptométriques(selectedexamen);
                        ts.Complete();
                        creationexamen = true;

                    }
                    if (creationexamen == true)
                    {

                        proxy.AjouterExamensOptométriquesRefresh(Clientvv.Id);
                        GridExamenOptometrique.IsEnabled = false;
                        GridExamenOptometrique.DataContext = null;
                        ExamenOptométriqueClass = null;
                        MessageBoxResult resul03 = Xceed.Wpf.Toolkit.MessageBox.Show(NewOptics.Properties.Resources.OperationSuccées, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void chcout_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                if (chcout.IsChecked == true)
                {

                    var existe = (proxy.GetAllProdf().Any(n => n.quantite != 0));
                    if (existe == true)
                    {
                        List<SVC.Prodf> listprodfcoutmoyen = new List<SVC.Prodf>();

                        var listeCPcode = (from ta in proxy.GetAllProdf()

                                           where ta.quantite != 0
                                           select ta.cp).Distinct();
                        foreach (int cp in listeCPcode)
                        {
                            SVC.Prodf pp = new SVC.Prodf
                            {
                                cp = cp,
                                quantite = 0,
                                previent = 0,
                                prixa = 0,
                                prixb = 0,
                                prixc = 0,

                            };
                            listprodfcoutmoyen.Add(pp);
                        }
                        List<SVC.Prodf> listprodf = (proxy.GetAllProdf().Where(n => n.quantite != 0).ToList());

                        foreach (var existeinfirst in listprodfcoutmoyen)
                        {

                            string ValueCompte = "";
                            if (CompteComboBox.SelectedIndex >= 0)
                            {

                                ValueCompte = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                                foreach (SVC.Prodf itemprodf in listprodf.Reverse<SVC.Prodf>())
                                {


                                    if (existeinfirst.cp == itemprodf.cp)
                                    {
                                        /*    existeinfirst.quantite = listprodf.AsEnumerable().Sum(n=>n.quantite);
                                            existeinfirst.previent = (listprodf.AsEnumerable().Sum(n => n.previent)) / existeinfirst.quantite;
                                            existeinfirst.privente = (listprodf.AsEnumerable().Sum(n => n.privente)) / existeinfirst.quantite;
                                        existeinfirst.prixa = (listprodf.AsEnumerable().Sum(n => n.prixa)) / existeinfirst.quantite;
                                        existeinfirst.prixb = (listprodf.AsEnumerable().Sum(n => n.prixb)) / existeinfirst.quantite;
                                        existeinfirst.prixc = (listprodf.AsEnumerable().Sum(n => n.prixc)) / existeinfirst.quantite;
                                        */

                                        existeinfirst.design = itemprodf.design;


                                        existeinfirst.design = itemprodf.design;
                                        existeinfirst.previent = ((existeinfirst.previent * existeinfirst.quantite) + (itemprodf.previent * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);

                                        existeinfirst.prixa = ((existeinfirst.prixa * existeinfirst.quantite) + (itemprodf.prixa * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);
                                        existeinfirst.prixb = ((existeinfirst.prixb * existeinfirst.quantite) + (itemprodf.prixb * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);
                                        existeinfirst.prixc = ((existeinfirst.prixc * existeinfirst.quantite) + (itemprodf.prixc * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);
                                        existeinfirst.quantite = existeinfirst.quantite + itemprodf.quantite;





                                        switch (ValueCompte)
                                        {
                                            case "Prixa":

                                                existeinfirst.privente = ((existeinfirst.prixa * existeinfirst.quantite) + (itemprodf.prixa * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);


                                                break;
                                            case "Prixb":

                                                existeinfirst.privente = ((existeinfirst.prixb * existeinfirst.quantite) + (itemprodf.prixb * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);

                                                break;

                                            case "Prixc":

                                                existeinfirst.privente = ((existeinfirst.prixc * existeinfirst.quantite) + (itemprodf.prixc * itemprodf.quantite)) / (existeinfirst.quantite + itemprodf.quantite);

                                                break;

                                            default:


                                                break;
                                        }


                                    }
                                }
                            }




                            NomenclatureProduit.ItemsSource = listprodfcoutmoyen;
                        }



                    }
                }
            }

            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chcout_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {
                NomenclatureProduit.ItemsSource = (proxy.GetAllProdf().OrderBy(n => n.design));
                string ValueCompte = "";
                if (CompteComboBox.SelectedIndex >= 0)
                {

                    var test = NomenclatureProduit.ItemsSource as IEnumerable;



                    ValueCompte = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                    switch (ValueCompte)
                    {
                        case "Prixa":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixa;
                            }

                            break;
                        case "Prixb":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixb;
                            }
                            break;

                        case "Prixc":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixc;
                            }
                            break;

                        default:


                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void CompteComboBox_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            try
            {
                /* if (CompteComboBox.SelectedIndex >= 0)
                 {
                     lhdfhabel.Text = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                     lhdfdfhabel.Foreground = System.Windows.Media.Brushes.Green;
                 }
                 else
                 {
                     lhdfhabel.Text = "Vous devez choisir un tarif";
                     lhdfdfhabel.Foreground = System.Windows.Media.Brushes.Red;
                 }*/

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void CompteComboBox_PopupClosed(object sender, ClosePopupEventArgs e)
        {
            try
            {

                string ValueCompte = "";
                if (CompteComboBox.SelectedIndex >= 0)
                {

                    var test = NomenclatureProduit.ItemsSource as IEnumerable;



                    ValueCompte = ((ComboBoxEditItem)CompteComboBox.SelectedItem).Content.ToString();
                    switch (ValueCompte)
                    {
                        case "Prixa":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixa;
                            }

                            break;
                        case "Prixb":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixb;
                            }
                            break;

                        case "Prixc":
                            foreach (SVC.Prodf item in test)
                            {
                                item.privente = item.prixc;
                            }
                            break;

                        default:
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionmonture = 1;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void RadioButton_Checked_1(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionmonture = 2;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void RadioButton_Checked_2(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionmonture = 3;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void RadioButton_Checked_3(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionmonture = 4;

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }
        private void RunRecu(List<SVC.Depeiment> listerecu, List<SVC.F1> listevisite)
        {
            try
            {

                LocalReport reportViewer1 = new LocalReport();


                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.RecuDePaiement), false);
                // LocalReport reportViewer1 = new LocalReport();
                reportViewer1.LoadReportDefinition(MyRptStream);


                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = listerecu;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));


                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", listevisite));

                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                Export(reportViewer1);
                Print(true);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void RunAtelierDouble(List<SVC.Monture> monture, List<SVC.ClientV> CLIENRECU)
        {
            try
            {

                LocalReport reportViewer1 = new LocalReport();


                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.FicheAtelierMontureDouble), false);
                // LocalReport reportViewer1 = new LocalReport();
                reportViewer1.LoadReportDefinition(MyRptStream);


                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = monture;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));


                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", CLIENRECU));

                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                ExportA4(reportViewer1);
                Print(false);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void RunAtelier(List<SVC.Monture> monture, List<SVC.ClientV> CLIENRECU)
        {
            try
            {

                LocalReport reportViewer1 = new LocalReport();


                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.FicheAtelierMonture), false);
                // LocalReport reportViewer1 = new LocalReport();
                reportViewer1.LoadReportDefinition(MyRptStream);


                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = monture;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));


                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", CLIENRECU));

                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                ExportA4(reportViewer1);
                Print(false);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void RunMonturePaiement(List<SVC.Monture> monture, List<SVC.ClientV> CLIENRECU, List<SVC.F1> listevisite, List<SVC.Depeiment> listerecu)
        {
            try
            {
                
                LocalReport reportViewer1 = new LocalReport();

                
                    MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.ImpressionFicheAtelierMontureRecu), false);
                    // LocalReport reportViewer1 = new LocalReport();
                    reportViewer1.LoadReportDefinition(MyRptStream);
               

                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = monture;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));

           
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", CLIENRECU));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet4", listerecu));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet5", listevisite));
                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                ExportA4(reportViewer1);
                Print(false);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }
        private Stream CreateStream(string name,
  string fileNameExtension, Encoding encoding,
  string mimeType, bool willSeek)
        {
            Stream stream = new MemoryStream();
            m_streams.Add(stream);
            return stream;
        }
        /* private void Print()
         {
             try
             {
                 if (m_streams == null || m_streams.Count == 0)
                     throw new Exception("Error: no stream to print.");
                 PrintDocument printDoc = new PrintDocument();
                 if (!printDoc.PrinterSettings.IsValid)
                 {
                     throw new Exception("Error: cannot find the default printer.");
                 }
                 else
                 {
                     printDoc.PrintPage += new PrintPageEventHandler(PrintPage);
                     m_currentPageIndex = 0;
                     printDoc.DocumentName = Clientvv.Raison;
                     printDoc.Print();
                 }
             }
             catch (Exception ex)
             {
                 MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

             }
         }*/
        private void Print(bool landscape)
        {
            try
            {
                if (m_streams == null || m_streams.Count == 0)
                    throw new Exception("Error: no stream to print.");
                PrintDocument printdoc = new PrintDocument();
                if (!printdoc.PrinterSettings.IsValid)
                {
                    throw new Exception("Error: cannot find the default printer.");
                }
                else
                {
                    printdoc.DefaultPageSettings.Landscape = landscape;
                    printdoc.PrintPage += new PrintPageEventHandler(PrintPage);
                    m_currentPageIndex = 0;
                    printdoc.DocumentName = Clientvv.Raison;
                    printdoc.Print();
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }
        private void PrintPage(object sender, PrintPageEventArgs ev)
        {
            try
            {
                Metafile pageImage = new
                   Metafile(m_streams[m_currentPageIndex]);

                // Adjust rectangular area with printer margins.
                System.Drawing.Rectangle adjustedRect = new System.Drawing.Rectangle(
                    ev.PageBounds.Left - (int)ev.PageSettings.HardMarginX,
                    ev.PageBounds.Top - (int)ev.PageSettings.HardMarginY,
                    ev.PageBounds.Width,
                    ev.PageBounds.Height);

                // Draw a white background for the report
                ev.Graphics.FillRectangle(new System.Drawing.SolidBrush(System.Drawing.Color.White), adjustedRect);

                // Draw the report content
                ev.Graphics.DrawImage(pageImage, adjustedRect);

                // Prepare for the next page. Make sure we haven't hit the end.
                m_currentPageIndex++;
                ev.HasMorePages = (m_currentPageIndex < m_streams.Count);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }
        private void Export(LocalReport report)
        {
            try
            {

                /* string deviceInfo =
                   @"<DeviceInfo>
                 <OutputFormat>EMF</OutputFormat>
                  <PageWidth>& w / 100 & "in</PageWidth>
                 <PageHeight>& h / 100 & </PageHeight>
                 <MarginTop>0.cm</MarginTop>
                 <MarginLeft>0in</MarginLeft>
                 <MarginRight>0in</MarginRight>
                 <MarginBottom>0in</MarginBottom>
             </DeviceInfo>";*/

                string deviceInfo =
                     @"<DeviceInfo>
                <OutputFormat>EMF</OutputFormat>
                <PageWidth>11.75in</PageWidth>
                <PageHeight>8.5in</PageHeight>
                <MarginTop>0.5cm</MarginTop>
                <MarginLeft>0in</MarginLeft>
                <MarginRight>0in</MarginRight>
                <MarginBottom>0.39in</MarginBottom>
            </DeviceInfo>";


                Warning[] warnings;
                m_streams = new List<Stream>();
                report.Render("Image", deviceInfo, CreateStream,
                   out warnings);
                foreach (Stream stream in m_streams)
                    stream.Position = 0;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void ExportA4(LocalReport report)
        {
            try
            {
                string deviceInfo =
                  @"<DeviceInfo>
                <OutputFormat>EMF</OutputFormat>
                <PageWidth>5,708661in</PageWidth>
                <PageHeight>8,26772in</PageHeight>
                <MarginTop>0in</MarginTop>
                <MarginLeft>0in</MarginLeft>
                <MarginRight>0in</MarginRight>
                <MarginBottom>0in</MarginBottom>
            </DeviceInfo>";
                Warning[] warnings;
                m_streams = new List<Stream>();
                report.Render("Image", deviceInfo, CreateStream,
                   out warnings);
                foreach (Stream stream in m_streams)
                    stream.Position = 0;
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message,NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }



        private void btnSave_Click(object sender, RoutedEventArgs args)
        {
            SaveFileDialog dlg = new SaveFileDialog();
            //   dlg.Filter = "Ink Serialized Format (*.isf)|*.isf|" +
            //             "Bitmap files (*.bmp)|*.bmp";
            dlg.Filter = "Bitmap files (*.bmp)|*.bmp";
            if ((bool)dlg.ShowDialog(this))
            {
                try
                {
                    using (FileStream file = new FileStream(dlg.FileName,
                                            FileMode.Create, FileAccess.Write))
                    {
                        //Ink Serialized Format
                        /* if (dlg.FilterIndex == 1)
                         {
                             inkCanvas1.Strokes.Save(file);
                             file.Close();
                         }
                         //bitmap object
                         else
                         {*/
                        int marg = int.Parse(inkCanvas1.Margin.Left.ToString());
                        /*    RenderTargetBitmap rtb = new RenderTargetBitmap((int)inkCanvas1.ActualWidth - marg,
                                            (int)inkCanvas1.ActualHeight - marg, 0, 0, PixelFormats.Default);*///.PointToScreen(locationFromWindow);

                        RenderTargetBitmap rtb = new RenderTargetBitmap((int)inkCanvas1.ActualWidth + Convert.ToInt32(inkCanvas1.GetPosition().X) / 2,
                                           (int)inkCanvas1.ActualHeight + Convert.ToInt32(inkCanvas1.GetPosition().Y) / 2, 0, 0, PixelFormats.Default);
                        rtb.Render(inkCanvas1);
                        BmpBitmapEncoder encoder = new BmpBitmapEncoder();
                        encoder.Frames.Add(BitmapFrame.Create(rtb));
                        encoder.Save(file);
                        file.Close();
                        // }
                    }
                }
                catch (Exception exc)
                {
                    MessageBox.Show(exc.Message, Title);
                }

            }
        }

        private void chimpression_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                visualiser = true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void Ficheatelier_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionlentille = 1;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void Reçu_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionlentille = 2;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void atelierreçu_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionlentille = 3;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void _double_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionlentille = 4;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chimpression_Checked_1(object sender, RoutedEventArgs e)
        {
            try
            {
                visualiserLentille =true;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chimpression_Unchecked_1(object sender, RoutedEventArgs e)
        {
            try
            {
                visualiserLentille= false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chimpression_Unchecked(object sender, RoutedEventArgs e)
        {

            try
            {
                visualiser = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }

        }

        private void btnCreerImpression_Click_1(object sender, RoutedEventArgs e)
        {
            try
            {
                if (visualiserLentille == true)
                {
                    switch (interfaceimpressionlentille)
                    {
                        case 1:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selectedmont = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                List<SVC.LentilleClient> mm = new List<SVC.LentilleClient>();
                                mm.Add(selectedmont);
                                List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                clientvvv.Add(Clientvv);
                                ImpressionLentille cl = new ImpressionLentille(proxy, mm, clientvvv, interfaceimpressionlentille);
                                cl.Show();
                                dialog1.Close();
                                interfaceimpressionlentille = 0;
                                visualiserLentille = false;
                            }
                            break;
                        case 4:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selectedmont = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                List<SVC.LentilleClient> mm = new List<SVC.LentilleClient>();
                                mm.Add(selectedmont);
                                List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                clientvvv.Add(Clientvv);
                                ImpressionLentille cl = new ImpressionLentille(proxy, mm, clientvvv, interfaceimpressionlentille);
                                cl.Show();

                                dialog1.Close();
                                interfaceimpressionlentille = 0;
                                visualiserLentille = false;
                            }
                            break;
                        case 3:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selecedmonture = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                {
                                    List<SVC.LentilleClient> listmonture = new List<SVC.LentilleClient>();
                                    listmonture.Add(selecedmonture);
                                    var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                    if (VisiteApayerexiste == true)
                                    {
                                        SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                        var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                        if (dpfexiste == true)
                                        {
                                            /*  List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                              List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                              listedepaiem.Add(dpf.First()); */

                                            List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                            List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                            dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                            listedepaiem.Add(dpf.Last());

                                            List<SVC.F1> listevisite = new List<SVC.F1>();
                                            listevisite.Add(VisiteApayer);
                                            List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                            listclient.Add(Clientvv);
                                            ImpressionLentilleRecu cl = new ImpressionLentilleRecu(proxy, listmonture, listclient, listedepaiem, listevisite);
                                            cl.Show();
                                            dialog1.Close();
                                            interfaceimpressionlentille = 0;
                                            visualiserLentille = false;
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }
                                }
                                else
                                {
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                    {
                                        List<SVC.LentilleClient> listmonture = new List<SVC.LentilleClient>();
                                        listmonture.Add(selecedmonture);
                                        
                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                /*  List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                  List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                  listedepaiem.Add(dpf.First()); */

                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());

                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                SVC.F1 VisiteApayer = new SVC.F1
                                                {
                                                codeclient=selecedmonture.IdClient,
                                                raison=selecedmonture.RaisonClient,
                                                };
                                                listevisite.Add(VisiteApayer);
                                                List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                                listclient.Add(Clientvv);
                                                ImpressionLentilleRecu cl = new ImpressionLentilleRecu(proxy, listmonture, listclient, listedepaiem, listevisite);
                                                cl.Show();
                                                dialog1.Close();
                                                interfaceimpressionlentille = 0;
                                                visualiserLentille = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                            }
                                       
                                    }
                                }

                            }
                            break;
                        case 2:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selecedmonture = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                {
                                    var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                    if (VisiteApayerexiste == true)
                                    {
                                        SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                        var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                        if (dpfexiste == true)
                                        {
                                            //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                            List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                            List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                            dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                            listedepaiem.Add(dpf.Last());
                                            List<SVC.F1> listevisite = new List<SVC.F1>();
                                            listevisite.Add(VisiteApayer);
                                            ImpressionRecu cl = new ImpressionRecu(proxy, listedepaiem, listevisite);
                                            cl.Show();
                                            dialog1.Close();
                                            interfaceimpressionlentille = 0;
                                            visualiserLentille = false;
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }

                                }
                                else
                                {
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                    {
                                        
                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());
                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                SVC.F1 VisiteApayer = new SVC.F1
                                                {
                                                    codeclient=selecedmonture.IdClient,
                                                    raison=selecedmonture.RaisonClient,
                                                };
                                                listevisite.Add(VisiteApayer);
                                                ImpressionRecu cl = new ImpressionRecu(proxy, listedepaiem, listevisite);
                                                cl.Show();
                                                dialog1.Close();
                                                interfaceimpressionlentille = 0;
                                                visualiserLentille = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                }
                            
                                break;
                            
                    }
                }
                else
                {
                    switch (interfaceimpressionlentille)
                    {
                        case 1:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selectedmont = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                List<SVC.LentilleClient> mm = new List<SVC.LentilleClient>();
                                mm.Add(selectedmont);
                                List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                clientvvv.Add(Clientvv);
                                RunAtelierLentille(mm,clientvvv);
                                dialog1.Close();
                                interfaceimpressionlentille = 0;
                                visualiserLentille = false;
                            }
                            break;
                        case 2:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selecedmonture = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                {
                                    var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                    if (VisiteApayerexiste == true)
                                    {
                                        SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                        var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                        if (dpfexiste == true)
                                        {
                                            //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                            List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                            List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                            dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                            listedepaiem.Add(dpf.Last());
                                            List<SVC.F1> listevisite = new List<SVC.F1>();
                                            listevisite.Add(VisiteApayer);
                                            RunRecu(listedepaiem, listevisite);
                                            dialog1.Close();
                                            interfaceimpressionlentille = 0;
                                            visualiserLentille = false;
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }
                                }
                                else
                                {
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                    {
                                        var VisiteApayerexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                        if (VisiteApayerexiste == true)
                                        {
                                            
                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());
                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                SVC.F1 VisiteApayer = new SVC.F1
                                                {
                                                 codeclient=selecedmonture.IdClient,
                                                 raison=selecedmonture.RaisonClient,
                                                };
                                                listevisite.Add(VisiteApayer);
                                                RunRecu(listedepaiem, listevisite);
                                                dialog1.Close();
                                                interfaceimpressionlentille = 0;
                                                visualiserLentille = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                }
                            }
                            break;
                        case 3:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selecedmonture = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                {
                                    List<SVC.LentilleClient> listmonture = new List<SVC.LentilleClient>();
                                    listmonture.Add(selecedmonture);
                                    var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                    if (VisiteApayerexiste == true)
                                    {
                                        SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                        var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                        if (dpfexiste == true)
                                        {
                                            /*  List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                              List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                              listedepaiem.Add(dpf.First()); */

                                            List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                            List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                            dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                            listedepaiem.Add(dpf.Last());

                                            List<SVC.F1> listevisite = new List<SVC.F1>();
                                            listevisite.Add(VisiteApayer);
                                            List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                            listclient.Add(Clientvv);
                                            RunLentillePaiement(listmonture, listclient, listedepaiem, listevisite);
                                            dialog1.Close();
                                            interfaceimpressionlentille = 0;
                                            visualiserLentille = false;
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                        }
                                    }
                                    else
                                    {
                                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                    }

                                }
                                else
                                {
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                    {
                                        List<SVC.LentilleClient> listmonture = new List<SVC.LentilleClient>();
                                        listmonture.Add(selecedmonture);
                                       
                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                /*  List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                  List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                  listedepaiem.Add(dpf.First()); */

                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());

                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                            SVC.F1 VisiteApayer = new SVC.F1
                                            {
                                                codeclient = selecedmonture.IdClient,
                                                raison = selecedmonture.RaisonClient,
                                            };
                                                listevisite.Add(VisiteApayer);
                                                List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                                listclient.Add(Clientvv);
                                                RunLentillePaiement(listmonture, listclient, listedepaiem, listevisite);
                                                dialog1.Close();
                                                interfaceimpressionlentille = 0;
                                                visualiserLentille = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                            }
                                       
                                    }
                                }
                            }
                            break;
                        case 4:
                            if (LentilleDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                            {
                                SVC.LentilleClient selectedmont = LentilleDatagrid.SelectedItem as SVC.LentilleClient;
                                List<SVC.LentilleClient> mm = new List<SVC.LentilleClient>();
                                mm.Add(selectedmont);
                                List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                clientvvv.Add(Clientvv);
                                RunAtelierLentilleDouble(mm, clientvvv);
                                dialog1.Close();
                                interfaceimpressionlentille = 0;
                                visualiserLentille = false;
                            }
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        private void RunAtelierLentilleDouble(List<SVC.LentilleClient> monture, List<SVC.ClientV> CLIENRECU)
        {
            try
            {

                LocalReport reportViewer1 = new LocalReport();


                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.LentilleDouble), false);
                // LocalReport reportViewer1 = new LocalReport();
                reportViewer1.LoadReportDefinition(MyRptStream);


                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = monture;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));


                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", CLIENRECU));

                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                ExportA4(reportViewer1);
                Print(false);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void RunAtelierLentille(List<SVC.LentilleClient> monture, List<SVC.ClientV> CLIENRECU)
        {
            try
            {

                LocalReport reportViewer1 = new LocalReport();


                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.FicheAtelierLentille), false);
                // LocalReport reportViewer1 = new LocalReport();
                reportViewer1.LoadReportDefinition(MyRptStream);


                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = monture;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));


                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", CLIENRECU));

                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                ExportA4(reportViewer1);
                Print(false);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }
        private void RunLentillePaiement(List<SVC.LentilleClient> monture, List<SVC.ClientV> CLIENRECU,List<SVC.Depeiment> listerecu,List<SVC.F1> listevisite)
        {
             
            try
            {

                LocalReport reportViewer1 = new LocalReport();


                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.LentilleRecu), false);
                // LocalReport reportViewer1 = new LocalReport();
                reportViewer1.LoadReportDefinition(MyRptStream);


                //reportViewer1.LoadReportDefinition(MyRptStream);

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                rds.Value = monture;
                reportViewer1.DataSources.Add(rds);
                var selpara = new List<SVC.Param>();
                SVC.Param paramlocal = (proxy.GetAllParamétre());
                paramlocal.logo = "D/Logo.jpg";
                selpara.Add((paramlocal));


                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", selpara));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", CLIENRECU));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet4", listerecu));
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet5", listevisite));
                if (proxy.GetAllParamétre().logo != "")
                {

                    if (proxy.DownloadDocumentIsHere(proxy.GetAllParamétre().logo.ToString()) == true)
                    {
                        reportViewer1.EnableExternalImages = true;

                        String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                        ReportParameter paramLogo = new ReportParameter();
                        paramLogo.Name = "ImagePath";
                        //  paramLogo.Values.Add(@"file:///C:\Logo.png");
                        paramLogo.Values.Add(@"file:///" + photolocation);
                        reportViewer1.SetParameters(paramLogo);
                        // reportViewer1.LocalReport.SetParameters(parameter);
                    }

                }
                reportViewer1.Refresh();

                ExportA4(reportViewer1);
                Print(false);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void RunFactureTunisie(SVC.ServiceCliniqueClient proxyrecu, List<SVC.F1> Nfact, SVC.ClientV CLIENRECU, int interfaceimm)
        {
            try
            {
                LocalReport reportViewer1 = new LocalReport();
                var selpara = new List<SVC.Param>();
                SVC.Param selectpara = proxy.GetAllParamétre();
                /******************************/
                string nfact = Nfact.First().nfact.Substring(0, 1);
                string arrété = "";
                string document = "";
                switch (nfact)
                {
                    case "F":

                        document = "Facture";
                        arrété = "Arrétée la présente facture à la somme de";

                        selectpara.ImpressionCollisage = false;
                        break;
                    case "A":

                        arrété = "Arrétée la présente facture d'Avoir à la somme de";
                        document = "Facture d'Avoir";

                        selectpara.ImpressionCollisage = false;
                        break;
                    case "B":

                        arrété = "Arrétée le présent Bon de Livraison à la somme de";
                        document = "Bon de Livraison";

                        // selectpara.ImpressionCollisage = false;
                        break;
                    case "C":

                        arrété = "Arrétée le présent Avoir de Bon de Livraison à la somme de";
                        document = "Bon d'Avoir";


                        break;
                    case "P":

                        arrété = "Arrétée la présente facture Proforma à la somme de";
                        document = "Facture Proforma";

                        selectpara.ImpressionCollisage = false;
                        break;
                    case "R":

                        arrété = "Arrétée la présente facture à la somme de";
                        document = "Facture";

                        selectpara.ImpressionCollisage = false;
                        break;
                }

                /******************Dataset1 parametre****************************/

                selpara.Add(selectpara);

                /****************Convertion*****************/
                string Montant = "";



                /************************************/
                if (interfaceimm == 2)
                {

                    if (Nfact.First().net > 0)
                    {
                        Montant = (Convert.ToDecimal(Nfact.First().net)).ToText(Nut.Currency.EUR, Nut.Language.French);

                    }
                    else
                    {
                        if (Nfact.First().net < 0)
                        {
                            var mm = -Nfact.First().net;
                            Montant = "Moin " + (Convert.ToDecimal(mm)).ToText(Nut.Currency.EUR, Nut.Language.French);
                        }
                    }
                    Montant = Montant.Replace("euro", selpara.First().Limon.ToString());
                    Montant = Montant.Replace("centime", "millime");


                    MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.BonDeLivraisonDemiTunisie), false);

                    reportViewer1.LoadReportDefinition(MyRptStream);


                }
                else
                {
                    if (interfaceimm == 1)
                    {
                        if (selectpara.FactureSansTva == false)
                        {
                            if (Nfact.First().net > 0)
                            {
                                Montant = (Convert.ToDecimal(Nfact.First().net)).ToText(Nut.Currency.EUR, Nut.Language.French);

                            }
                            else
                            {
                                if (Nfact.First().net < 0)
                                {
                                    var mm = -Nfact.First().net;
                                    Montant = "Moin " + (Convert.ToDecimal(mm)).ToText(Nut.Currency.EUR, Nut.Language.French);
                                }
                            }
                            Montant = Montant.Replace("euro", selpara.First().Limon.ToString());
                            Montant = Montant.Replace("centime", "millime");
                            MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.FactureTunisienne), false);

                            reportViewer1.LoadReportDefinition(MyRptStream);


                        }
                        else
                        {
                            if (selectpara.FactureSansTva == true)
                            {
                                if (Nfact.First().net > 0)
                                {
                                    Montant = (Convert.ToDecimal(Nfact.First().net)).ToText(Nut.Currency.EUR, Nut.Language.French);

                                }
                                else
                                {
                                    if (Nfact.First().net < 0)
                                    {
                                        var mm = -Nfact.First().net;
                                        Montant = "Moin " + (Convert.ToDecimal(mm)).ToText(Nut.Currency.EUR, Nut.Language.French);
                                    }
                                }
                                Montant = Montant.Replace("euro", selpara.First().Limon.ToString());
                                Montant = Montant.Replace("centime", "millime");
                                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.FactureSansTva), false);

                                reportViewer1.LoadReportDefinition(MyRptStream);
                            }

                        }
                    }
                }

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                                      //            listerecu=proxy.GetAllSalleDattente();         // rds.Value = proxy1.GetAllMembership();
                rds.Value = Nfact;
                reportViewer1.DataSources.Add(rds);
                /**************************************************/
                var ClientList = new List<SVC.ClientV>();
                ClientList.Add(CLIENRECU);
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet4", ClientList));
                /********************************************/
                var FactureList = proxy.GetAllFactureBycompteur(Nfact.First().nfact);

                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", FactureList.ToList()));
                /*********************************************/

                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", selpara));
                /*****************dataset 5***************/
                List<TVACLASS> listrva = new List<TVACLASS>();
                foreach (var facture in FactureList)
                {
                    if (listrva.Any(n => n.TVA == facture.tva) == false)
                    {
                        TVACLASS tt = new TVACLASS
                        {
                            TVA = Convert.ToDecimal(facture.tva),
                            BASE = Convert.ToDecimal(facture.privente * facture.quantite),
                            MONTANT = Convert.ToDecimal(((facture.privente * facture.quantite) * facture.tva) / 100),
                        };
                        listrva.Add(tt);
                    }
                    else
                    {
                        var found = listrva.Find(n => n.TVA == facture.tva);
                        found.BASE = found.BASE + Convert.ToDecimal(facture.privente * facture.quantite);
                        found.MONTANT = found.MONTANT + (Convert.ToDecimal(((facture.privente * facture.quantite) * facture.tva) / 100));
                    }

                }
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet5", listrva));

                /********************************/
                /********ImagePath************************************/
                reportViewer1.EnableExternalImages = true;
                ReportParameter paramLogo = new ReportParameter();
                paramLogo.Name = "ImagePath";
                String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                paramLogo.Values.Add(@"file:///" + photolocation);
                reportViewer1.SetParameters(paramLogo);
                /**************************************************************/
                ReportParameter paramDocument = new ReportParameter();
                paramDocument.Name = "Document";
                paramDocument.Values.Add(document);
                reportViewer1.SetParameters(paramDocument);
                /*************************************************************/
                ReportParameter paramArrettee = new ReportParameter();
                paramArrettee.Name = "Arrettee";
                paramArrettee.Values.Add(arrété);
                reportViewer1.SetParameters(paramArrettee);
                /*************************************************/
                ReportParameter paramMontantString = new ReportParameter();
                paramMontantString.Name = "MontantString";
                paramMontantString.Values.Add(Montant);
                reportViewer1.SetParameters(paramMontantString);
                /*********************************************************/
                /*************************************************/
                //List<SVC.F1> ListF1 = new List<SVC.F1>();
                var soldeexiste = proxy.GetAllF1All().Any(n => (n.codeclient == CLIENRECU.Id || n.cle == CLIENRECU.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R") && n.reste != 0);// proxy.GetAllF1Bycode(CLIENRECU.Id).Any(n => n.reste != 0);
                decimal existe = 0;
                if (soldeexiste == true)
                {
                    existe = Convert.ToDecimal(proxy.GetAllF1All().Where(n => (n.codeclient == CLIENRECU.Id || n.cle == CLIENRECU.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R") && n.reste != 0).AsEnumerable().Sum(n => n.reste));

                }
                else
                {
                    existe = 0;
                }


                ReportParameter paramSoldeClient = new ReportParameter();
                paramSoldeClient.Name = "SoldeClient";
                paramSoldeClient.Values.Add(existe.ToString());
                reportViewer1.SetParameters(paramSoldeClient);
                /*********************************************************/
                reportViewer1.Refresh();
                if (interfaceimm == 2)
                {
                    Export(reportViewer1);
                    Print(true);
                }
                else
                {
                    if (interfaceimm == 1)
                    {
                        ExportA4(reportViewer1);
                        Print(false);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }

        private void RunFacture(SVC.ServiceCliniqueClient proxyrecu, List<SVC.F1> Nfact, SVC.ClientV CLIENRECU, int interfaceimm)
        {
            try
            {

                LocalReport reportViewer1 = new LocalReport();
                var selpara = new List<SVC.Param>();
                SVC.Param selectpara = proxy.GetAllParamétre();
                selpara.Add((selectpara));

                string nfact = Nfact.First().nfact.Substring(0, 1);
                string arrété = "";
                string document = "";
                switch (nfact)
                {
                    case "F":
                        arrété = "Arrétée la présente facture à la somme de";
                        document = "Facture";
                        selectpara.ImpressionCollisage = false;
                        break;
                    case "A":
                        arrété = "Arrétée la présente facture d'Avoir à la somme de";
                        document = "Facture d'Avoir";
                        selectpara.ImpressionCollisage = false;
                        break;
                    case "B":
                        arrété = "Arrétée le présent Bon de Livraison à la somme de";
                        document = "Bon de Livraison";
                        break;
                    case "C":
                        arrété = "Arrétée le présent Avoir de Bon de Livraison à la somme de";
                        document = "Bon d'Avoir";

                        break;
                    case "P":
                        arrété = "Arrétée la présente facture Proforma à la somme de";
                        document = "Facture Proforma";
                        selectpara.ImpressionCollisage = false;
                        break;
                    case "R":
                        arrété = "Arrétée la présente facture à la somme de";
                        document = "Facture";
                        selectpara.ImpressionCollisage = false;
                        break;
                }

                /******************Dataset1 parametre****************************/
             
                /****************Convertion*****************/
                string Montant = "";

                if (Nfact.First().net > 0)
                {
                    Montant = (Convert.ToDecimal(Nfact.First().net)).ToText(Nut.Currency.EUR, Nut.Language.French);

                }
                else
                {
                    if (Nfact.First().net < 0)
                    {
                        var mm = -Nfact.First().net;
                        Montant = "Moin " + (Convert.ToDecimal(mm)).ToText(Nut.Currency.EUR, Nut.Language.French);
                    }
                }
                Montant = Montant.Replace("euro", selpara.First().Limon.ToString());

                /************************************/
                if (interfaceimm == 2)
                {
                    MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.BonDeLivraisonDemi), false);

                    reportViewer1.LoadReportDefinition(MyRptStream);
                }
                else
                {
                    if (interfaceimm == 1)
                    {
                        if (selectpara.FactureSansTva == false)
                        {
                            MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.Facture), false);

                            reportViewer1.LoadReportDefinition(MyRptStream);
                        }
                        else
                        {
                            if (selectpara.FactureSansTva == true)
                            {
                                MemoryStream MyRptStream = new MemoryStream((NewOptics.Properties.Resources.FactureSansTva), false);

                                reportViewer1.LoadReportDefinition(MyRptStream);
                            }
                        }
                    }
                }

                ReportDataSource rds = new ReportDataSource();
                rds.Name = "DataSet2";//This refers to the dataset name in the RDLC file
                                      //            listerecu=proxy.GetAllSalleDattente();         // rds.Value = proxy1.GetAllMembership();
                rds.Value = Nfact;
                reportViewer1.DataSources.Add(rds);
                /**************************************************/
                var ClientList = new List<SVC.ClientV>();
                ClientList.Add(CLIENRECU);
                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet4", ClientList));
                /********************************************/
                var FactureList = proxy.GetAllFactureBycompteur(Nfact.First().nfact);

                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet3", FactureList.ToList()));
                /*********************************************/

                reportViewer1.DataSources.Add(new Microsoft.Reporting.WinForms.ReportDataSource("DataSet1", selpara));
                /********ImagePath************************************/
                reportViewer1.EnableExternalImages = true;
                ReportParameter paramLogo = new ReportParameter();
                paramLogo.Name = "ImagePath";
                String photolocation = System.Environment.CurrentDirectory + "/Logo.png";

                paramLogo.Values.Add(@"file:///" + photolocation);
                reportViewer1.SetParameters(paramLogo);
                /**************************************************************/
                ReportParameter paramDocument = new ReportParameter();
                paramDocument.Name = "Document";
                paramDocument.Values.Add(document);
                reportViewer1.SetParameters(paramDocument);
                /*************************************************************/
                ReportParameter paramArrettee = new ReportParameter();
                paramArrettee.Name = "Arrettee";
                paramArrettee.Values.Add(arrété);
                reportViewer1.SetParameters(paramArrettee);
                /*************************************************/
                ReportParameter paramMontantString = new ReportParameter();
                paramMontantString.Name = "MontantString";
                paramMontantString.Values.Add(Montant);
                reportViewer1.SetParameters(paramMontantString);
                /*********************************************************/
                /*************************************************/
                var soldeexiste = proxy.GetAllF1All().Any(n => (n.codeclient == CLIENRECU.Id || n.cle == CLIENRECU.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R") && n.reste != 0);// proxy.GetAllF1Bycode(CLIENRECU.Id).Any(n => n.reste != 0);
                decimal existe = 0;
                if (soldeexiste == true)
                {
                    existe = Convert.ToDecimal(proxy.GetAllF1All().Where(n => (n.codeclient == CLIENRECU.Id || n.cle == CLIENRECU.cle) && (n.nfact.Substring(0, 1) != "P" && n.nfact.Substring(0, 1) != "R") && n.reste != 0).AsEnumerable().Sum(n => n.reste));

                }
                else
                {
                    existe = 0;
                }

                ReportParameter paramSoldeClient = new ReportParameter();
                paramSoldeClient.Name = "SoldeClient";
                paramSoldeClient.Values.Add(existe.ToString());
                reportViewer1.SetParameters(paramSoldeClient);

               
                if (interfaceimm == 2)
                {
                    Export(reportViewer1);
                    Print(true);
                }else
                {
                    if (interfaceimm == 1)
                    {
                        ExportA4(reportViewer1);
                        Print(false);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void btnCreerImpressionDocument_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (visualiserFacture == true)
                {

                    if (tunisie!=true)
                    {
                        if (ListeDesDocuments.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                        {
                            SVC.F1 SelectedClient = ListeDesDocuments.SelectedItem as SVC.F1;
                            List<SVC.F1> facturelist = new List<SVC.F1>();
                            facturelist.Add(SelectedClient);
                            ImpressionFacture cl = new ImpressionFacture(proxy, facturelist, Clientvv, interfaceimpressionfacture);
                            cl.Show();
                            dialog1.Close();
                        }
                    }
                    else
                    {
                        if (ListeDesDocuments.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                        {
                            SVC.F1 SelectedClient = ListeDesDocuments.SelectedItem as SVC.F1;
                            List<SVC.F1> facturelist = new List<SVC.F1>();
                            facturelist.Add(SelectedClient);
                            ImpressionFactureTunisie cl = new ImpressionFactureTunisie(proxy, facturelist, Clientvv, interfaceimpressionfacture);
                            cl.Show();
                            dialog1.Close();
                        }
                    }

                }
                else
                {
                    if (visualiserFacture == false)
                    {
                        if (tunisie != true)
                        {
                            SVC.F1 SelectedClient = ListeDesDocuments.SelectedItem as SVC.F1;
                            List<SVC.F1> facturelist = new List<SVC.F1>();
                            facturelist.Add(SelectedClient);
                            RunFacture(proxy, facturelist, Clientvv, interfaceimpressionfacture);
                            dialog1.Close();
                        }
                        else
                        {
                            SVC.F1 SelectedClient = ListeDesDocuments.SelectedItem as SVC.F1;
                            List<SVC.F1> facturelist = new List<SVC.F1>();
                            facturelist.Add(SelectedClient);
                            RunFactureTunisie(proxy, facturelist, Clientvv, interfaceimpressionfacture);
                            dialog1.Close();
                        }
                    }
                }

            }catch(Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void chimpression_Checked_2(object sender, RoutedEventArgs e)
        {
            try
            {
                visualiserFacture = true;
            }
            catch(Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }

        }

        private void chimpression_Unchecked_2(object sender, RoutedEventArgs e)
        {
            try
            {
                visualiserFacture = false;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void facturea4_Checked(object sender, RoutedEventArgs e)
        {
            try { 
            interfaceimpressionfacture = 1;
               }
             catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

              }
             }

        private void facturea5_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                interfaceimpressionfacture = 2;
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
         }

        private void BtnReception_Click(object sender, RoutedEventArgs e)
        {

            try
            {
                if (memberuser.CreationCommande == true)
                {
                    AjouterCommande cl = new AjouterCommande(proxy, memberuser, callback, null, null, null);
                    cl.Show();
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        

        

        private void ExamenOptometrieDatagrid_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ExamenOptometrieDatagrid.ItemsSource = proxy.GetAllExamensOptométriquesbycode(Clientvv.Id).OrderBy(n => n.Date);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void ExamenBinoculaireDatagrid_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ExamenBinoculaireDatagrid.ItemsSource = proxy.GetAllExamenBinoculairebycode(Clientvv.Id).OrderBy(n => n.Date);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void LentilleDatagrid_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                LentilleDatagrid.ItemsSource = proxy.GetAllLentilleClientbycode(Clientvv.Id).OrderBy(n => n.Date);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void MontureDatagrid_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                MontureDatagrid.ItemsSource = proxy.GetAllMonturebycode(Clientvv.Id).OrderBy(n => n.Date);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void chcodebare_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                if (chcodebare.IsChecked == true)
                {
                    txtbarrecode.Focus();

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void chcodebare_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {
                if (chcodebare.IsChecked == false)
                {
                    txtRecherche.Focus();
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void txtbarrecode_GotFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                txtbarrecode.Text = "";
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void txtbarrecode_LostFocus_1(object sender, RoutedEventArgs e)
        {
            try
            {

                ((TextBox)sender).Text = "123456789";

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }
        SVC.Prodf retournercodebarreprodffirst(string codeabarre)
        {

            var ll = proxy.GetAllTcabbycode(codeabarre).ToList();
            var test = NomenclatureProduit.ItemsSource as IEnumerable<SVC.Prodf>;
            SVC.Prodf produit = new SVC.Prodf();
            if (ll.Count > 0)
            {
                foreach (var itemcode in ll)
                {

                    var tte = test.Any(n => n.cab == itemcode.cleproduit && n.quantite > 0);
                    if (tte == true)
                    {

                        var produitexiste = test.Where(n => n.cab == itemcode.cleproduit && n.quantite > 0);

                        foreach (var prodff in produitexiste)
                        {

                            bool selectedprodfexiste = produitavendre.Any(n => n.Id == prodff.Id);

                            if (prodff.perempt != null)
                            {

                                if (selectedprodfexiste)
                                {
                                    var selectedprodf = produitavendre.Find(n => n.Id == prodff.Id);

                                    if (prodff.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)) && selectedprodf.prixa > selectedprodf.quantite)
                                    {

                                        produit = prodff;
                                        break;
                                    }
                                }
                                else
                                {

                                    produit = prodff;
                                    break;

                                }
                            }
                            else
                            {
                                if (selectedprodfexiste)
                                {
                                    var selectedprodf = produitavendre.Find(n => n.Id == prodff.Id);
                                    if (selectedprodf.prixa > selectedprodf.quantite)
                                    {
                                        // if (selectedtropuvé.perempt.Value >= DateTime.Now.Date.AddDays(Convert.ToDouble(selectedparam.interdirperempt)))

                                        produit = prodff;
                                        break;
                                    }

                                }
                                else
                                {
                                    produit = prodff;
                                    break;
                                }
                            }



                        }
                    }
                }
            }


            return produit;
        }

        private void txtbarrecode_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (txtbarrecode.Text.Count() == txtbarrecode.MaxLength && CompteComboBox.SelectedIndex >= 0)
                {
                    SVC.Prodf selectedtropuvé = retournercodebarreprodffirst(txtbarrecode.Text);
                    if (selectedtropuvé != null && selectedtropuvé.Id != 0 && selectedtropuvé.quantite > 0)
                    {
                        SVC.Facture facturevente = new SVC.Facture
                        {
                            cab = selectedtropuvé.cab,
                            cf = selectedtropuvé.cf,
                            codeprod = selectedtropuvé.cp,
                            date = DateTime.Now,
                            datef = selectedtropuvé.datef,
                            design = selectedtropuvé.design,
                            lot = selectedtropuvé.lot,
                            oper = memberuser.Username,
                            perempt = selectedtropuvé.perempt,
                            tva = selectedtropuvé.tva,
                            previent = selectedtropuvé.previent,
                            privente = selectedtropuvé.privente,
                            quantite = 1,
                            Total = selectedtropuvé.privente * 1,
                            ficheproduit = selectedtropuvé.Id,
                            ff = selectedtropuvé.nfact,
                            Fournisseur = selectedtropuvé.fourn,
                            collisage = selectedtropuvé.collisage,
                        };
                        var found = factureselectedl.Find(item => item.ficheproduit == selectedtropuvé.Id);
                        if (found == null)
                        {

                            SVC.Prodf produitadd = new SVC.Prodf
                            {
                                cab = selectedtropuvé.cab,
                                cf = selectedtropuvé.cf,
                                cp = selectedtropuvé.cp,
                                datef = selectedtropuvé.datef,
                                dates = selectedtropuvé.dates,
                                design = selectedtropuvé.design,
                                famille = selectedtropuvé.famille,
                                fourn = selectedtropuvé.fourn,
                                IdFamille = selectedtropuvé.IdFamille,
                                Id = selectedtropuvé.Id,
                                lot = selectedtropuvé.lot,
                                nfact = selectedtropuvé.nfact,
                                perempt = selectedtropuvé.perempt,
                                previent = selectedtropuvé.previent,
                                privente = selectedtropuvé.privente,
                                prixa = selectedtropuvé.quantite,
                                prixb = selectedtropuvé.prixb,
                                prixc = selectedtropuvé.prixc,
                                quantite = 1,
                                tva = selectedtropuvé.tva,
                                collisage = selectedtropuvé.collisage,
                            };
                            produitadd.quantite = 1;
                            produitavendre.Add(produitadd);
                            factureselectedl.Add(facturevente);

                        }
                        else
                        {
                            SVC.Prodf selectedprodf = produitavendre.Find(n => n.Id == selectedtropuvé.Id);

                            if (selectedprodf.Id == found.ficheproduit && found.quantite < selectedtropuvé.quantite)
                            {
                                found.quantite = found.quantite + 1;
                                found.Total = found.Total + (facturevente.Total);
                                selectedprodf.quantite = selectedprodf.quantite + 1;

                            }
                            else
                            {
                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            }




                        }
                        if (factureselectedl.Count > 0)
                        {
                            ReceptDatagrid.ItemsSource = factureselectedl;
                            CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
                          
                            



                            txtbarrecode.Text = "";
                            txtbarrecode.Focus();
                        }
                        else
                        {
                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Produit n'existe pas", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                            txtbarrecode.Text = "";
                            txtbarrecode.Focus();
                        }
                    }
                    else
                    {
                        MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Produit n'existe pas quantité quantité insuffisante", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
                        txtbarrecode.Text = "";
                        txtbarrecode.Focus();

                    }
                }

            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void BtnService_Click(object sender, RoutedEventArgs e)
        {
            #region chked



            SVC.Facture facturevente = new SVC.Facture
            {
                cab = "",
                cf = 0,
                codeprod = 0,
                date = DateTime.Now,
                datef = DateTime.Now,
                design = "Service et maintenance",
                lot = "",
                oper = memberuser.Username,
                perempt = null,
                tva = 0,
                previent = 0,
                privente = 1,
                quantite = 1,
                Total = 1 * 1,
                ficheproduit = 0,
                ff = "Service et maintenance",
                Fournisseur = "Service et maintenance",
                collisage=1,
            };
            var found = factureselectedl.Find(item => item.ficheproduit == 0);
            if (found == null)
            {

                factureselectedl.Add(facturevente);

            }
            else
            {
                //  foreach (SVC.Prodf selectedprodf in produitavendre)
                // {

                found.quantite = found.quantite + 1;
                found.Total = found.Total + (facturevente.Total);

                // }



            }
            ReceptDatagrid.ItemsSource = factureselectedl;
            CollectionViewSource.GetDefaultView(ReceptDatagrid.ItemsSource).Refresh();
           
        }


        #endregion

        

        private void txtRgecherdfgcheVisite_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
               TextBox t = (TextBox)sender;
                string filter = t.Text;
                ICollectionView cv = CollectionViewSource.GetDefaultView(ProduitHistoriquevente.ItemsSource);
                if (filter == "")
                    cv.Filter = null;
                else
                {
                    cv.Filter = o =>
                    {
                        SVC.Facture p = o as SVC.Facture;
                        if (t.Name == "txtId")
                            return (p.Id == Convert.ToInt32(filter));
                        return (p.serialnumber.ToUpper().StartsWith(filter.ToUpper()) );
                    };
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

            }
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (NomenclatureProduit.SelectedItem != null)
                {
                    SVC.Prodf selectedprodf = NomenclatureProduit.SelectedItem as SVC.Prodf;
                    var produit = proxy.GetAllProduitbyid(Convert.ToInt32(selectedprodf.cp)).First();
                    ImageProduit cl = new ImageProduit(proxy, produit, memberuser, callback);
                    cl.Show();

                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc1 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtRemiseMonture_TextChanged(object sender, TextChangedEventArgs e)
        {

            try
            {

                Decimal PrixTotalLoin, PrixMontureLoin, PrixTotalPres, PrixMonturePres, PrixTotalAcc1, PrixTotalAcc2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLoin.Text != "")
                {
                    PrixTotalLoin = Convert.ToDecimal(txtPrixTotalLoin.Text);
                }
                else
                {
                    PrixTotalLoin = 0;
                }
                if (txtPrixMontureLoin.Text != "")
                {
                    PrixMontureLoin = Convert.ToDecimal(txtPrixMontureLoin.Text);
                }
                else
                {
                    PrixMontureLoin = 0;
                }
                if (txtPrixTotalPres.Text != "")
                {
                    PrixTotalPres = Convert.ToDecimal(txtPrixTotalPres.Text);
                }
                else
                {
                    PrixTotalPres = 0;
                }

                if (txtPrixMonturePres.Text != "")
                {
                    PrixMonturePres = Convert.ToDecimal(txtPrixMonturePres.Text);
                }
                else
                {
                    PrixMonturePres = 0;
                }
                if (txtPrixTotalAcc1.Text != "")
                {
                    PrixTotalAcc1 = Convert.ToDecimal(txtPrixTotalAcc1.Text);
                }
                else
                {
                    PrixTotalAcc1 = 0;
                }

                if (txtPrixTotalAcc2.Text != "")
                {
                    PrixTotalAcc2 = Convert.ToDecimal(txtPrixTotalAcc2.Text);
                }
                else
                {
                    PrixTotalAcc2 = 0;
                }

                montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                if (!String.IsNullOrEmpty(txtRemiseMonture.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseMonture.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture);
                        }
                        else
                        {
                            txtRemiseMonture.Text = "";
                            montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                        }
                    }
                    else
                    {
                        txtRemiseMonture.Text = "";
                        montanttotal = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseMonture.Text = "";
                }
                /**********************************/

                /***********************************/

                // txtMontantTotal.Text = (PrixTotalAcc2 + PrixTotalAcc1 + PrixMonturePres + PrixTotalPres + PrixMontureLoin + PrixTotalLoin - remisemonture).ToString();

                txtMontantTotal.Text = (montanttotal).ToString();
                MontureClass.MontantTotal = Convert.ToDecimal(txtMontantTotal.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtRemiseLentille_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {

                Decimal PrixTotalLentille, PrixAccessoires1, PrixAccessoires2, remisemonture, montanttotal = 0;

                if (txtPrixTotalLentille.Text != "")
                {
                    PrixTotalLentille = Convert.ToDecimal(txtPrixTotalLentille.Text);
                }
                else
                {
                    PrixTotalLentille = 0;
                }
                if (txtPrixTotalAcc1Lentille.Text != "")
                {
                    PrixAccessoires1 = Convert.ToDecimal(txtPrixTotalAcc1Lentille.Text);
                }
                else
                {
                    PrixAccessoires1 = 0;
                }
                if (txtPrixTotalAcc2Lentille.Text != "")
                {
                    PrixAccessoires2 = Convert.ToDecimal(txtPrixTotalAcc2Lentille.Text);
                }
                else
                {
                    PrixAccessoires2 = 0;
                }

                montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                if (!String.IsNullOrEmpty(txtRemiseLentille.Text))
                {
                    remisemonture = Convert.ToDecimal(txtRemiseLentille.Text);
                    if (remisemonture != 0 && montanttotal != 0)
                    {
                        if (((selectedparam.maxremisevente * montanttotal) / 100 >= Convert.ToDecimal(remisemonture)))
                        {
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2 - remisemonture);
                        }
                        else
                        {
                            txtRemiseLentille.Text = "";
                            montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                        }
                    }
                    else
                    {
                        txtRemiseLentille.Text = "";
                        montanttotal = (PrixTotalLentille + PrixAccessoires1 + PrixAccessoires2);
                    }
                }
                else
                {
                    remisemonture = 0;
                    txtRemiseLentille.Text = "";
                }

                txtMontantTotalLentille.Text = (montanttotal).ToString();
                LentilleClass.MontantTotal = Convert.ToDecimal(txtMontantTotalLentille.Text);
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtLoinAddDroite_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                decimal LoinAddDroite, LoinSphereDroite = 0;
                if (txtLoinAddDroite.Text != "")
                {
                    if (decimal.TryParse(txtLoinAddDroite.Text, out LoinAddDroite))
                        LoinAddDroite = Convert.ToDecimal(txtLoinAddDroite.Text);
                    else
                        LoinAddDroite = 0;
                }
                else
                {
                    txtLoinAddDroite.Text = "";
                    LoinAddDroite = 0;
                }
                if (txtLoinSphereDroite.Text != "")
                {
                    if (decimal.TryParse(txtLoinSphereDroite.Text, out LoinSphereDroite))
                        LoinSphereDroite = Convert.ToDecimal(txtLoinSphereDroite.Text);
                    else
                        LoinSphereDroite = 0;
                }
                else
                {
                    txtLoinSphereDroite.Text = "";
                    LoinSphereDroite = 0;
                }
                if (LoinAddDroite!=0 && LoinSphereDroite!=0)
                {

                    txtPresCylindreDroite.Text = txtLoinCylindreDroite.Text;
                    txtPresAxeDroite.Text = txtLoinAxeDroite.Text;
                    txtPresSphereDroite.Text = (LoinAddDroite + LoinSphereDroite).ToString();
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void txtLoinAddGauche_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                decimal LoinAddDroite, LoinSphereDroite = 0;
                if (txtLoinAddGauche.Text != "")
                {
                    if (decimal.TryParse(txtLoinAddGauche.Text, out LoinAddDroite))
                        LoinAddDroite = Convert.ToDecimal(txtLoinAddGauche.Text);
                    else
                        LoinAddDroite = 0;
                }
                else
                {
                    txtLoinAddGauche.Text = "";
                    LoinAddDroite = 0;
                }
                if (txtLoinSphereGauche.Text != "")
                {
                    if (decimal.TryParse(txtLoinSphereGauche.Text, out LoinSphereDroite))
                        LoinSphereDroite = Convert.ToDecimal(txtLoinSphereGauche.Text);
                    else
                        LoinSphereDroite = 0;
                }
                else
                {
                    txtLoinSphereGauche.Text = "";
                    LoinSphereDroite = 0;
                }
                if (LoinAddDroite != 0 && LoinSphereDroite != 0)
                {

                    txtPresCylindreGauche.Text = txtLoinCylindreGauche.Text;
                    txtPresAxeGauche.Text = txtLoinAxeGauche.Text;
                    txtPresSphereGauche.Text = (LoinAddDroite + LoinSphereDroite).ToString();
                }
            }
            catch (Exception ex)
            {
                MessageBoxResult resultc10 = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void btnCreerImpression_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (visualiser == true)
                {
                  
                        switch (interfaceimpressionmonture)
                        {
                            case 1:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selectedmont = MontureDatagrid.SelectedItem as SVC.Monture;
                                    List<SVC.Monture> mm = new List<SVC.Monture>();
                                    mm.Add(selectedmont);
                                    List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                    clientvvv.Add(Clientvv);
                                    ImpressionFicheAtelier cl = new ImpressionFicheAtelier(proxy, mm, clientvvv, interfaceimpressionmonture);
                                    cl.Show();
                                    dialog1.Close();
                                    interfaceimpressionmonture = 0;
                                    visualiser = false;
                                }
                                break;
                            case 4:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selectedmont = MontureDatagrid.SelectedItem as SVC.Monture;
                                    List<SVC.Monture> mm = new List<SVC.Monture>();
                                    mm.Add(selectedmont);
                                    List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                    clientvvv.Add(Clientvv);
                                    ImpressionFicheAtelier cl = new ImpressionFicheAtelier(proxy, mm, clientvvv, interfaceimpressionmonture);
                                    cl.Show();

                                    dialog1.Close();
                                    interfaceimpressionmonture = 0;
                                    visualiser = false;
                                }
                                break;
                            case 3:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selecedmonture = MontureDatagrid.SelectedItem as SVC.Monture;

                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                    {

                                        List<SVC.Monture> listmonture = new List<SVC.Monture>();
                                        listmonture.Add(selecedmonture);
                                        var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                        if (VisiteApayerexiste == true)
                                        {
                                            SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                            var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                /* List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                 List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                 listedepaiem.Add(dpf.First());*/

                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());

                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                listevisite.Add(VisiteApayer);
                                                List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                                listclient.Add(Clientvv);
                                                ImpressionMonturePaiement cl = new ImpressionMonturePaiement(proxy, listmonture, listclient, interfaceimpressionmonture, listevisite, listedepaiem);
                                                cl.Show();
                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult dresult = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                        {
                                            List<SVC.Monture> listmonture = new List<SVC.Monture>();
                                            listmonture.Add(selecedmonture);

                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                /* List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                 List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                 listedepaiem.Add(dpf.First());*/

                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());

                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                SVC.F1 VisiteApayer = new SVC.F1
                                                {
                                                    codeclient = selecedmonture.IdClient,
                                                    raison = selecedmonture.RaisonClient,
                                                };
                                                listevisite.Add(VisiteApayer);
                                                List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                                listclient.Add(Clientvv);
                                                ImpressionMonturePaiement cl = new ImpressionMonturePaiement(proxy, listmonture, listclient, interfaceimpressionmonture, listevisite, listedepaiem);
                                                cl.Show();
                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult dresult = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                            }
                                        }
                                        else
                                        {
                                            MessageBoxResult dresult = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);


                                        }

                                    }
                                }
                                break;
                            case 2:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selecedmonture = MontureDatagrid.SelectedItem as SVC.Monture;
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                    {
                                        var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                        if (VisiteApayerexiste == true)
                                        {
                                            SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                            var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());
                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                listevisite.Add(VisiteApayer);
                                                ImpressionRecu cl = new ImpressionRecu(proxy, listedepaiem, listevisite);
                                                cl.Show();
                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                    else
                                    {
                                        if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                        {

                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());
                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                SVC.F1 VisiteApayer = new SVC.F1
                                                {
                                                    codeclient = selecedmonture.IdClient,
                                                    raison = selecedmonture.RaisonClient,
                                                };
                                                listevisite.Add(VisiteApayer);
                                                ImpressionRecu cl = new ImpressionRecu(proxy, listedepaiem, listevisite);
                                                cl.Show();
                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }

                                        }
                                    }
                                }
                                break;

                        }
                    
                }
                else
                {
                    if (visualiser == false)
                    {
                        switch (interfaceimpressionmonture)
                        {
                            case 1:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selectedmont = MontureDatagrid.SelectedItem as SVC.Monture;
                                    List<SVC.Monture> mm = new List<SVC.Monture>();
                                    mm.Add(selectedmont);
                                    List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                    clientvvv.Add(Clientvv);
                                    RunAtelier(mm, clientvvv);
                                    visualiser = false;
                                    dialog1.Close();
                                    interfaceimpressionmonture = 0;
                                    visualiser = false;

                                }
                                break;
                            case 4:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selectedmont = MontureDatagrid.SelectedItem as SVC.Monture;
                                    List<SVC.Monture> mm = new List<SVC.Monture>();
                                    mm.Add(selectedmont);
                                    List<SVC.ClientV> clientvvv = new List<SVC.ClientV>();
                                    clientvvv.Add(Clientvv);
                                    RunAtelierDouble(mm, clientvvv);
                                    visualiser = false;
                                    dialog1.Close();
                                    interfaceimpressionmonture = 0;
                                    visualiser = false;
                                }
                                break;
                            case 3:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selecedmonture = MontureDatagrid.SelectedItem as SVC.Monture;
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                    {
                                        List<SVC.Monture> listmonture = new List<SVC.Monture>();
                                        listmonture.Add(selecedmonture);
                                        var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                        if (VisiteApayerexiste == true)
                                        {
                                            SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                            var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                /* List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                 List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                 listedepaiem.Add(dpf.First());*/

                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());

                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                listevisite.Add(VisiteApayer);
                                                List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                                listclient.Add(Clientvv);
                                                RunMonturePaiement(listmonture, listclient, listevisite, listedepaiem);
                                                visualiser = false;
                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                    else
                                    {
                                        if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                        {
                                            List<SVC.Monture> listmonture = new List<SVC.Monture>();
                                            listmonture.Add(selecedmonture);
                                           
                                                var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                                if (dpfexiste == true)
                                                {
                                                    /* List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                     List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                     listedepaiem.Add(dpf.First());*/

                                                    List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                    List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                    dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                    listedepaiem.Add(dpf.Last());

                                                    List<SVC.F1> listevisite = new List<SVC.F1>();
                                                    SVC.F1 VisiteApayer = new SVC.F1
                                                    {
                                                    codeclient=selecedmonture.IdClient,
                                                    raison=selecedmonture.RaisonClient,
                                                    };
                                                    listevisite.Add(VisiteApayer);
                                                    List<SVC.ClientV> listclient = new List<SVC.ClientV>();
                                                    listclient.Add(Clientvv);
                                                    RunMonturePaiement(listmonture, listclient, listevisite, listedepaiem);
                                                    visualiser = false;
                                                    dialog1.Close();
                                                    interfaceimpressionmonture = 0;
                                                    visualiser = false;
                                                }
                                                else
                                                {
                                                    MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                                }
                                           
                                        }
                                    }
                                }
                                break;
                            case 2:
                                if (MontureDatagrid.SelectedItem != null && memberuser.ImpressionDossierClient == true)
                                {
                                    SVC.Monture selecedmonture = MontureDatagrid.SelectedItem as SVC.Monture;
                                    if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == true)
                                    {
                                        var VisiteApayerexiste = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).Any();
                                        if (VisiteApayerexiste == true)
                                        {
                                            SVC.F1 VisiteApayer = proxy.GetAllF1ByCleDossier(selecedmonture.Cle).First();
                                            var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(VisiteApayer.cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());
                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                listevisite.Add(VisiteApayer);
                                                RunRecu(listedepaiem, listevisite);

                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }
                                        }
                                        else
                                        {
                                            MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                        }
                                    }
                                    else
                                    {
                                        if (selecedmonture.StatutDevis == true && selecedmonture.StatutVente == false)
                                        {

                                            var dpfexiste = proxy.GetAllDepeimentByF1(selecedmonture.Cle).Any();
                                            if (dpfexiste == true)
                                            {
                                                //  var dpfexiste = proxy.GetAllDepeimentByF1(VisiteApayer.cle).Any();
                                                List<SVC.Depeiment> dpf = proxy.GetAllDepeimentByF1(selecedmonture.Cle);
                                                List<SVC.Depeiment> listedepaiem = new List<SVC.Depeiment>();
                                                dpf.Last().montant = dpf.AsEnumerable().Sum(n => n.montant);
                                                listedepaiem.Add(dpf.Last());
                                                List<SVC.F1> listevisite = new List<SVC.F1>();
                                                SVC.F1 VisiteApayer = new SVC.F1
                                                {
                                                    codeclient = selecedmonture.IdClient,
                                                    raison = selecedmonture.RaisonClient,
                                                };
                                                listevisite.Add(VisiteApayer);
                                                RunRecu(listedepaiem, listevisite);

                                                dialog1.Close();
                                                interfaceimpressionmonture = 0;
                                                visualiser = false;
                                            }
                                            else
                                            {
                                                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show("Paiement inéxistant", NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);

                                            }

                                        }
                                    }
                                }
                                break;

                        }
                    }
                }






            }
            catch (Exception ex)
            {
                MessageBoxResult result = Xceed.Wpf.Toolkit.MessageBox.Show(ex.Message, NewOptics.Properties.Resources.SiteWeb, MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

    }
}
 
